self.isolated,bool
self._parsers,"Dict[Kind, List[Tuple[str, RawConfigParser]]]"
self._config,"Dict[Kind, Dict[str, Any]]"
self._modified_parsers,"List[Tuple[str, RawConfigParser]]"
name,str
version,str
commands_order,List[Type[Command]]
hidden,bool
ignore_require_venv,bool
help_,Any
require_virtualenv,Any
version,Any
quiet,Any
progress_bar,Any
log,Any
no_input,Any
proxy,Any
retries,Any
timeout,Any
skip_requirements_regex,Any
cert,Any
client_cert,Any
index_url,Any
no_index,Any
process_dependency_links,Any
src,Any
no_deps,Any
build_dir,Any
ignore_requires_python,Any
no_build_isolation,Any
install_options,Any
global_options,Any
no_clean,Any
pre,Any
disable_pip_version_check,Any
always_unzip,Any
hash,Any
require_hashes,Any
_original_showwarning,Any
_BaseBar,Any
phases,Any
self._body,"List[Tuple[Union[Key, None], Item]]"
sources,sources_type
table,Mapping
deps,"Dict[str, Dict[str, Union[List[str], str]]]"
run_app,"Callable[[Union[Application, Awaitable[Application]]],None]"
app,"Union[Application, Awaitable[Application]]"
sock,"Union[socket.socket, None]"
shutdown_timeout,float
backlog,int
access_log_format,str
handle_signals,bool
main,"Callable[[List[str]],None]"
__init__,"Callable[[_],None]"
message,str
__init__,"Callable[[_, str],None]"
message,str
__init__,"Callable[[_, str, str, str],None]"
line,str
limit,str
actual_size,str
__init__,"Callable[[_, Union[bytes, str]],None]"
__init__,"Callable[[_, str],None]"
line,str
__init__,"Callable[[_],None]"
client_max_size,int
loop,"Union[asyncio.AbstractEventLoop, None]"
debug,Any
self._router,UrlDispatcher
self._middlewares,_Middlewares
self._middlewares_handlers,_MiddlewaresHandlers
self._subapps,_Subapps
self._on_response_prepare,_RespPrepareSignal
self._on_startup,_AppSignal
self._on_shutdown,_AppSignal
self._on_cleanup,_AppSignal
__init_subclass__,"Callable[[Type[Application]],None]"
__setattr__,"Callable[[_, str, Any],None]"
name,str
val,Any
__eq__,"Callable[[_, object],bool]"
other,object
__getitem__,"Callable[[_, str],Any]"
key,str
_check_frozen,"Callable[[_],None]"
__setitem__,"Callable[[_, str, Any],None]"
key,str
value,Any
__delitem__,"Callable[[_, str],None]"
key,str
__len__,"Callable[[_],int]"
_set_loop,"Callable[[_, Union[asyncio.AbstractEventLoop, None]],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
pre_frozen,"Callable[[_],bool]"
pre_freeze,"Callable[[_],None]"
frozen,"Callable[[_],bool]"
freeze,"Callable[[_],None]"
debug,"Callable[[_],bool]"
_reg_subapp_signals,"Callable[[_, Application],None]"
subapp,Application
reg_handler,"Callable[[str],None]"
signame,str
handler,"Callable[[Application],None]"
app,Application
add_subapp,"Callable[[_, str, Application],AbstractResource]"
prefix,str
subapp,Application
_add_subapp,"Callable[[_, Callable[[],AbstractResource], Application],AbstractResource]"
resource_factory,"Callable[[],AbstractResource]"
subapp,Application
add_domain,"Callable[[_, str, Application],AbstractResource]"
domain,str
subapp,Application
rule,Domain
add_routes,"Callable[[_, Iterable[AbstractRouteDef]],None]"
on_response_prepare,"Callable[[_],_RespPrepareSignal]"
on_startup,"Callable[[_],_AppSignal]"
on_shutdown,"Callable[[_],_AppSignal]"
on_cleanup,"Callable[[_],_AppSignal]"
cleanup_ctx,"Callable[[_],CleanupContext]"
router,"Callable[[_],UrlDispatcher]"
middlewares,"Callable[[_],_Middlewares]"
_make_handler,"Callable[[_],Server]"
loop,"Union[asyncio.AbstractEventLoop, None]"
kwargs,Any
make_handler,"Callable[[_],Server]"
loop,"Union[asyncio.AbstractEventLoop, None]"
kwargs,Any
startup,"Callable[[_],None]"
shutdown,"Callable[[_],None]"
cleanup,"Callable[[_],None]"
_make_request,"Callable[[_, RawRequestMessage, StreamReader, RequestHandler, AbstractStreamWriter, asyncio.Task[None], Type[Request]],Request]"
message,RawRequestMessage
payload,StreamReader
protocol,RequestHandler
writer,AbstractStreamWriter
task,asyncio.Task[None]
_prepare_middleware,"Callable[[_],Iterator[Tuple[_Middleware, bool]]]"
_handle,"Callable[[_, Request],StreamResponse]"
request,Request
__call__,"Callable[[_],Application]"
__repr__,"Callable[[_],str]"
__init__,"Callable[[_],None]"
self._exits,List[AsyncIterator[None]]
_on_startup,"Callable[[_, Application],None]"
app,Application
_on_cleanup,"Callable[[_, Application],None]"
app,Application
__init__,"Callable[[_, Type[SimpleNamespace]],None]"
self._on_request_start,_Signal
self._on_request_chunk_sent,_Signal
self._on_response_chunk_received,_Signal
self._on_request_end,_Signal
self._on_request_exception,_Signal
self._on_request_redirect,_Signal
self._on_connection_queued_start,_Signal
self._on_connection_queued_end,_Signal
self._on_connection_create_start,_Signal
self._on_connection_create_end,_Signal
self._on_connection_reuseconn,_Signal
self._on_dns_resolvehost_start,_Signal
self._on_dns_resolvehost_end,_Signal
self._on_dns_cache_hit,_Signal
self._on_dns_cache_miss,_Signal
trace_config_ctx,"Callable[[_, SimpleNamespace],SimpleNamespace]"
trace_request_ctx,SimpleNamespace
freeze,"Callable[[_],None]"
on_request_start,"Callable[[_],_Signal]"
on_request_chunk_sent,"Callable[[_],_Signal]"
on_response_chunk_received,"Callable[[_],_Signal]"
on_request_end,"Callable[[_],_Signal]"
on_request_exception,"Callable[[_],_Signal]"
on_request_redirect,"Callable[[_],_Signal]"
on_connection_queued_start,"Callable[[_],_Signal]"
on_connection_queued_end,"Callable[[_],_Signal]"
on_connection_create_start,"Callable[[_],_Signal]"
on_connection_create_end,"Callable[[_],_Signal]"
on_connection_reuseconn,"Callable[[_],_Signal]"
on_dns_resolvehost_start,"Callable[[_],_Signal]"
on_dns_resolvehost_end,"Callable[[_],_Signal]"
on_dns_cache_hit,"Callable[[_],_Signal]"
on_dns_cache_miss,"Callable[[_],_Signal]"
__init__,"Callable[[_, ClientSession, TraceConfig, SimpleNamespace],None]"
session,ClientSession
trace_config,TraceConfig
trace_config_ctx,SimpleNamespace
send_request_start,"Callable[[_, str, URL, CIMultiDict[str]],None]"
method,str
url,URL
send_request_chunk_sent,"Callable[[_, bytes],None]"
chunk,bytes
send_response_chunk_received,"Callable[[_, bytes],None]"
chunk,bytes
send_request_end,"Callable[[_, str, URL, CIMultiDict[str], ClientResponse],None]"
method,str
url,URL
response,ClientResponse
send_request_exception,"Callable[[_, str, URL, CIMultiDict[str], BaseException],None]"
method,str
url,URL
exception,BaseException
send_request_redirect,"Callable[[_, str, URL, CIMultiDict[str], ClientResponse],None]"
method,str
url,URL
response,ClientResponse
send_connection_queued_start,"Callable[[_],None]"
send_connection_queued_end,"Callable[[_],None]"
send_connection_create_start,"Callable[[_],None]"
send_connection_create_end,"Callable[[_],None]"
send_connection_reuseconn,"Callable[[_],None]"
send_dns_resolvehost_start,"Callable[[_, str],None]"
host,str
send_dns_resolvehost_end,"Callable[[_, str],None]"
host,str
send_dns_cache_hit,"Callable[[_, str],None]"
host,str
send_dns_cache_miss,"Callable[[_, str],None]"
host,str
__init__,"Callable[[_],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
headers,LooseHeaders
skip_auto_headers,"Union[Iterable[str], None]"
json_serialize,JSONEncoder
version,HttpVersion
connector_owner,bool
raise_for_status,bool
auto_decompress,bool
trust_env,bool
trace_configs,"Union[List[TraceConfig], None]"
self._connector,BaseConnector
__init_subclass__,"Callable[[Type[ClientSession]],None]"
__setattr__,"Callable[[_, str, Any],None]"
name,str
val,Any
__del__,"Callable[[_, Any],None]"
_warnings,Any
request,"Callable[[_, str, StrOrURL],_RequestContextManager]"
method,str
url,StrOrURL
kwargs,Any
_request,"Callable[[_, str, StrOrURL],ClientResponse]"
method,str
str_or_url,StrOrURL
params,"Union[Mapping[str, str], None]"
data,Any
json,Any
headers,LooseHeaders
skip_auto_headers,"Union[Iterable[str], None]"
allow_redirects,bool
max_redirects,int
expect100,bool
read_until_eof,bool
real_timeout,ClientTimeout
ws_connect,"Callable[[_, StrOrURL],_WSRequestContextManager]"
url,StrOrURL
method,str
timeout,float
autoclose,bool
autoping,bool
compress,int
max_msg_size,int
_ws_connect,"Callable[[_, StrOrURL],ClientWebSocketResponse]"
url,StrOrURL
method,str
timeout,float
autoclose,bool
autoping,bool
compress,int
max_msg_size,int
get,"Callable[[_, StrOrURL],_RequestContextManager]"
url,StrOrURL
allow_redirects,bool
kwargs,Any
options,"Callable[[_, StrOrURL],_RequestContextManager]"
url,StrOrURL
allow_redirects,bool
kwargs,Any
head,"Callable[[_, StrOrURL],_RequestContextManager]"
url,StrOrURL
allow_redirects,bool
kwargs,Any
post,"Callable[[_, StrOrURL],_RequestContextManager]"
url,StrOrURL
data,Any
kwargs,Any
put,"Callable[[_, StrOrURL],_RequestContextManager]"
url,StrOrURL
data,Any
kwargs,Any
patch,"Callable[[_, StrOrURL],_RequestContextManager]"
url,StrOrURL
data,Any
kwargs,Any
delete,"Callable[[_, StrOrURL],_RequestContextManager]"
url,StrOrURL
kwargs,Any
close,"Callable[[_],None]"
closed,"Callable[[_],bool]"
cookie_jar,"Callable[[_],AbstractCookieJar]"
detach,"Callable[[_],None]"
__enter__,"Callable[[_],None]"
__exit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__aenter__,"Callable[[_],ClientSession]"
__aexit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__init__,"Callable[[_, Coroutine[asyncio.Future[Any], None, _RetType]],None]"
coro,"Coroutine[asyncio.Future[Any], None, _RetType]"
send,"Callable[[_, None],asyncio.Future[Any]]"
arg,None
throw,"Callable[[_, BaseException],None]"
arg,BaseException
close,"Callable[[_],None]"
__aenter__,"Callable[[_],_RetType]"
__aexit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__aexit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__init__,"Callable[[_, Coroutine[asyncio.Future[Any], None, ClientResponse], ClientSession],None]"
coro,"Coroutine[asyncio.Future[Any], None, ClientResponse]"
session,ClientSession
__aenter__,"Callable[[_],ClientResponse]"
__aexit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
request,"Callable[[str, StrOrURL],_SessionRequestContextManager]"
method,str
url,StrOrURL
params,"Union[Mapping[str, str], None]"
data,Any
json,Any
headers,LooseHeaders
skip_auto_headers,"Union[Iterable[str], None]"
allow_redirects,bool
max_redirects,int
expect100,bool
read_until_eof,bool
version,HttpVersion
loop,"Union[asyncio.AbstractEventLoop, None]"
get_unused_port_socket,"Callable[[str],socket.socket]"
host,str
get_port_socket,"Callable[[str, int],socket.socket]"
host,str
port,int
unused_port,"Callable[[],int]"
__init__,"Callable[[_],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
host,str
skip_url_asserts,bool
kwargs,Any
start_server,"Callable[[_, Union[asyncio.AbstractEventLoop, None]],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
kwargs,Any
_make_runner,"Callable[[_],BaseRunner]"
kwargs,Any
make_url,"Callable[[_, str],URL]"
path,str
started,"Callable[[_],bool]"
closed,"Callable[[_],bool]"
handler,"Callable[[_],Server]"
close,"Callable[[_],None]"
__enter__,"Callable[[_],None]"
__exit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__aenter__,"Callable[[_],BaseTestServer]"
__aexit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__init__,"Callable[[_, Application],_]"
app,Application
host,str
kwargs,Any
_make_runner,"Callable[[_],BaseRunner]"
kwargs,Any
__init__,"Callable[[_, _RequestHandler],None]"
handler,_RequestHandler
host,str
kwargs,Any
_make_runner,"Callable[[_, bool],ServerRunner]"
debug,bool
kwargs,Any
__init__,"Callable[[_, BaseTestServer],None]"
server,BaseTestServer
loop,"Union[asyncio.AbstractEventLoop, None]"
kwargs,Any
start_server,"Callable[[_],None]"
host,"Callable[[_],str]"
server,"Callable[[_],BaseTestServer]"
app,"Callable[[_],Application]"
session,"Callable[[_],ClientSession]"
make_url,"Callable[[_, str],URL]"
path,str
request,"Callable[[_, str, str],ClientResponse]"
method,str
path,str
kwargs,Any
get,"Callable[[_, str],_RequestContextManager]"
path,str
kwargs,Any
post,"Callable[[_, str],_RequestContextManager]"
path,str
kwargs,Any
options,"Callable[[_, str],_RequestContextManager]"
path,str
kwargs,Any
head,"Callable[[_, str],_RequestContextManager]"
path,str
kwargs,Any
put,"Callable[[_, str],_RequestContextManager]"
path,str
kwargs,Any
patch,"Callable[[_, str],_RequestContextManager]"
path,str
kwargs,Any
delete,"Callable[[_, str],_RequestContextManager]"
path,str
kwargs,Any
ws_connect,"Callable[[_, str],_WSRequestContextManager]"
path,str
kwargs,Any
_ws_connect,"Callable[[_, str],ClientWebSocketResponse]"
path,str
kwargs,Any
close,"Callable[[_],None]"
__enter__,"Callable[[_],None]"
__exit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__aenter__,"Callable[[_],TestClient]"
__aexit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
get_application,"Callable[[_],Application]"
get_app,"Callable[[_],Application]"
setUp,"Callable[[_],None]"
setUpAsync,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
tearDownAsync,"Callable[[_],None]"
get_server,"Callable[[_, Application],TestServer]"
app,Application
get_client,"Callable[[_, TestServer],TestClient]"
server,TestServer
unittest_run_loop,"Callable[[Any],Any]"
func,Any
args,Any
kwargs,Any
new_func,"Callable[[Any],Any]"
self,Any
inner_args,Any
inner_kwargs,Any
loop_context,"Callable[[_LOOP_FACTORY, bool],Iterator[asyncio.AbstractEventLoop]]"
loop_factory,_LOOP_FACTORY
fast,bool
setup_test_loop,"Callable[[_LOOP_FACTORY],asyncio.AbstractEventLoop]"
loop_factory,_LOOP_FACTORY
teardown_test_loop,"Callable[[asyncio.AbstractEventLoop, bool],None]"
fast,bool
get_dict,"Callable[[Any, str],Any]"
app,Any
key,str
set_dict,"Callable[[Any, str, Any],None]"
app,Any
key,str
value,Any
get_extra_info,"Callable[[str],Union[SSLContext, None]]"
key,str
make_mocked_request,"Callable[[str, str, Any],Any]"
method,str
path,str
headers,Any
match_info,Any
version,HttpVersion
closing,bool
app,Any
writer,Any
protocol,Any
transport,Any
payload,Any
client_max_size,int
loop,Any
make_mocked_coro,"Callable[[Any, Any],Any]"
return_value,Any
raise_exception,Any
mock_coro,"Callable[[],Any]"
args,Any
kwargs,Any
__init__,"Callable[[_],None]"
args,Any
kw,Any
self._runner,"Union[web.AppRunner, None]"
self._task,"Union[asyncio.Task[None], None]"
self._notify_waiter,"Union[asyncio.Future[bool], None]"
init_process,"Callable[[_],None]"
run,"Callable[[_],None]"
_run,"Callable[[_],None]"
_wait_next_notify,"Callable[[_],asyncio.Future[bool]]"
_notify_waiter_done,"Callable[[_, asyncio.Future[bool]],None]"
waiter,asyncio.Future[bool]
init_signals,"Callable[[_],None]"
handle_quit,"Callable[[_, int, FrameType],None]"
sig,int
frame,FrameType
handle_abort,"Callable[[_, int, FrameType],None]"
sig,int
frame,FrameType
_create_ssl_context,"Callable[[Any],SSLContext]"
cfg,Any
_get_valid_log_format,"Callable[[_, str],str]"
source_format,str
init_process,"Callable[[_],None]"
init_process,"Callable[[_],None]"
real_url_default,"Callable[[_],URL]"
__init__,"Callable[[_, bytes],None]"
fingerprint,bytes
fingerprint,"Callable[[_],bytes]"
check,"Callable[[_, asyncio.Transport],None]"
_is_expected_content_type,"Callable[[str, str],bool]"
response_content_type,str
expected_content_type,str
__init__,"Callable[[_, str, URL],_]"
method,str
url,URL
params,"Union[Mapping[str, str], None]"
data,Any
expect100,bool
loop,"Union[asyncio.AbstractEventLoop, None]"
response_class,"Union[Type[ClientResponse], None]"
traces,"Union[List[Trace], None]"
is_ssl,"Callable[[_],bool]"
connection_key,"Callable[[_],ConnectionKey]"
host,"Callable[[_],str]"
request_info,"Callable[[_],RequestInfo]"
update_host,"Callable[[_, URL],None]"
url,URL
update_version,"Callable[[_, Union[http.HttpVersion, str]],None]"
version,"Union[http.HttpVersion, str]"
update_headers,"Callable[[_, Union[LooseHeaders, None]],None]"
update_auto_headers,"Callable[[_, Iterable[str]],None]"
update_cookies,"Callable[[_, Union[LooseCookies, None]],None]"
update_content_encoding,"Callable[[_, Any],None]"
data,Any
update_transfer_encoding,"Callable[[_],None]"
update_auth,"Callable[[_, Union[BasicAuth, None]],None]"
update_body_from_data,"Callable[[_, Any],None]"
body,Any
update_expect_continue,"Callable[[_, bool],None]"
expect,bool
update_proxy,"Callable[[_, Union[URL, None], Union[BasicAuth, None], Union[LooseHeaders, None]],None]"
keep_alive,"Callable[[_],bool]"
write_bytes,"Callable[[_, AbstractStreamWriter, Connection],None]"
writer,AbstractStreamWriter
conn,Connection
send,"Callable[[_, Connection],ClientResponse]"
conn,Connection
close,"Callable[[_],None]"
terminate,"Callable[[_],None]"
_on_chunk_request_sent,"Callable[[_, bytes],None]"
chunk,bytes
status,int
content,StreamReader
_raw_headers,RawHeaders
__init__,"Callable[[_, str, URL],None]"
method,str
url,URL
writer,asyncio.Task[None]
continue100,"Union[asyncio.Future[bool], None]"
timer,BaseTimerContext
request_info,RequestInfo
session,ClientSession
self._body,Any
self._writer,"Union[asyncio.Task[None], None]"
url,"Callable[[_],URL]"
url_obj,"Callable[[_],URL]"
real_url,"Callable[[_],URL]"
host,"Callable[[_],str]"
raw_headers,"Callable[[_],RawHeaders]"
request_info,"Callable[[_],RequestInfo]"
__del__,"Callable[[_, Any],None]"
_warnings,Any
__repr__,"Callable[[_],str]"
links,"Callable[[_],MultiDictProxy[MultiDictProxy[Union[str, URL]]]]"
links,"MultiDict[MultiDictProxy[Union[str, URL]]]"
link,"MultiDict[Union[str, URL]]"
start,"Callable[[_, Connection],ClientResponse]"
connection,Connection
_response_eof,"Callable[[_],None]"
closed,"Callable[[_],bool]"
close,"Callable[[_],None]"
release,"Callable[[_],Any]"
raise_for_status,"Callable[[_],None]"
_cleanup_writer,"Callable[[_],None]"
_notify_content,"Callable[[_],None]"
wait_for_close,"Callable[[_],None]"
read,"Callable[[_],bytes]"
get_encoding,"Callable[[_],str]"
text,"Callable[[_, Union[str, None], str],str]"
errors,str
json,"Callable[[_],Any]"
encoding,str
loads,JSONDecoder
__aenter__,"Callable[[_],ClientResponse]"
__aexit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__init__,"Callable[[_, RawRequestMessage, StreamReader, RequestHandler, AbstractStreamWriter, asyncio.Task[None], asyncio.AbstractEventLoop],None]"
message,RawRequestMessage
payload,StreamReader
protocol,RequestHandler
payload_writer,AbstractStreamWriter
task,asyncio.Task[None]
client_max_size,int
state,"Union[Dict[str, Any], None]"
self._post,"Union[MultiDictProxy[Union[str, bytes, FileField]], None]"
clone,"Callable[[_],BaseRequest]"
method,str
rel_url,StrOrURL
headers,LooseHeaders
scheme,str
host,str
remote,str
task,"Callable[[_],asyncio.Task[None]]"
protocol,"Callable[[_],RequestHandler]"
transport,"Callable[[_],Union[asyncio.Transport, None]]"
writer,"Callable[[_],AbstractStreamWriter]"
message,"Callable[[_],RawRequestMessage]"
rel_url,"Callable[[_],URL]"
__getitem__,"Callable[[_, str],Any]"
key,str
__setitem__,"Callable[[_, str, Any],None]"
key,str
value,Any
__delitem__,"Callable[[_, str],None]"
key,str
__len__,"Callable[[_],int]"
secure,"Callable[[_],bool]"
scheme,"Callable[[_],str]"
method,"Callable[[_],str]"
host,"Callable[[_],str]"
url,"Callable[[_],URL]"
path,"Callable[[_],str]"
path_qs,"Callable[[_],str]"
raw_path,"Callable[[_],str]"
query_string,"Callable[[_],str]"
raw_headers,"Callable[[_],RawHeaders]"
_http_date,"Callable[[str],Union[datetime.datetime, None]]"
_date_str,str
if_modified_since,"Callable[[_],Union[datetime.datetime, None]]"
if_unmodified_since,"Callable[[_],Union[datetime.datetime, None]]"
if_range,"Callable[[_],Union[datetime.datetime, None]]"
keep_alive,"Callable[[_],bool]"
http_range,"Callable[[_],slice]"
content,"Callable[[_],StreamReader]"
has_body,"Callable[[_],bool]"
can_read_body,"Callable[[_],bool]"
body_exists,"Callable[[_],bool]"
release,"Callable[[_],None]"
read,"Callable[[_],bytes]"
text,"Callable[[_],str]"
json,"Callable[[_],Any]"
loads,JSONDecoder
multipart,"Callable[[_],MultipartReader]"
post,"Callable[[_],MultiDictProxy[Union[str, bytes, FileField]]]"
out,"MultiDict[Union[str, bytes, FileField]]"
__repr__,"Callable[[_],str]"
__eq__,"Callable[[_, object],bool]"
other,object
_prepare_hook,"Callable[[_, StreamResponse],None]"
response,StreamResponse
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
__setattr__,"Callable[[_, str, Any],None]"
name,str
val,Any
clone,"Callable[[_],Request]"
method,str
rel_url,StrOrURL
headers,LooseHeaders
scheme,str
host,str
remote,str
match_info,"Callable[[_],UrlMappingMatchInfo]"
app,"Callable[[_],Application]"
config_dict,"Callable[[_],ChainMapProxy]"
_prepare_hook,"Callable[[_, StreamResponse],None]"
response,StreamResponse
__init__,"Callable[[_, BaseConnector, ConnectionKey, ResponseHandler, asyncio.AbstractEventLoop],None]"
connector,BaseConnector
key,ConnectionKey
protocol,ResponseHandler
self._callbacks,"List[Callable[[],None]]"
__repr__,"Callable[[_],str]"
__del__,"Callable[[_, Any],None]"
_warnings,Any
transport,"Callable[[_],Union[asyncio.Transport, None]]"
add_callback,"Callable[[_, Callable[[],None]],None]"
callback,"Callable[[],None]"
_notify_release,"Callable[[_],None]"
close,"Callable[[_],None]"
release,"Callable[[_],None]"
closed,"Callable[[_],bool]"
close,"Callable[[_],None]"
__init__,"Callable[[_],None]"
force_close,bool
limit,int
limit_per_host,int
enable_cleanup_closed,bool
loop,"Union[asyncio.AbstractEventLoop, None]"
self._conns,"Dict[ConnectionKey, List[Tuple[ResponseHandler, float]]]"
self._acquired_per_host,"DefaultDict[ConnectionKey, Set[ResponseHandler]]"
self._cleanup_closed_transports,"List[Union[asyncio.Transport, None]]"
__del__,"Callable[[_, Any],None]"
_warnings,Any
__enter__,"Callable[[_],BaseConnector]"
__exit__,"Callable[[_],None]"
exc,Any
force_close,"Callable[[_],bool]"
limit,"Callable[[_],int]"
limit_per_host,"Callable[[_],int]"
_cleanup,"Callable[[_],None]"
_drop_acquired_per_host,"Callable[[_, ConnectionKey, ResponseHandler],None]"
key,ConnectionKey
val,ResponseHandler
_cleanup_closed,"Callable[[_],None]"
closed,"Callable[[_],bool]"
_available_connections,"Callable[[_, ConnectionKey],int]"
key,ConnectionKey
connect,"Callable[[_, ClientRequest, List[Trace], ClientTimeout],Connection]"
req,ClientRequest
timeout,ClientTimeout
_get,"Callable[[_, ConnectionKey],Union[ResponseHandler, None]]"
key,ConnectionKey
_release_waiter,"Callable[[_],None]"
_release_acquired,"Callable[[_, ConnectionKey, ResponseHandler],None]"
key,ConnectionKey
proto,ResponseHandler
_release,"Callable[[_, ConnectionKey, ResponseHandler],None]"
key,ConnectionKey
protocol,ResponseHandler
should_close,bool
_create_connection,"Callable[[_, ClientRequest, List[Trace], ClientTimeout],ResponseHandler]"
req,ClientRequest
timeout,ClientTimeout
__init__,"Callable[[_, Union[float, None]],None]"
self._addrs_rr,"Dict[Tuple[str, int], Tuple[Iterator[Dict[str, Any]], int]]"
self._timestamps,"Dict[Tuple[str, int], float]"
__contains__,"Callable[[_, object],bool]"
host,object
add,"Callable[[_, Tuple[str, int], List[Dict[str, Any]]],None]"
addrs,"List[Dict[str, Any]]"
remove,"Callable[[_, Tuple[str, int]],None]"
clear,"Callable[[_],None]"
next_addrs,"Callable[[_, Tuple[str, int]],List[Dict[str, Any]]]"
expired,"Callable[[_, Tuple[str, int]],bool]"
verify_ssl,bool
use_dns_cache,bool
ttl_dns_cache,int
family,int
force_close,bool
limit,int
limit_per_host,int
enable_cleanup_closed,bool
loop,"Union[asyncio.AbstractEventLoop, None]"
self._throttle_dns_events,"Dict[Tuple[str, int], EventResultOrError]"
family,"Callable[[_],int]"
use_dns_cache,"Callable[[_],bool]"
clear_dns_cache,"Callable[[_, Union[str, None], Union[int, None]],None]"
_resolve_host,"Callable[[_, str, int, Union[List[Trace], None]],List[Dict[str, Any]]]"
host,str
port,int
traces,"Union[List[Trace], None]"
_create_connection,"Callable[[_, ClientRequest, List[Trace], ClientTimeout],ResponseHandler]"
req,ClientRequest
timeout,ClientTimeout
_make_ssl_context,"Callable[[bool],SSLContext]"
verified,bool
_get_ssl_context,"Callable[[_, ClientRequest],Union[SSLContext, None]]"
req,ClientRequest
_get_fingerprint,"Callable[[_, ClientRequest],Union[Fingerprint, None]]"
req,ClientRequest
_wrap_create_connection,"Callable[[_],Tuple[asyncio.Transport, ResponseHandler]]"
args,Any
req,ClientRequest
timeout,ClientTimeout
kwargs,Any
_create_direct_connection,"Callable[[_, ClientRequest, List[Trace], ClientTimeout],Tuple[asyncio.Transport, ResponseHandler]]"
req,ClientRequest
timeout,ClientTimeout
_create_proxy_connection,"Callable[[_, ClientRequest, List[Trace], ClientTimeout],Tuple[asyncio.Transport, ResponseHandler]]"
req,ClientRequest
timeout,ClientTimeout
__init__,"Callable[[_, str, bool, Union[object, float, None], int, int, Union[asyncio.AbstractEventLoop, None]],None]"
path,str
force_close,bool
limit,int
limit_per_host,int
loop,"Union[asyncio.AbstractEventLoop, None]"
path,"Callable[[_],str]"
_create_connection,"Callable[[_, ClientRequest, List[Trace], ClientTimeout],ResponseHandler]"
req,ClientRequest
timeout,ClientTimeout
__init__,"Callable[[_, asyncio.AbstractEventLoop],None]"
self._drain_waiter,"Union[asyncio.Future[None], None]"
self.transport,"Union[asyncio.Transport, None]"
pause_writing,"Callable[[_],None]"
resume_writing,"Callable[[_],None]"
pause_reading,"Callable[[_],None]"
resume_reading,"Callable[[_],None]"
connection_made,"Callable[[_, asyncio.BaseTransport],None]"
connection_lost,"Callable[[_, Union[BaseException, None]],None]"
_drain_helper,"Callable[[_],None]"
_raise_graceful_exit,"Callable[[],None]"
__init__,"Callable[[_, BaseRunner],None]"
runner,BaseRunner
shutdown_timeout,float
backlog,int
self._server,"Union[asyncio.AbstractServer, None]"
name,"Callable[[_],str]"
start,"Callable[[_],None]"
stop,"Callable[[_],None]"
__init__,"Callable[[_, BaseRunner, str, int],None]"
runner,BaseRunner
host,str
port,int
shutdown_timeout,float
backlog,int
name,"Callable[[_],str]"
start,"Callable[[_],None]"
__init__,"Callable[[_, BaseRunner, str],None]"
runner,BaseRunner
path,str
shutdown_timeout,float
backlog,int
name,"Callable[[_],str]"
start,"Callable[[_],None]"
__init__,"Callable[[_, BaseRunner, socket.socket],None]"
runner,BaseRunner
shutdown_timeout,float
backlog,int
name,"Callable[[_],str]"
start,"Callable[[_],None]"
__init__,"Callable[[_],None]"
handle_signals,bool
kwargs,Any
setup,"Callable[[_],None]"
shutdown,"Callable[[_],None]"
cleanup,"Callable[[_],None]"
_make_server,"Callable[[_],Server]"
_cleanup_server,"Callable[[_],None]"
_reg_site,"Callable[[_, BaseSite],None]"
site,BaseSite
_check_site,"Callable[[_, BaseSite],None]"
site,BaseSite
_unreg_site,"Callable[[_, BaseSite],None]"
site,BaseSite
__init__,"Callable[[_, Server],None]"
web_server,Server
handle_signals,bool
kwargs,Any
shutdown,"Callable[[_],None]"
_make_server,"Callable[[_],Server]"
_cleanup_server,"Callable[[_],None]"
__init__,"Callable[[_, Application],None]"
app,Application
handle_signals,bool
kwargs,Any
app,"Callable[[_],Application]"
shutdown,"Callable[[_],None]"
_make_server,"Callable[[_],Server]"
_cleanup_server,"Callable[[_],None]"
__init__,"Callable[[_, Server],_]"
manager,Server
keepalive_timeout,float
tcp_keepalive,bool
logger,Logger
access_log,Logger
access_log_format,str
debug,bool
max_line_size,int
max_headers,int
max_field_size,int
lingering_time,float
self._keepalive_handle,"Union[asyncio.Handle, None]"
self._messages,Any
self._waiter,"Union[asyncio.Future[None], None]"
self._error_handler,"Union[asyncio.Task[None], None]"
self._task_handler,"Union[asyncio.Task[None], None]"
self._payload_parser,Any
__repr__,"Callable[[_],str]"
keepalive_timeout,"Callable[[_],float]"
shutdown,"Callable[[_, Union[float, None]],None]"
connection_made,"Callable[[_, asyncio.BaseTransport],None]"
connection_lost,"Callable[[_, Union[BaseException, None]],None]"
set_parser,"Callable[[_, Any],None]"
parser,Any
eof_received,"Callable[[_],None]"
data_received,"Callable[[_, bytes],None]"
data,bytes
keep_alive,"Callable[[_, bool],None]"
val,bool
close,"Callable[[_],None]"
force_close,"Callable[[_],None]"
log_access,"Callable[[_, BaseRequest, StreamResponse, float],None]"
request,BaseRequest
response,StreamResponse
time,float
log_debug,"Callable[[_],None]"
args,Any
kw,Any
log_exception,"Callable[[_],None]"
args,Any
kw,Any
_process_keepalive,"Callable[[_],None]"
start,"Callable[[_],None]"
handle_error,"Callable[[_, BaseRequest, int, Union[BaseException, None], Union[str, None]],StreamResponse]"
request,BaseRequest
status,int
handle_parse_error,"Callable[[_, AbstractStreamWriter, int, Union[BaseException, None], Union[str, None]],None]"
writer,AbstractStreamWriter
status,int
__init__,"Callable[[_],None]"
unsafe,bool
loop,"Union[asyncio.AbstractEventLoop, None]"
self._host_only_cookies,"Set[Tuple[str, str]]"
self._expirations,"Dict[Tuple[str, str], int]"
save,"Callable[[_, PathLike],None]"
file_path,PathLike
load,"Callable[[_, PathLike],None]"
file_path,PathLike
clear,"Callable[[_],None]"
__iter__,"Callable[[_],Iterator[Morsel[str]]]"
__len__,"Callable[[_],int]"
_do_expiration,"Callable[[_],None]"
_expire_cookie,"Callable[[_, float, str, str],None]"
when,float
domain,str
name,str
update_cookies,"Callable[[_, LooseCookies, URL],None]"
cookies,LooseCookies
response_url,URL
filter_cookies,"Callable[[_, URL],BaseCookie[str]]"
request_url,URL
_is_domain_match,"Callable[[str, str],bool]"
domain,str
hostname,str
_is_path_match,"Callable[[str, str],bool]"
req_path,str
cookie_path,str
_parse_date,"Callable[[_, str],Union[datetime.datetime, None]]"
date_str,str
__init__,"Callable[[_],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
__iter__,"Callable[[_],Iterator[Morsel[str]]]"
__len__,"Callable[[_],int]"
clear,"Callable[[_],None]"
update_cookies,"Callable[[_, LooseCookies, URL],None]"
cookies,LooseCookies
response_url,URL
filter_cookies,"Callable[[_, URL],BaseCookie[str]]"
request_url,URL
__init__,"Callable[[_, _RequestHandler],None]"
handler,_RequestHandler
loop,"Union[asyncio.AbstractEventLoop, None]"
kwargs,Any
self._connections,"Dict[RequestHandler, asyncio.Transport]"
connection_made,"Callable[[_, RequestHandler, asyncio.Transport],None]"
handler,RequestHandler
connection_lost,"Callable[[_, RequestHandler, Union[BaseException, None]],None]"
handler,RequestHandler
_make_request,"Callable[[_, RawRequestMessage, StreamReader, RequestHandler, AbstractStreamWriter, asyncio.Task[None]],BaseRequest]"
message,RawRequestMessage
payload,StreamReader
protocol,RequestHandler
writer,AbstractStreamWriter
task,asyncio.Task[None]
shutdown,"Callable[[_, Union[float, None]],None]"
__call__,"Callable[[_],RequestHandler]"
__init__,"Callable[[_],None]"
body,Any
__bool__,"Callable[[_],bool]"
__init__,"Callable[[_, StrOrURL],None]"
location,StrOrURL
body,Any
__init__,"Callable[[_, str, Iterable[str]],None]"
method,str
body,Any
__init__,"Callable[[_, float, float],None]"
max_size,float
actual_size,float
kwargs,Any
__init__,"Callable[[_, str],None]"
link,str
body,Any
__init__,"Callable[[_],None]"
post_init,"Callable[[_, Application],None]"
app,Application
frozen,"Callable[[_],bool]"
freeze,"Callable[[_],None]"
resolve,"Callable[[_, Request],AbstractMatchInfo]"
request,Request
handler,"Callable[[_],Callable[[Request],Awaitable[StreamResponse]]]"
expect_handler,"Callable[[_],Callable[[Request],Awaitable[None]]]"
add_app,"Callable[[_, Application],None]"
app,Application
freeze,"Callable[[_],None]"
__init__,"Callable[[_, Request],None]"
request,Request
request,"Callable[[_],Request]"
resolve,"Callable[[_, str, int, int],List[Dict[str, Any]]]"
host,str
port,int
family,int
close,"Callable[[_],None]"
__init__,"Callable[[_],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
clear,"Callable[[_],None]"
update_cookies,"Callable[[_, LooseCookies, URL],None]"
cookies,LooseCookies
response_url,URL
filter_cookies,"Callable[[_, URL],BaseCookie[str]]"
request_url,URL
write,"Callable[[_, bytes],None]"
chunk,bytes
write_eof,"Callable[[_, bytes],None]"
chunk,bytes
drain,"Callable[[_],None]"
enable_compression,"Callable[[_, str],None]"
encoding,str
enable_chunking,"Callable[[_],None]"
write_headers,"Callable[[_, str, CIMultiDict[str]],None]"
status_line,str
__init__,"Callable[[_, logging.Logger, str],None]"
log_format,str
log,"Callable[[_, BaseRequest, StreamResponse, float],None]"
request,BaseRequest
response,StreamResponse
time,float
__init__,"Callable[[_, asyncio.AbstractEventLoop],None]"
self._waiters,Deque[asyncio.Future[Any]]
set,"Callable[[_, Union[BaseException, None]],None]"
wait,"Callable[[_],Any]"
cancel,"Callable[[_],None]"
_FORMAT_CACHE,"Dict[str, Tuple[str, List[KeyMethod]]]"
__init__,"Callable[[_, logging.Logger, str],None]"
log_format,str
compile_format,"Callable[[_, str],Tuple[str, List[KeyMethod]]]"
log_format,str
_format_i,"Callable[[str, BaseRequest, StreamResponse, float],str]"
key,str
request,BaseRequest
response,StreamResponse
time,float
_format_o,"Callable[[str, BaseRequest, StreamResponse, float],str]"
key,str
request,BaseRequest
response,StreamResponse
time,float
_format_a,"Callable[[BaseRequest, StreamResponse, float],str]"
request,BaseRequest
response,StreamResponse
time,float
_format_t,"Callable[[BaseRequest, StreamResponse, float],str]"
request,BaseRequest
response,StreamResponse
time,float
_format_P,"Callable[[BaseRequest, StreamResponse, float],str]"
request,BaseRequest
response,StreamResponse
time,float
_format_r,"Callable[[BaseRequest, StreamResponse, float],str]"
request,BaseRequest
response,StreamResponse
time,float
_format_s,"Callable[[BaseRequest, StreamResponse, float],int]"
request,BaseRequest
response,StreamResponse
time,float
_format_b,"Callable[[BaseRequest, StreamResponse, float],int]"
request,BaseRequest
response,StreamResponse
time,float
_format_T,"Callable[[BaseRequest, StreamResponse, float],str]"
request,BaseRequest
response,StreamResponse
time,float
_format_Tf,"Callable[[BaseRequest, StreamResponse, float],str]"
request,BaseRequest
response,StreamResponse
time,float
_format_D,"Callable[[BaseRequest, StreamResponse, float],str]"
request,BaseRequest
response,StreamResponse
time,float
_format_line,"Callable[[_, BaseRequest, StreamResponse, float],Iterable[Tuple[str, Callable[[BaseRequest, StreamResponse, float],str]]]]"
request,BaseRequest
response,StreamResponse
time,float
log,"Callable[[_, BaseRequest, StreamResponse, float],None]"
request,BaseRequest
response,StreamResponse
time,float
_check_request_resolves,"Callable[[Request, str],Tuple[bool, Request]]"
request,Request
path,str
middleware,"Callable[[_Func],_Func]"
f,_Func
normalize_path_middleware,"Callable[[],_Middleware]"
append_slash,bool
remove_slash,bool
merge_slashes,bool
impl,"Callable[[Request, _Handler],StreamResponse]"
request,Request
handler,_Handler
_fix_request_current_app,"Callable[[Application],_Middleware]"
app,Application
impl,"Callable[[Request, _Handler],StreamResponse]"
request,Request
handler,_Handler
__init__,"Callable[[_, _, _, Dict[str, Any]],None]"
__call__,"Callable[[_, AbstractStreamWriter],None]"
writer,AbstractStreamWriter
__init__,"Callable[[_, _],None]"
__call__,"Callable[[_],_stream_wrapper]"
args,Any
kwargs,Any
write,"Callable[[_, AbstractStreamWriter],None]"
writer,AbstractStreamWriter
__init__,"Callable[[_, Any],None]"
value,Any
args,Any
kwargs,Any
write,"Callable[[_, AbstractStreamWriter],None]"
writer,AbstractStreamWriter
__init__,"Callable[[_, Union[asyncio.AbstractEventLoop, None]],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
resolve,"Callable[[_, str, int, int],List[Dict[str, Any]]]"
host,str
port,int
family,int
close,"Callable[[_],None]"
__init__,"Callable[[_, Union[asyncio.AbstractEventLoop, None]],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
args,Any
kwargs,Any
resolve,"Callable[[_, str, int, int],List[Dict[str, Any]]]"
host,str
port,int
family,int
_resolve_with_query,"Callable[[_, str, int, int],List[Dict[str, Any]]]"
host,str
port,int
family,int
close,"Callable[[_],None]"
parse_content_disposition,"Callable[[Union[str, None]],Tuple[Union[str, None], Dict[str, str]]]"
is_token,"Callable[[str],bool]"
string,str
is_quoted,"Callable[[str],bool]"
string,str
is_rfc5987,"Callable[[str],bool]"
string,str
is_extended_param,"Callable[[str],bool]"
string,str
is_continuous_param,"Callable[[str],bool]"
string,str
unescape,"Callable[[str],str]"
text,str
chars,str
content_disposition_filename,"Callable[[Mapping[str, str], str],Union[str, None]]"
name,str
__init__,"Callable[[_, ClientResponse, Any],None]"
resp,ClientResponse
stream,Any
__aiter__,"Callable[[_],MultipartResponseWrapper]"
__anext__,"Callable[[_],Any]"
at_eof,"Callable[[_],bool]"
next,"Callable[[_],Any]"
release,"Callable[[_],None]"
__init__,"Callable[[_, bytes, Mapping[str, Union[str, None]], StreamReader],None]"
boundary,bytes
headers,"Mapping[str, Union[str, None]]"
content,StreamReader
self._unread,Any
__aiter__,"Callable[[_],BodyPartReader]"
__anext__,"Callable[[_],Any]"
next,"Callable[[_],Any]"
read,"Callable[[_],Any]"
decode,bool
read_chunk,"Callable[[_, int],bytes]"
size,int
_read_chunk_from_length,"Callable[[_, int],bytes]"
size,int
_read_chunk_from_stream,"Callable[[_, int],bytes]"
size,int
readline,"Callable[[_],bytes]"
release,"Callable[[_],None]"
text,"Callable[[_],str]"
json,"Callable[[_],Any]"
form,"Callable[[_],List[Tuple[str, str]]]"
at_eof,"Callable[[_],bool]"
decode,"Callable[[_, bytes],bytes]"
data,bytes
_decode_content,"Callable[[_, bytes],bytes]"
data,bytes
_decode_content_transfer,"Callable[[_, bytes],bytes]"
data,bytes
get_charset,"Callable[[_, str],str]"
default,str
__init__,"Callable[[_, BodyPartReader],None]"
value,BodyPartReader
args,Any
kwargs,Any
write,"Callable[[_, Any],None]"
writer,Any
__init__,"Callable[[_, Mapping[str, str], StreamReader],None]"
content,StreamReader
__aiter__,"Callable[[_],MultipartReader]"
__anext__,"Callable[[_],Any]"
from_response,"Callable[[_, ClientResponse],Any]"
response,ClientResponse
at_eof,"Callable[[_],bool]"
next,"Callable[[_],Any]"
release,"Callable[[_],None]"
fetch_next_part,"Callable[[_],Any]"
_get_part_reader,"Callable[[_, CIMultiDictProxy[str]],Any]"
_get_boundary,"Callable[[_],str]"
_readline,"Callable[[_],bytes]"
_read_until_first_boundary,"Callable[[_],None]"
_read_boundary,"Callable[[_],None]"
_maybe_release_last_part,"Callable[[_],None]"
__init__,"Callable[[_, str, Union[str, None]],None]"
subtype,str
__enter__,"Callable[[_],MultipartWriter]"
__exit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],None]"
exc_type,"Union[Type[BaseException], None]"
__len__,"Callable[[_],int]"
_boundary_value,"Callable[[_],str]"
boundary,"Callable[[_],str]"
append,"Callable[[_, Any, Union[MultiMapping[str], None]],Payload]"
obj,Any
headers,"Union[MultiMapping[str], None]"
append_payload,"Callable[[_, Payload],Payload]"
payload,Payload
append_json,"Callable[[_, Any, Union[MultiMapping[str], None]],Payload]"
obj,Any
headers,"Union[MultiMapping[str], None]"
append_form,"Callable[[_, Union[Sequence[Tuple[str, str]], Mapping[str, str]], Union[MultiMapping[str], None]],Payload]"
obj,"Union[Sequence[Tuple[str, str]], Mapping[str, str]]"
headers,"Union[MultiMapping[str], None]"
write,"Callable[[_, Any, bool],None]"
writer,Any
close_boundary,bool
__init__,"Callable[[_, Any],None]"
writer,Any
self._compress,Any
enable_encoding,"Callable[[_, str],None]"
encoding,str
enable_compression,"Callable[[_, str],None]"
encoding,str
write_eof,"Callable[[_],None]"
write,"Callable[[_, bytes],None]"
chunk,bytes
__init__,"Callable[[_, asyncio.AbstractEventLoop],None]"
self._read_timeout_handle,"Union[asyncio.TimerHandle, None]"
upgraded,"Callable[[_],bool]"
should_close,"Callable[[_],bool]"
force_close,"Callable[[_],None]"
close,"Callable[[_],None]"
is_connected,"Callable[[_],bool]"
connection_lost,"Callable[[_, Union[BaseException, None]],None]"
eof_received,"Callable[[_],None]"
pause_reading,"Callable[[_],None]"
resume_reading,"Callable[[_],None]"
set_exception,"Callable[[_, BaseException],None]"
exc,BaseException
set_parser,"Callable[[_, Any, Any],None]"
parser,Any
payload,Any
set_response_params,"Callable[[_],None]"
timer,BaseTimerContext
skip_payload,bool
read_until_eof,bool
auto_decompress,bool
_drop_timeout,"Callable[[_],None]"
_reschedule_timeout,"Callable[[_],None]"
_on_read_timeout,"Callable[[_],None]"
data_received,"Callable[[_, bytes],None]"
data,bytes
__init__,"Callable[[_, Iterable[Any], bool, Union[str, None]],None]"
quote_fields,bool
is_multipart,"Callable[[_],bool]"
add_field,"Callable[[_, str, Any],None]"
name,str
value,Any
add_fields,"Callable[[_],None]"
fields,Any
__call__,"Callable[[_],Payload]"
__init__,"Callable[[_],None]"
canonical,"Callable[[_],str]"
url_for,"Callable[[_],URL]"
kwargs,str
resolve,"Callable[[_, Request],_Resolve]"
request,Request
add_prefix,"Callable[[_, str],None]"
prefix,str
freeze,"Callable[[_],None]"
raw_match,"Callable[[_, str],bool]"
path,str
__init__,"Callable[[_, str, Union[_WebHandler, AbstractView]],None]"
method,str
expect_handler,_ExpectHandler
resource,AbstractResource
handler_wrapper,"Callable[[Request],StreamResponse]"
request,Request
method,"Callable[[_],str]"
handler,"Callable[[_],_WebHandler]"
url_for,"Callable[[_],URL]"
args,str
kwargs,str
handle_expect_header,"Callable[[_, Request],None]"
request,Request
__init__,"Callable[[_, Dict[str, str], AbstractRoute],_]"
route,AbstractRoute
handler,"Callable[[_],_WebHandler]"
route,"Callable[[_],AbstractRoute]"
expect_handler,"Callable[[_],_ExpectHandler]"
add_app,"Callable[[_, Application],None]"
app,Application
current_app,"Callable[[_],Application]"
set_current_app,"Callable[[_, Application],Generator[None, None, None]]"
app,Application
freeze,"Callable[[_],None]"
__repr__,"Callable[[_],str]"
__init__,"Callable[[_, HTTPException],None]"
http_exception,HTTPException
http_exception,"Callable[[_],HTTPException]"
__repr__,"Callable[[_],str]"
_default_expect_handler,"Callable[[Request],None]"
request,Request
__init__,"Callable[[_],None]"
add_route,"Callable[[_, str, Union[AbstractView, _WebHandler]],ResourceRoute]"
method,str
register_route,"Callable[[_, ResourceRoute],None]"
route,ResourceRoute
resolve,"Callable[[_, Request],_Resolve]"
request,Request
_match,"Callable[[_, str],Union[Dict[str, str], None]]"
path,str
__len__,"Callable[[_],int]"
__init__,"Callable[[_, str],None]"
path,str
canonical,"Callable[[_],str]"
freeze,"Callable[[_],None]"
add_prefix,"Callable[[_, str],None]"
prefix,str
_match,"Callable[[_, str],Union[Dict[str, str], None]]"
path,str
raw_match,"Callable[[_, str],bool]"
path,str
url_for,"Callable[[_],URL]"
__repr__,"Callable[[_],str]"
__init__,"Callable[[_, str],None]"
path,str
canonical,"Callable[[_],str]"
add_prefix,"Callable[[_, str],None]"
prefix,str
_match,"Callable[[_, str],Union[Dict[str, str], None]]"
path,str
raw_match,"Callable[[_, str],bool]"
path,str
url_for,"Callable[[_],URL]"
parts,str
__repr__,"Callable[[_],str]"
__init__,"Callable[[_, str],None]"
prefix,str
canonical,"Callable[[_],str]"
add_prefix,"Callable[[_, str],None]"
prefix,str
raw_match,"Callable[[_, str],bool]"
prefix,str
__init__,"Callable[[_, str, PathLike],None]"
prefix,str
directory,PathLike
chunk_size,int
show_index,bool
follow_symlinks,bool
append_version,bool
url_for,"Callable[[_],URL]"
_get_file_hash,"Callable[[bytes],str]"
byte_array,bytes
set_options_route,"Callable[[_, _WebHandler],None]"
handler,_WebHandler
resolve,"Callable[[_, Request],_Resolve]"
request,Request
__len__,"Callable[[_],int]"
_handle,"Callable[[_, Request],StreamResponse]"
request,Request
_directory_as_html,"Callable[[_, Path],str]"
filepath,Path
__repr__,"Callable[[_],str]"
__init__,"Callable[[_, str, Application],None]"
prefix,str
app,Application
add_prefix,"Callable[[_, str],None]"
prefix,str
url_for,"Callable[[_],URL]"
args,str
kwargs,str
resolve,"Callable[[_, Request],_Resolve]"
request,Request
__len__,"Callable[[_],int]"
__repr__,"Callable[[_],str]"
match,"Callable[[_, Request],bool]"
request,Request
canonical,"Callable[[_],str]"
__init__,"Callable[[_, str],None]"
domain,str
canonical,"Callable[[_],str]"
validation,"Callable[[_, str],str]"
domain,str
match,"Callable[[_, Request],bool]"
request,Request
match_domain,"Callable[[_, str],bool]"
host,str
__init__,"Callable[[_, str],None]"
domain,str
canonical,"Callable[[_],str]"
match_domain,"Callable[[_, str],bool]"
host,str
__init__,"Callable[[_, AbstractRuleMatching, Application],None]"
rule,AbstractRuleMatching
app,Application
canonical,"Callable[[_],str]"
resolve,"Callable[[_, Request],_Resolve]"
request,Request
__repr__,"Callable[[_],str]"
__init__,"Callable[[_, str, Union[_WebHandler, AbstractView], AbstractResource],None]"
method,str
resource,AbstractResource
__repr__,"Callable[[_],str]"
url_for,"Callable[[_],URL]"
args,str
kwargs,str
__init__,"Callable[[_, HTTPException],None]"
http_exception,HTTPException
url_for,"Callable[[_],URL]"
args,str
kwargs,str
_handle,"Callable[[_, Request],StreamResponse]"
request,Request
status,"Callable[[_],int]"
reason,"Callable[[_],str]"
__repr__,"Callable[[_],str]"
_iter,"Callable[[_],StreamResponse]"
_raise_allowed_methods,"Callable[[_],None]"
__init__,"Callable[[_, List[AbstractResource]],None]"
__len__,"Callable[[_],int]"
__contains__,"Callable[[_, object],bool]"
resource,object
__len__,"Callable[[_],int]"
__contains__,"Callable[[_, object],bool]"
route,object
__init__,"Callable[[_],None]"
resolve,"Callable[[_, Request],AbstractMatchInfo]"
request,Request
__len__,"Callable[[_],int]"
__contains__,"Callable[[_, object],bool]"
resource,object
__getitem__,"Callable[[_, str],AbstractResource]"
name,str
resources,"Callable[[_],ResourcesView]"
routes,"Callable[[_],RoutesView]"
register_resource,"Callable[[_, AbstractResource],None]"
resource,AbstractResource
add_resource,"Callable[[_, str],Resource]"
path,str
add_route,"Callable[[_, str, str, Union[_WebHandler, AbstractView]],AbstractRoute]"
method,str
path,str
add_static,"Callable[[_, str, PathLike],AbstractResource]"
prefix,str
path,PathLike
chunk_size,int
show_index,bool
follow_symlinks,bool
append_version,bool
add_head,"Callable[[_, str, _WebHandler],AbstractRoute]"
path,str
handler,_WebHandler
kwargs,Any
add_options,"Callable[[_, str, _WebHandler],AbstractRoute]"
path,str
handler,_WebHandler
kwargs,Any
add_get,"Callable[[_, str, _WebHandler],AbstractRoute]"
path,str
handler,_WebHandler
allow_head,bool
kwargs,Any
add_post,"Callable[[_, str, _WebHandler],AbstractRoute]"
path,str
handler,_WebHandler
kwargs,Any
add_put,"Callable[[_, str, _WebHandler],AbstractRoute]"
path,str
handler,_WebHandler
kwargs,Any
add_patch,"Callable[[_, str, _WebHandler],AbstractRoute]"
path,str
handler,_WebHandler
kwargs,Any
add_delete,"Callable[[_, str, _WebHandler],AbstractRoute]"
path,str
handler,_WebHandler
kwargs,Any
add_view,"Callable[[_, str, AbstractView],AbstractRoute]"
path,str
handler,AbstractView
kwargs,Any
freeze,"Callable[[_],None]"
add_routes,"Callable[[_, Iterable[AbstractRouteDef]],None]"
__bool__,"Callable[[_],bool]"
__init__,"Callable[[_],None]"
timeout,float
autoclose,bool
autoping,bool
compress,bool
max_msg_size,int
self._reader,"Union[FlowControlDataQueue[WSMessage], None]"
self._loop,"Union[asyncio.AbstractEventLoop, None]"
self._waiting,"Union[asyncio.Future[bool], None]"
_cancel_heartbeat,"Callable[[_],None]"
_reset_heartbeat,"Callable[[_],None]"
_send_heartbeat,"Callable[[_],None]"
_pong_not_received,"Callable[[_],None]"
prepare,"Callable[[_, BaseRequest],AbstractStreamWriter]"
request,BaseRequest
_handshake,"Callable[[_, BaseRequest],Tuple[CIMultiDict[str], str, bool, bool]]"
request,BaseRequest
_pre_start,"Callable[[_, BaseRequest],Tuple[str, WebSocketWriter]]"
request,BaseRequest
_post_start,"Callable[[_, BaseRequest, str, WebSocketWriter],None]"
request,BaseRequest
protocol,str
writer,WebSocketWriter
can_prepare,"Callable[[_, BaseRequest],WebSocketReady]"
request,BaseRequest
closed,"Callable[[_],bool]"
compress,"Callable[[_],bool]"
ping,"Callable[[_, bytes],None]"
message,bytes
pong,"Callable[[_, bytes],None]"
message,bytes
send_str,"Callable[[_, str, Union[bool, None]],None]"
data,str
send_bytes,"Callable[[_, bytes, Union[bool, None]],None]"
data,bytes
send_json,"Callable[[_, Any, Union[bool, None]],None]"
data,Any
dumps,JSONEncoder
write_eof,"Callable[[_],None]"
close,"Callable[[_],bool]"
code,int
message,bytes
receive,"Callable[[_, Union[float, None]],WSMessage]"
receive_str,"Callable[[_],str]"
receive_bytes,"Callable[[_],bytes]"
receive_json,"Callable[[_],Any]"
loads,JSONDecoder
write,"Callable[[_, bytes],None]"
data,bytes
__aiter__,"Callable[[_],WebSocketResponse]"
__anext__,"Callable[[_],WSMessage]"
__init__,"Callable[[_, BaseProtocol, asyncio.AbstractEventLoop, _T_OnChunkSent],None]"
protocol,BaseProtocol
on_chunk_sent,_T_OnChunkSent
self._compress,Any
self._on_chunk_sent,_T_OnChunkSent
transport,"Callable[[_],Union[asyncio.Transport, None]]"
protocol,"Callable[[_],BaseProtocol]"
enable_chunking,"Callable[[_],None]"
enable_compression,"Callable[[_, str],None]"
encoding,str
_write,"Callable[[_, bytes],None]"
chunk,bytes
write,"Callable[[_, bytes],None]"
chunk,bytes
drain,bool
LIMIT,int
write_headers,"Callable[[_, str, CIMultiDict[str]],None]"
status_line,str
write_eof,"Callable[[_, bytes],None]"
chunk,bytes
drain,"Callable[[_],None]"
_py_serialize_headers,"Callable[[str, CIMultiDict[str]],bytes]"
status_line,str
register,"Callable[[_, UrlDispatcher],None]"
router,UrlDispatcher
handler,_HandlerType
__repr__,"Callable[[_],str]"
register,"Callable[[_, UrlDispatcher],None]"
router,UrlDispatcher
path,PathLike
__repr__,"Callable[[_],str]"
register,"Callable[[_, UrlDispatcher],None]"
router,UrlDispatcher
route,"Callable[[str, str, _HandlerType],RouteDef]"
method,str
path,str
handler,_HandlerType
kwargs,Any
head,"Callable[[str, _HandlerType],RouteDef]"
path,str
handler,_HandlerType
kwargs,Any
options,"Callable[[str, _HandlerType],RouteDef]"
path,str
handler,_HandlerType
kwargs,Any
get,"Callable[[str, _HandlerType],RouteDef]"
path,str
handler,_HandlerType
allow_head,bool
kwargs,Any
post,"Callable[[str, _HandlerType],RouteDef]"
path,str
handler,_HandlerType
kwargs,Any
put,"Callable[[str, _HandlerType],RouteDef]"
path,str
handler,_HandlerType
kwargs,Any
patch,"Callable[[str, _HandlerType],RouteDef]"
path,str
handler,_HandlerType
kwargs,Any
delete,"Callable[[str, _HandlerType],RouteDef]"
path,str
handler,_HandlerType
kwargs,Any
view,"Callable[[str, AbstractView],RouteDef]"
path,str
handler,AbstractView
kwargs,Any
static,"Callable[[str, PathLike],StaticDef]"
prefix,str
path,PathLike
kwargs,Any
__init__,"Callable[[_],None]"
__repr__,"Callable[[_],str]"
__getitem__,"Callable[[_, int],AbstractRouteDef]"
index,int
__getitem__,"Callable[[_, slice],List[AbstractRouteDef]]"
index,slice
__len__,"Callable[[_],int]"
__contains__,"Callable[[_, object],bool]"
item,object
route,"Callable[[_, str, str],_Deco]"
method,str
path,str
kwargs,Any
inner,"Callable[[_HandlerType],_HandlerType]"
handler,_HandlerType
head,"Callable[[_, str],_Deco]"
path,str
kwargs,Any
get,"Callable[[_, str],_Deco]"
path,str
kwargs,Any
post,"Callable[[_, str],_Deco]"
path,str
kwargs,Any
put,"Callable[[_, str],_Deco]"
path,str
kwargs,Any
patch,"Callable[[_, str],_Deco]"
path,str
kwargs,Any
delete,"Callable[[_, str],_Deco]"
path,str
kwargs,Any
view,"Callable[[_, str],_Deco]"
path,str
kwargs,Any
static,"Callable[[_, str, PathLike],None]"
prefix,str
path,PathLike
kwargs,Any
__init__,"Callable[[_],None]"
status,int
prepared,"Callable[[_],bool]"
task,"Callable[[_],asyncio.Task[None]]"
status,"Callable[[_],int]"
chunked,"Callable[[_],bool]"
compression,"Callable[[_],bool]"
reason,"Callable[[_],str]"
set_status,"Callable[[_, int, Union[str, None], Mapping[int, Tuple[str, str]]],None]"
status,int
_RESPONSES,"Mapping[int, Tuple[str, str]]"
force_close,"Callable[[_],None]"
body_length,"Callable[[_],int]"
output_length,"Callable[[_],int]"
enable_chunked_encoding,"Callable[[_, Union[int, None]],None]"
enable_compression,"Callable[[_, Union[bool, ContentCoding, None]],None]"
cookies,"Callable[[_],SimpleCookie]"
set_cookie,"Callable[[_, str, str],None]"
name,str
value,str
path,str
del_cookie,"Callable[[_, str],None]"
name,str
path,str
content_length,"Callable[[_, Union[int, None]],None]"
content_type,"Callable[[_],str]"
content_type,"Callable[[_, str],None]"
value,str
charset,"Callable[[_, Union[str, None]],None]"
last_modified,"Callable[[_],Union[datetime.datetime, None]]"
last_modified,"Callable[[_, Union[int, float, datetime.datetime, str, None]],None]"
value,"Union[int, float, datetime.datetime, str, None]"
_generate_content_type_header,"Callable[[_, istr],None]"
CONTENT_TYPE,istr
_do_start_compression,"Callable[[_, ContentCoding],None]"
coding,ContentCoding
_start_compression,"Callable[[_, BaseRequest],None]"
request,BaseRequest
prepare,"Callable[[_, BaseRequest],Union[AbstractStreamWriter, None]]"
request,BaseRequest
_start,"Callable[[_, BaseRequest],AbstractStreamWriter]"
request,BaseRequest
write,"Callable[[_, bytes],None]"
data,bytes
drain,"Callable[[_],None]"
write_eof,"Callable[[_, bytes],None]"
data,bytes
__repr__,"Callable[[_],str]"
__getitem__,"Callable[[_, str],Any]"
key,str
__setitem__,"Callable[[_, str, Any],None]"
key,str
value,Any
__delitem__,"Callable[[_, str],None]"
key,str
__len__,"Callable[[_],int]"
__hash__,"Callable[[_],int]"
__eq__,"Callable[[_, object],bool]"
other,object
__init__,"Callable[[_],None]"
body,Any
status,int
body,"Callable[[_, bytes, istr, istr],None]"
body,bytes
CONTENT_TYPE,istr
CONTENT_LENGTH,istr
self._body_payload,bool
text,"Callable[[_, str],None]"
text,str
content_length,"Callable[[_, Union[int, None]],None]"
write_eof,"Callable[[_, bytes],None]"
data,bytes
_start,"Callable[[_, BaseRequest],AbstractStreamWriter]"
request,BaseRequest
_do_start_compression,"Callable[[_, ContentCoding],None]"
coding,ContentCoding
json_response,"Callable[[Any],Response]"
data,Any
text,str
body,bytes
status,int
headers,LooseHeaders
content_type,str
dumps,JSONEncoder
__init__,"Callable[[_, RequestInfo, _],None]"
request_info,RequestInfo
message,str
code,"Callable[[_],int]"
code,"Callable[[_, int],None]"
value,int
__init__,"Callable[[_, ConnectionKey, OSError],None]"
connection_key,ConnectionKey
os_error,OSError
os_error,"Callable[[_],OSError]"
host,"Callable[[_],str]"
__str__,"Callable[[_],str]"
__init__,"Callable[[_, Union[str, None]],None]"
__init__,"Callable[[_, bytes, bytes, str, int],None]"
expected,bytes
got,bytes
host,str
port,int
__repr__,"Callable[[_],str]"
__init__,"Callable[[_, Any],None]"
url,Any
url,"Callable[[_],Any]"
__repr__,"Callable[[_],str]"
__init__,"Callable[[_, ConnectionKey, Exception],None]"
connection_key,ConnectionKey
certificate_error,Exception
certificate_error,"Callable[[_],Exception]"
host,"Callable[[_],str]"
ssl,"Callable[[_],bool]"
__str__,"Callable[[_],str]"
sentinel,Any
NO_EXTENSIONS,bool
DEBUG,bool
__new__,"Callable[[_, str, str, str],BasicAuth]"
login,str
password,str
encoding,str
decode,"Callable[[_, str, str],BasicAuth]"
auth_header,str
encoding,str
from_url,"Callable[[_, URL],Union[BasicAuth, None]]"
url,URL
encoding,str
encode,"Callable[[_],str]"
strip_auth_from_url,"Callable[[URL],Tuple[URL, Union[BasicAuth, None]]]"
url,URL
netrc_from_env,"Callable[[],Union[netrc.netrc, None]]"
current_task,"Callable[[Union[asyncio.AbstractEventLoop, None]],asyncio.Task]"
loop,"Union[asyncio.AbstractEventLoop, None]"
get_running_loop,"Callable[[Union[asyncio.AbstractEventLoop, None]],asyncio.AbstractEventLoop]"
loop,"Union[asyncio.AbstractEventLoop, None]"
isasyncgenfunction,"Callable[[Any],bool]"
obj,Any
parse_mimetype,"Callable[[str],MimeType]"
mimetype,str
guess_filename,"Callable[[Any, Union[str, None]],Union[str, None]]"
obj,Any
content_disposition_header,"Callable[[str, bool],str]"
disptype,str
quote_fields,bool
params,str
__init__,"Callable[[_, _],None]"
__get__,"Callable[[_, Any, Any],Any]"
inst,Any
owner,Any
__set__,"Callable[[_, Any, Any],None]"
inst,Any
value,Any
_is_ip_address,"Callable[[Pattern[str], Pattern[bytes], Union[str, bytes, None]],bool]"
is_ip_address,"Callable[[Union[str, bytes, bytearray, memoryview, None]],bool]"
rfc822_formatted_time,"Callable[[],str]"
__init__,"Callable[[_, asyncio.AbstractEventLoop, Union[float, None]],None]"
register,"Callable[[_, _],None]"
args,Any
kwargs,Any
close,"Callable[[_],None]"
start,"Callable[[_],Union[asyncio.Handle, None]]"
timer,"Callable[[_],BaseTimerContext]"
__call__,"Callable[[_],None]"
__enter__,"Callable[[_],BaseTimerContext]"
__exit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],Union[bool, None]]"
exc_type,"Union[Type[BaseException], None]"
__init__,"Callable[[_, asyncio.AbstractEventLoop],None]"
self._tasks,List[asyncio.Task[Any]]
__enter__,"Callable[[_],BaseTimerContext]"
__exit__,"Callable[[_, Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]],Union[bool, None]]"
exc_type,"Union[Type[BaseException], None]"
timeout,"Callable[[_],None]"
_content_dict,"Union[Dict[str, str], None]"
_parse_content_type,"Callable[[_, str],None]"
raw,str
content_type,"Callable[[_],str]"
set_result,"Callable[[asyncio.Future[_T], _T],None]"
fut,asyncio.Future[_T]
result,_T
set_exception,"Callable[[asyncio.Future[_T], BaseException],None]"
fut,asyncio.Future[_T]
exc,BaseException
__init__,"Callable[[_, Iterable[Mapping[str, Any]]],None]"
maps,"Iterable[Mapping[str, Any]]"
__init_subclass__,"Callable[[_],None]"
__getitem__,"Callable[[_, str],Any]"
key,str
get,"Callable[[_, str, Any],Any]"
key,str
default,Any
__len__,"Callable[[_],int]"
__contains__,"Callable[[_, object],bool]"
key,object
__bool__,"Callable[[_],bool]"
__repr__,"Callable[[_],str]"
__init__,"Callable[[_, BaseProtocol, asyncio.AbstractEventLoop, IO[Any], int, _T_OnChunkSent],None]"
protocol,BaseProtocol
count,int
on_chunk_sent,_T_OnChunkSent
_write,"Callable[[_, bytes],None]"
chunk,bytes
_sendfile_cb,"Callable[[_, asyncio.Future[None], int],None]"
fut,asyncio.Future[None]
out_fd,int
_do_sendfile,"Callable[[_, int],bool]"
out_fd,int
_done_fut,"Callable[[_, int, asyncio.Future[None]],None]"
out_fd,int
fut,asyncio.Future[None]
sendfile,"Callable[[_],None]"
write_eof,"Callable[[_, bytes],None]"
chunk,bytes
__init__,"Callable[[_, Union[str, pathlib.Path], int, int, Union[str, None], Union[LooseHeaders, None]],None]"
path,"Union[str, pathlib.Path]"
chunk_size,int
status,int
_sendfile_system,"Callable[[_, BaseRequest, IO[Any], int],AbstractStreamWriter]"
request,BaseRequest
count,int
_sendfile_fallback,"Callable[[_, BaseRequest, IO[Any], int],AbstractStreamWriter]"
request,BaseRequest
count,int
prepare,"Callable[[_, BaseRequest],Union[AbstractStreamWriter, None]]"
request,BaseRequest
__init__,"Callable[[_, FlowControlDataQueue[WSMessage], WebSocketWriter, Union[str, None], ClientResponse, float, bool, bool, asyncio.AbstractEventLoop],None]"
writer,WebSocketWriter
response,ClientResponse
timeout,float
autoclose,bool
autoping,bool
compress,int
client_notakeover,bool
self._waiting,"Union[asyncio.Future[bool], None]"
_cancel_heartbeat,"Callable[[_],None]"
_reset_heartbeat,"Callable[[_],None]"
_send_heartbeat,"Callable[[_],None]"
_pong_not_received,"Callable[[_],None]"
closed,"Callable[[_],bool]"
compress,"Callable[[_],int]"
client_notakeover,"Callable[[_],bool]"
get_extra_info,"Callable[[_, str, Any],Any]"
name,str
default,Any
ping,"Callable[[_, bytes],None]"
message,bytes
pong,"Callable[[_, bytes],None]"
message,bytes
send_str,"Callable[[_, str, Union[int, None]],None]"
data,str
send_bytes,"Callable[[_, bytes, Union[int, None]],None]"
data,bytes
send_json,"Callable[[_, Any, Union[int, None]],None]"
data,Any
dumps,JSONEncoder
close,"Callable[[_],bool]"
code,int
message,bytes
receive,"Callable[[_, Union[float, None]],WSMessage]"
receive_str,"Callable[[_],str]"
receive_bytes,"Callable[[_],bytes]"
receive_json,"Callable[[_],Any]"
loads,JSONDecoder
__aiter__,"Callable[[_],ClientWebSocketResponse]"
__anext__,"Callable[[_],WSMessage]"
json,"Callable[[_],None]"
loads,"Callable[[Any],Any]"
__init__,"Callable[[_, int, str],None]"
code,int
message,str
_websocket_mask_python,"Callable[[bytes, bytearray],None]"
mask,bytes
data,bytearray
ws_ext_parse,"Callable[[str, bool],Tuple[int, bool]]"
extstr,str
isserver,bool
ws_ext_gen,"Callable[[int, bool, bool],str]"
compress,int
isserver,bool
server_notakeover,bool
__init__,"Callable[[_, DataQueue[WSMessage], int, bool],None]"
max_msg_size,int
compress,bool
self._decompressobj,Any
feed_eof,"Callable[[_],None]"
feed_data,"Callable[[_, bytes],Tuple[bool, bytes]]"
data,bytes
_feed_data,"Callable[[_, bytes],Tuple[bool, bytes]]"
data,bytes
parse_frame,"Callable[[_, bytes],List[Tuple[bool, Union[int, None], bytearray, Union[bool, None]]]]"
buf,bytes
__init__,"Callable[[_, BaseProtocol, asyncio.Transport],None]"
protocol,BaseProtocol
use_mask,bool
limit,int
random,Any
compress,int
notakeover,bool
self._compressobj,Any
_send_frame,"Callable[[_, bytes, int, Union[int, None]],None]"
message,bytes
opcode,int
pong,"Callable[[_, bytes],None]"
message,bytes
ping,"Callable[[_, bytes],None]"
message,bytes
send,"Callable[[_, Union[str, bytes], bool, Union[int, None]],None]"
binary,bool
close,"Callable[[_, int, bytes],None]"
code,int
message,bytes
tcp_keepalive,"Callable[[asyncio.Transport],None]"
tcp_keepalive,"Callable[[asyncio.Transport],None]"
tcp_nodelay,"Callable[[asyncio.Transport, bool],None]"
value,bool
tcp_cork,"Callable[[asyncio.Transport, bool],None]"
value,bool
__init__,"Callable[[_, int, int, int],None]"
max_line_size,int
max_headers,int
max_field_size,int
parse_headers,"Callable[[_, List[bytes]],Tuple[CIMultiDictProxy[str], RawHeaders]]"
__init__,"Callable[[_, Union[BaseProtocol, None], Union[asyncio.AbstractEventLoop, None], int, int, int, Union[BaseTimerContext, None], Union[int, None], Union[str, None], bool, Union[Type[BaseException], None], bool, bool, bool],None]"
loop,"Union[asyncio.AbstractEventLoop, None]"
max_line_size,int
max_headers,int
max_field_size,int
readall,bool
payload_exception,"Union[Type[BaseException], None]"
response_with_body,bool
read_until_eof,bool
auto_decompress,bool
parse_message,"Callable[[_, List[bytes]],Any]"
feed_eof,"Callable[[_],Any]"
feed_data,"Callable[[_, bytes, bytes, bytes, istr, str, istr],Tuple[List[Any], bool, bytes]]"
data,bytes
SEP,bytes
EMPTY,bytes
CONTENT_LENGTH,istr
METH_CONNECT,str
SEC_WEBSOCKET_KEY1,istr
parse_headers,"Callable[[_, List[bytes]],Tuple[CIMultiDictProxy[str], RawHeaders, Union[bool, None], Union[str, None], bool, bool]]"
parse_message,"Callable[[_, List[bytes]],Any]"
parse_message,"Callable[[_, List[bytes]],Any]"
__init__,"Callable[[_, StreamReader, Union[int, None], bool, Union[str, None], Union[int, None], Union[str, None], bool, bool, bool],None]"
payload,StreamReader
chunked,bool
readall,bool
response_with_body,bool
auto_decompress,bool
feed_eof,"Callable[[_],None]"
feed_data,"Callable[[_, bytes, bytes, bytes],Tuple[bool, bytes]]"
chunk,bytes
SEP,bytes
CHUNK_EXT,bytes
__init__,"Callable[[_, StreamReader, Union[str, None]],None]"
out,StreamReader
set_exception,"Callable[[_, BaseException],None]"
exc,BaseException
feed_data,"Callable[[_, bytes, int],None]"
chunk,bytes
size,int
feed_eof,"Callable[[_],None]"
begin_http_chunk_receiving,"Callable[[_],None]"
end_http_chunk_receiving,"Callable[[_],None]"
get_payload,"Callable[[Any],Payload]"
data,Any
args,Any
kwargs,Any
register_payload,"Callable[[Type[Payload], Any],None]"
type,Any
order,Order
__init__,"Callable[[_, Any],None]"
type,Any
order,Order
__init__,"Callable[[_],None]"
self._first,"List[Tuple[Type[Payload], Any]]"
self._normal,"List[Tuple[Type[Payload], Any]]"
self._last,"List[Tuple[Type[Payload], Any]]"
get,"Callable[[_, Any],Payload]"
data,Any
args,Any
_CHAIN,Any
kwargs,Any
register,"Callable[[_, Type[Payload], Any],None]"
type,Any
order,Order
__init__,"Callable[[_, Any, Union[_CIMultiDict, Dict[str, str], Iterable[Tuple[str, str]], None], Union[str, None], Union[str, None], Union[str, None]],None]"
value,Any
headers,"Union[_CIMultiDict, Dict[str, str], Iterable[Tuple[str, str]], None]"
kwargs,Any
set_content_disposition,"Callable[[_, str, bool],None]"
disptype,str
quote_fields,bool
params,Any
write,"Callable[[_, AbstractStreamWriter],None]"
writer,AbstractStreamWriter
__init__,"Callable[[_, ByteString],None]"
value,ByteString
args,Any
kwargs,Any
write,"Callable[[_, AbstractStreamWriter],None]"
writer,AbstractStreamWriter
__init__,"Callable[[_, Text],None]"
value,Text
args,Any
kwargs,Any
__init__,"Callable[[_, IO[str]],None]"
args,Any
kwargs,Any
__init__,"Callable[[_, IO[Any], str],None]"
disposition,str
args,Any
kwargs,Any
write,"Callable[[_, AbstractStreamWriter],None]"
writer,AbstractStreamWriter
__init__,"Callable[[_, TextIO],None]"
value,TextIO
args,Any
kwargs,Any
write,"Callable[[_, AbstractStreamWriter],None]"
writer,AbstractStreamWriter
size,"Callable[[_],float]"
__init__,"Callable[[_, Any, str, str, JSONEncoder],None]"
value,Any
encoding,str
content_type,str
dumps,JSONEncoder
args,Any
kwargs,Any
__init__,"Callable[[_, _AsyncIterable],None]"
value,_AsyncIterable
args,Any
kwargs,Any
write,"Callable[[_, AbstractStreamWriter],None]"
writer,AbstractStreamWriter
__init__,"Callable[[_, StreamReader],None]"
value,StreamReader
args,Any
kwargs,Any
SERVER_SOFTWARE,str
RESPONSES,"Mapping[int, Tuple[str, str]]"
__init__,"Callable[[_, Callable[[],Awaitable[_T]]],None]"
__anext__,"Callable[[_],_T]"
__init__,"Callable[[_, StreamReader],None]"
stream,StreamReader
__aiter__,"Callable[[_],ChunkTupleAsyncStreamIterator]"
iter_chunked,"Callable[[_, int],AsyncStreamIterator[bytes]]"
n,int
iter_chunks,"Callable[[_],ChunkTupleAsyncStreamIterator]"
__init__,"Callable[[_, BaseProtocol],None]"
protocol,BaseProtocol
limit,int
loop,"Union[asyncio.AbstractEventLoop, None]"
self._http_chunk_splits,"Union[List[int], None]"
self._waiter,"Union[asyncio.Future[bool], None]"
self._eof_waiter,"Union[asyncio.Future[bool], None]"
self._eof_callbacks,"List[Callable[[],None]]"
__repr__,"Callable[[_],str]"
set_exception,"Callable[[_, BaseException],None]"
exc,BaseException
on_eof,"Callable[[_, Callable[[],None]],None]"
callback,"Callable[[],None]"
feed_eof,"Callable[[_],None]"
is_eof,"Callable[[_],bool]"
at_eof,"Callable[[_],bool]"
wait_eof,"Callable[[_],None]"
unread_data,"Callable[[_, bytes],None]"
data,bytes
feed_data,"Callable[[_, bytes, int],None]"
data,bytes
size,int
begin_http_chunk_receiving,"Callable[[_],None]"
end_http_chunk_receiving,"Callable[[_],None]"
_wait,"Callable[[_, str],None]"
func_name,str
readline,"Callable[[_],bytes]"
read,"Callable[[_, int],bytes]"
n,int
readany,"Callable[[_],bytes]"
readexactly,"Callable[[_, int],bytes]"
n,int
read_nowait,"Callable[[_, int],bytes]"
n,int
_read_nowait_chunk,"Callable[[_, int],bytes]"
n,int
_read_nowait,"Callable[[_, int],bytes]"
n,int
set_exception,"Callable[[_, BaseException],None]"
exc,BaseException
on_eof,"Callable[[_, Callable[[],None]],None]"
callback,"Callable[[],None]"
feed_eof,"Callable[[_],None]"
is_eof,"Callable[[_],bool]"
at_eof,"Callable[[_],bool]"
wait_eof,"Callable[[_],None]"
feed_data,"Callable[[_, bytes, int],None]"
data,bytes
n,int
readline,"Callable[[_],bytes]"
read,"Callable[[_, int],bytes]"
n,int
readany,"Callable[[_],bytes]"
readexactly,"Callable[[_, int],bytes]"
n,int
read_nowait,"Callable[[_],bytes]"
__init__,"Callable[[_, asyncio.AbstractEventLoop],None]"
self._waiter,"Union[asyncio.Future[bool], None]"
self._buffer,"Deque[Tuple[_T, int]]"
__len__,"Callable[[_],int]"
is_eof,"Callable[[_],bool]"
at_eof,"Callable[[_],bool]"
set_exception,"Callable[[_, BaseException],None]"
exc,BaseException
feed_data,"Callable[[_, _T, int],None]"
data,_T
size,int
feed_eof,"Callable[[_],None]"
read,"Callable[[_],_T]"
__init__,"Callable[[_, BaseProtocol],None]"
protocol,BaseProtocol
limit,int
feed_data,"Callable[[_, _T, int],None]"
data,_T
size,int
read,"Callable[[_],_T]"
test_simple_get,"Callable[[_],None]"
test_simple_get_with_text,"Callable[[_],None]"
test_handler_returns_not_response,"Callable[[_, _],None]"
test_head_returns_empty_body,"Callable[[_],None]"
test_response_before_complete,"Callable[[_],None]"
test_post_form,"Callable[[_],None]"
test_post_text,"Callable[[_],None]"
test_post_json,"Callable[[_],None]"
test_multipart,"Callable[[_],None]"
test_multipart_content_transfer_encoding,"Callable[[_],None]"
test_render_redirect,"Callable[[_],None]"
test_post_single_file,"Callable[[_],None]"
test_files_upload_with_same_key,"Callable[[_],None]"
test_post_files,"Callable[[_],None]"
test_release_post_data,"Callable[[_],None]"
test_POST_DATA_with_content_transfer_encoding,"Callable[[_],None]"
test_post_form_with_duplicate_keys,"Callable[[_],None]"
test_repr_for_application,"Callable[[],None]"
test_expect_default_handler_unknown,"Callable[[_],None]"
test_100_continue,"Callable[[_],None]"
test_100_continue_custom,"Callable[[_],None]"
test_100_continue_custom_response,"Callable[[_],None]"
test_100_continue_for_not_found,"Callable[[_],None]"
test_100_continue_for_not_allowed,"Callable[[_],None]"
test_http11_keep_alive_default,"Callable[[_],None]"
test_http10_keep_alive_default,"Callable[[_],None]"
test_http10_keep_alive_with_headers_close,"Callable[[_],None]"
test_http10_keep_alive_with_headers,"Callable[[_],None]"
test_upload_file,"Callable[[_],None]"
test_upload_file_object,"Callable[[_],None]"
test_empty_content_for_query_without_body,"Callable[[_],None]"
test_empty_content_for_query_with_body,"Callable[[_],None]"
test_get_with_empty_arg,"Callable[[_],None]"
test_large_header,"Callable[[_],None]"
test_large_header_allowed,"Callable[[_, _],None]"
test_get_with_empty_arg_with_equal,"Callable[[_],None]"
test_response_with_async_gen,"Callable[[_, _],None]"
test_response_with_streamer,"Callable[[_, _],None]"
test_response_with_async_gen_no_params,"Callable[[_, _],None]"
test_response_with_streamer_no_params,"Callable[[_, _],None]"
test_response_with_file,"Callable[[_, _],None]"
test_response_with_file_ctype,"Callable[[_, _],None]"
test_response_with_payload_disp,"Callable[[_, _],None]"
test_response_with_payload_stringio,"Callable[[_, _],None]"
test_response_with_precompressed_body_gzip,"Callable[[_],None]"
test_response_with_precompressed_body_deflate,"Callable[[_],None]"
test_bad_request_payload,"Callable[[_],None]"
test_stream_response_multiple_chunks,"Callable[[_],None]"
test_start_without_routes,"Callable[[_],None]"
test_requests_count,"Callable[[_],None]"
test_redirect_url,"Callable[[_],None]"
test_simple_subapp,"Callable[[_],None]"
test_subapp_reverse_url,"Callable[[_],None]"
test_subapp_reverse_variable_url,"Callable[[_],None]"
test_subapp_reverse_static_url,"Callable[[_],None]"
test_subapp_app,"Callable[[_],None]"
test_subapp_not_found,"Callable[[_],None]"
test_subapp_not_found2,"Callable[[_],None]"
test_subapp_not_allowed,"Callable[[_],None]"
test_subapp_cannot_add_app_in_handler,"Callable[[_],None]"
test_subapp_middlewares,"Callable[[_],None]"
test_subapp_on_response_prepare,"Callable[[_],None]"
test_subapp_on_startup,"Callable[[_],None]"
test_subapp_on_shutdown,"Callable[[_],None]"
test_subapp_on_cleanup,"Callable[[_],None]"
test_custom_date_header,"Callable[[_],None]"
test_response_prepared_with_clone,"Callable[[_],None]"
test_app_max_client_size,"Callable[[_],None]"
test_app_max_client_size_adjusted,"Callable[[_],None]"
test_app_max_client_size_none,"Callable[[_],None]"
test_post_max_client_size,"Callable[[_],None]"
test_post_max_client_size_for_file,"Callable[[_],None]"
test_response_with_bodypart,"Callable[[_],None]"
test_response_with_bodypart_named,"Callable[[_, _],None]"
test_response_with_bodypart_invalid_name,"Callable[[_],None]"
test_request_clone,"Callable[[_],None]"
test_await,"Callable[[_],None]"
test_response_context_manager,"Callable[[_],None]"
test_response_context_manager_error,"Callable[[_],None]"
test_context_manager_close_on_release,"Callable[[_, _],None]"
test_iter_any,"Callable[[_],None]"
test_request_tracing,"Callable[[_],None]"
test_return_http_exception_deprecated,"Callable[[_],None]"
test_request_path,"Callable[[_],None]"
test_app_add_routes,"Callable[[_],None]"
test_request_headers_type,"Callable[[_],None]"
test_signal_on_error_handler,"Callable[[_],None]"
test_fingerprint_mismatch,"Callable[[],None]"
test_invalid_url,"Callable[[],None]"
test_response_default_status,"Callable[[],None]"
test_response_status,"Callable[[],None]"
test_response_deprecated_code_property,"Callable[[],None]"
test_response_both_code_and_status,"Callable[[],None]"
test_repr,"Callable[[],None]"
test_connections,"Callable[[],None]"
test_shutdown_no_timeout,"Callable[[],None]"
test_shutdown_timeout,"Callable[[],None]"
test_ctor,"Callable[[],None]"
test_deprecated_message,"Callable[[],None]"
test_doubleslashes,"Callable[[],None]"
test_content_type_not_specified,"Callable[[],None]"
test_content_type_from_spec,"Callable[[],None]"
test_content_type_from_spec_with_charset,"Callable[[],None]"
test_calc_content_type_on_getting_charset,"Callable[[],None]"
test_urlencoded_querystring,"Callable[[],None]"
test_non_ascii_path,"Callable[[],None]"
test_non_ascii_raw_path,"Callable[[],None]"
test_content_length,"Callable[[],None]"
test_range_to_slice_head,"Callable[[],None]"
test_range_to_slice_mid,"Callable[[],None]"
test_range_to_slice_tail_start,"Callable[[],None]"
test_range_to_slice_tail_stop,"Callable[[],None]"
test_non_keepalive_on_http10,"Callable[[],None]"
test_non_keepalive_on_closing,"Callable[[],None]"
test_call_POST_on_GET_request,"Callable[[],None]"
test_call_POST_on_weird_content_type,"Callable[[],None]"
test_call_POST_twice,"Callable[[],None]"
test_no_request_cookies,"Callable[[],None]"
test_request_cookie,"Callable[[],None]"
test_request_cookie__set_item,"Callable[[],None]"
test_match_info,"Callable[[],None]"
test_request_is_mutable_mapping,"Callable[[],None]"
test_request_delitem,"Callable[[],None]"
test_request_len,"Callable[[],None]"
test_request_iter,"Callable[[],None]"
test___repr__,"Callable[[],None]"
test___repr___non_ascii_path,"Callable[[],None]"
test_http_scheme,"Callable[[],None]"
test_https_scheme_by_ssl_transport,"Callable[[],None]"
test_single_forwarded_header,"Callable[[],None]"
test_forwarded_node_identifier,"Callable[[_, _],None]"
test_single_forwarded_header_camelcase,"Callable[[],None]"
test_single_forwarded_header_single_param,"Callable[[],None]"
test_single_forwarded_header_multiple_param,"Callable[[],None]"
test_single_forwarded_header_quoted_escaped,"Callable[[],None]"
test_single_forwarded_header_custom_param,"Callable[[],None]"
test_single_forwarded_header_empty_params,"Callable[[],None]"
test_single_forwarded_header_bad_separator,"Callable[[],None]"
test_single_forwarded_header_injection1,"Callable[[],None]"
test_single_forwarded_header_injection2,"Callable[[],None]"
test_single_forwarded_header_long_quoted_string,"Callable[[],None]"
test_multiple_forwarded_headers,"Callable[[],None]"
test_multiple_forwarded_headers_bad_syntax,"Callable[[],None]"
test_multiple_forwarded_headers_injection,"Callable[[],None]"
test_host_by_host_header,"Callable[[],None]"
test_raw_headers,"Callable[[],None]"
test_rel_url,"Callable[[],None]"
test_url_url,"Callable[[],None]"
test_clone,"Callable[[],None]"
test_clone_client_max_size,"Callable[[],None]"
test_clone_method,"Callable[[],None]"
test_clone_rel_url,"Callable[[],None]"
test_clone_rel_url_str,"Callable[[],None]"
test_clone_headers,"Callable[[],None]"
test_clone_headers_dict,"Callable[[],None]"
test_cannot_clone_after_read,"Callable[[_],None]"
test_make_too_big_request,"Callable[[_],None]"
test_make_too_big_request_adjust_limit,"Callable[[_],None]"
test_multipart_formdata,"Callable[[_],None]"
test_make_too_big_request_limit_None,"Callable[[_],None]"
test_remote_peername_tcp,"Callable[[],None]"
test_remote_peername_unix,"Callable[[],None]"
test_save_state_on_clone,"Callable[[],None]"
test_clone_scheme,"Callable[[],None]"
test_clone_host,"Callable[[],None]"
test_clone_remote,"Callable[[],None]"
test_request_custom_attr,"Callable[[],None]"
test_remote_with_closed_transport,"Callable[[],None]"
test_url_http_with_closed_transport,"Callable[[],None]"
test_url_https_with_closed_transport,"Callable[[],None]"
test_eq,"Callable[[],None]"
test_loop_prop,"Callable[[],None]"
test_bad_status_line1,"Callable[[],None]"
test_bad_status_line2,"Callable[[],None]"
test_http_error_exception,"Callable[[],None]"
test_nonstarted_ping,"Callable[[],None]"
test_nonstarted_pong,"Callable[[],None]"
test_nonstarted_send_str,"Callable[[],None]"
test_nonstarted_send_bytes,"Callable[[],None]"
test_nonstarted_send_json,"Callable[[],None]"
test_nonstarted_close,"Callable[[],None]"
test_nonstarted_receive_str,"Callable[[],None]"
test_nonstarted_receive_bytes,"Callable[[],None]"
test_nonstarted_receive_json,"Callable[[],None]"
test_receive_str_nonstring,"Callable[[_],None]"
test_receive_bytes_nonsbytes,"Callable[[_],None]"
test_send_str_nonstring,"Callable[[_],None]"
test_send_bytes_nonbytes,"Callable[[_],None]"
test_send_json_nonjson,"Callable[[_],None]"
test_write_non_prepared,"Callable[[],None]"
test_websocket_ready,"Callable[[],None]"
test_websocket_not_ready,"Callable[[],None]"
test_websocket_ready_unknown_protocol,"Callable[[],None]"
test_bool_websocket_ready,"Callable[[],None]"
test_bool_websocket_not_ready,"Callable[[],None]"
test_can_prepare_ok,"Callable[[_],None]"
test_can_prepare_unknown_protocol,"Callable[[_],None]"
test_can_prepare_invalid_method,"Callable[[_],None]"
test_can_prepare_without_upgrade,"Callable[[_],None]"
test_can_prepare_started,"Callable[[_],None]"
test_closed_after_ctor,"Callable[[],None]"
test_send_str_closed,"Callable[[_, _],None]"
test_send_bytes_closed,"Callable[[_, _],None]"
test_send_json_closed,"Callable[[_, _],None]"
test_ping_closed,"Callable[[_, _],None]"
test_pong_closed,"Callable[[_, _],None]"
test_close_idempotent,"Callable[[_],None]"
test_prepare_invalid_method,"Callable[[_],None]"
test_prepare_without_upgrade,"Callable[[_],None]"
test_wait_closed_before_start,"Callable[[],None]"
test_write_eof_not_started,"Callable[[],None]"
test_write_eof_idempotent,"Callable[[_],None]"
test_receive_eofstream_in_reader,"Callable[[_, _],None]"
test_receive_exc_in_reader,"Callable[[_, _],None]"
test_receive_cancelled,"Callable[[_, _],None]"
test_receive_timeouterror,"Callable[[_, _],None]"
test_multiple_receive_on_close_connection,"Callable[[_],None]"
test_concurrent_receive,"Callable[[_],None]"
test_close_exc,"Callable[[_, _, _],None]"
test_close_exc2,"Callable[[_],None]"
test_prepare_twice_idempotent,"Callable[[_],None]"
test_send_with_per_message_deflate,"Callable[[_, _],None]"
test_set_exception,"Callable[[_, _],None]"
test_set,"Callable[[_, _],None]"
test_cancel_waiters,"Callable[[_, _],None]"
test_close_coro,"Callable[[_],None]"
test_init_headers_simple_dict,"Callable[[_],None]"
test_init_headers_list_of_tuples,"Callable[[_],None]"
test_init_headers_MultiDict,"Callable[[_],None]"
test_init_headers_list_of_tuples_with_duplicates,"Callable[[_],None]"
test_init_cookies_with_simple_dict,"Callable[[_],None]"
test_init_cookies_with_list_of_tuples,"Callable[[_],None]"
test_merge_headers,"Callable[[_],None]"
test_merge_headers_with_multi_dict,"Callable[[_],None]"
test_merge_headers_with_list_of_tuples,"Callable[[_],None]"
test_merge_headers_with_list_of_tuples_duplicated_names,"Callable[[_],None]"
test_http_GET,"Callable[[_, _],None]"
test_http_OPTIONS,"Callable[[_, _],None]"
test_http_HEAD,"Callable[[_, _],None]"
test_http_POST,"Callable[[_, _],None]"
test_http_PUT,"Callable[[_, _],None]"
test_http_PATCH,"Callable[[_, _],None]"
test_http_DELETE,"Callable[[_, _],None]"
test_close,"Callable[[_, _],None]"
test_closed,"Callable[[_],None]"
test_connector,"Callable[[_, _, _],None]"
test_create_connector,"Callable[[_, _, _],None]"
test_connector_loop,"Callable[[_],None]"
test_detach,"Callable[[_],None]"
test_request_closed_session,"Callable[[_],None]"
test_close_flag_for_closed_connector,"Callable[[_],None]"
test_double_close,"Callable[[_, _],None]"
test_del,"Callable[[_, _],None]"
test_context_manager,"Callable[[_, _],None]"
test_borrow_connector_loop,"Callable[[_, _, _],None]"
test_reraise_os_error,"Callable[[_],None]"
test_close_conn_on_error,"Callable[[_],None]"
test_cookie_jar_usage,"Callable[[_, _],None]"
test_session_default_version,"Callable[[_],None]"
test_session_loop,"Callable[[_],None]"
test_proxy_str,"Callable[[_, _],None]"
test_request_tracing,"Callable[[_, _],None]"
test_request_tracing_exception,"Callable[[_],None]"
test_request_tracing_interpose_headers,"Callable[[_, _],None]"
test_client_session_inheritance,"Callable[[],None]"
test_client_session_custom_attr,"Callable[[_],None]"
test_client_session_timeout_args,"Callable[[_],None]"
test_oserror,"Callable[[_],None]"
test_pause_resume_on_error,"Callable[[_],None]"
test_client_proto_bad_message,"Callable[[_],None]"
test_uncompleted_message,"Callable[[_],None]"
test_client_protocol_readuntil_eof,"Callable[[_],None]"
test_empty_data,"Callable[[_],None]"
test_schedule_timeout,"Callable[[_],None]"
test_drop_timeout,"Callable[[_],None]"
test_reschedule_timeout,"Callable[[_],None]"
test_eof_received,"Callable[[_],None]"
test_get,"Callable[[_],None]"
test_head,"Callable[[_],None]"
test_options,"Callable[[_],None]"
test_post,"Callable[[_],None]"
test_put,"Callable[[_],None]"
test_patch,"Callable[[_],None]"
test_delete,"Callable[[_],None]"
test_route,"Callable[[_],None]"
test_static,"Callable[[_],None]"
test_head_deco,"Callable[[_],None]"
test_get_deco,"Callable[[_],None]"
test_post_deco,"Callable[[_],None]"
test_put_deco,"Callable[[_],None]"
test_patch_deco,"Callable[[_],None]"
test_delete_deco,"Callable[[_],None]"
test_route_deco,"Callable[[_],None]"
test_routedef_sequence_protocol,"Callable[[],None]"
test_repr_route_def,"Callable[[],None]"
test_repr_route_def_with_extra_info,"Callable[[],None]"
test_repr_static_def,"Callable[[],None]"
test_repr_route_table_def,"Callable[[],None]"
test_access_root_of_static_handler,"Callable[[_, _, _, _, _, _],None]"
test_follow_symlink,"Callable[[_, _],None]"
test_access_non_existing_resource,"Callable[[_, _],None]"
test_url_escaping,"Callable[[_, _, _],None]"
test_handler_metadata_persistence,"Callable[[],None]"
test_unauthorized_folder_access,"Callable[[_, _],None]"
test_access_symlink_loop,"Callable[[_, _],None]"
test_access_special_resource,"Callable[[_, _],None]"
test_partially_applied_handler,"Callable[[_],None]"
test_system_route,"Callable[[],None]"
test_412_is_returned,"Callable[[_],None]"
test_allow_head,"Callable[[_],None]"
test_reuse_last_added_resource,"Callable[[_],None]"
test_resource_raw_match,"Callable[[],None]"
test_add_view,"Callable[[_],None]"
test_decorate_view,"Callable[[_],None]"
test_web_view,"Callable[[_],None]"
test_static_absolute_url,"Callable[[_, _],None]"
test_register_type,"Callable[[_],None]"
test_register_unsupported_order,"Callable[[_],None]"
test_payload_ctor,"Callable[[],None]"
test_payload_content_type,"Callable[[],None]"
test_bytes_payload_default_content_type,"Callable[[],None]"
test_bytes_payload_explicit_content_type,"Callable[[],None]"
test_bytes_payload_bad_type,"Callable[[],None]"
test_string_payload,"Callable[[],None]"
test_string_io_payload,"Callable[[],None]"
test_async_iterable_payload_default_content_type,"Callable[[],None]"
test_async_iterable_payload_explicit_content_type,"Callable[[],None]"
test_async_iterable_payload_not_async_iterable,"Callable[[],None]"
test_stream_reader_long_lines,"Callable[[],None]"
test_formdata_multipart,"Callable[[_, _],None]"
test_invalid_formdata_payload,"Callable[[],None]"
test_invalid_formdata_params,"Callable[[],None]"
test_invalid_formdata_params2,"Callable[[],None]"
test_invalid_formdata_content_type,"Callable[[],None]"
test_invalid_formdata_filename,"Callable[[],None]"
test_invalid_formdata_content_transfer_encoding,"Callable[[],None]"
test_formdata_field_name_is_quoted,"Callable[[_, _],None]"
test_formdata_field_name_is_not_quoted,"Callable[[_, _],None]"
test_ctor,"Callable[[_, _, _, _],None]"
test_callbacks_on_close,"Callable[[_, _, _, _],None]"
test_callbacks_on_release,"Callable[[_, _, _, _],None]"
test_callbacks_exception,"Callable[[_, _, _, _],None]"
test_del,"Callable[[_, _, _, _],None]"
test_close,"Callable[[_, _, _, _],None]"
test_release,"Callable[[_, _, _, _],None]"
test_release_proto_should_close,"Callable[[_, _, _, _],None]"
test_release_released,"Callable[[_, _, _, _],None]"
test_proxy_http_absolute_path,"Callable[[_, _],None]"
test_proxy_http_raw_path,"Callable[[_, _],None]"
test_proxy_http_idna_support,"Callable[[_, _],None]"
test_proxy_http_connection_error,"Callable[[_],None]"
test_proxy_http_bad_response,"Callable[[_, _],None]"
test_proxy_http_auth,"Callable[[_, _],None]"
test_proxy_http_auth_utf8,"Callable[[_, _],None]"
test_proxy_http_auth_from_url,"Callable[[_, _],None]"
test_proxy_http_acquired_cleanup,"Callable[[_, _],None]"
test_proxy_http_acquired_cleanup_force,"Callable[[_, _],None]"
test_proxy_http_multi_conn_limit,"Callable[[_, _],None]"
test_proxy_https_connection_error,"Callable[[_],None]"
test_proxy_https_bad_response,"Callable[[_, _],None]"
test_proxy_from_env_http,"Callable[[_, _, _],None]"
test_proxy_auth,"Callable[[],None]"
test_connection_del,"Callable[[_],None]"
test_connection_del_loop_debug,"Callable[[_],None]"
test_connection_del_loop_closed,"Callable[[_],None]"
test_del,"Callable[[_],None]"
test_del_with_scheduled_cleanup,"Callable[[_],None]"
test_del_with_closed_loop,"Callable[[_],None]"
test_del_empty_connector,"Callable[[_],None]"
test_create_conn,"Callable[[_],None]"
test_context_manager,"Callable[[_],None]"
test_close,"Callable[[_],None]"
test_get,"Callable[[_],None]"
test_get_expired,"Callable[[_],None]"
test_get_expired_ssl,"Callable[[_],None]"
test_release_acquired,"Callable[[_, _],None]"
test_release_acquired_closed,"Callable[[_, _],None]"
test_release,"Callable[[_, _],None]"
test_release_ssl_transport,"Callable[[_, _],None]"
test_release_already_closed,"Callable[[_],None]"
test_release_waiter_no_limit,"Callable[[_, _, _],None]"
test_release_waiter_first_available,"Callable[[_, _, _],None]"
test_release_waiter_release_first,"Callable[[_, _, _],None]"
test_release_waiter_skip_done_waiter,"Callable[[_, _, _],None]"
test_release_waiter_per_host,"Callable[[_, _, _],None]"
test_release_waiter_no_available,"Callable[[_, _, _],None]"
test_release_close,"Callable[[_, _],None]"
test__drop_acquire_per_host1,"Callable[[_],None]"
test__drop_acquire_per_host2,"Callable[[_],None]"
test__drop_acquire_per_host3,"Callable[[_],None]"
test_tcp_connector_certificate_error,"Callable[[_],None]"
test_tcp_connector_multiple_hosts_errors,"Callable[[_],None]"
test_tcp_connector_resolve_host,"Callable[[_],None]"
test_tcp_connector_dns_cache_not_expired,"Callable[[_, _],None]"
test_tcp_connector_dns_cache_forever,"Callable[[_, _],None]"
test_tcp_connector_use_dns_cache_disabled,"Callable[[_, _],None]"
test_tcp_connector_dns_throttle_requests,"Callable[[_, _],None]"
test_tcp_connector_dns_throttle_requests_exception_spread,"Callable[[_],None]"
test_tcp_connector_dns_tracing,"Callable[[_, _],None]"
test_tcp_connector_dns_tracing_cache_disabled,"Callable[[_, _],None]"
test_tcp_connector_dns_tracing_throttle_requests,"Callable[[_, _],None]"
test_dns_error,"Callable[[_],None]"
test_get_pop_empty_conns,"Callable[[_],None]"
test_release_close_do_not_add_to_pool,"Callable[[_, _],None]"
test_release_close_do_not_delete_existing_connections,"Callable[[_],None]"
test_release_not_started,"Callable[[_],None]"
test_release_not_opened,"Callable[[_, _],None]"
test_connect,"Callable[[_, _],None]"
test_connect_tracing,"Callable[[_],None]"
test_close_during_connect,"Callable[[_],None]"
test_ctor_cleanup,"Callable[[],None]"
test_cleanup,"Callable[[_],None]"
test_cleanup_close_ssl_transport,"Callable[[_],None]"
test_cleanup2,"Callable[[],None]"
test_cleanup3,"Callable[[_],None]"
test_cleanup_closed,"Callable[[_, _],None]"
test_cleanup_closed_disabled,"Callable[[_, _],None]"
test_tcp_connector_ctor,"Callable[[_],None]"
test_tcp_connector_ctor_fingerprint_valid,"Callable[[_],None]"
test_insecure_fingerprint_md5,"Callable[[_],None]"
test_insecure_fingerprint_sha1,"Callable[[_],None]"
test_tcp_connector_clear_dns_cache,"Callable[[_],None]"
test_tcp_connector_clear_dns_cache_bad_args,"Callable[[_],None]"
test_dont_recreate_ssl_context,"Callable[[_],None]"
test_dont_recreate_ssl_context2,"Callable[[_],None]"
test___get_ssl_context1,"Callable[[_],None]"
test___get_ssl_context2,"Callable[[_],None]"
test___get_ssl_context3,"Callable[[_],None]"
test___get_ssl_context4,"Callable[[_],None]"
test___get_ssl_context5,"Callable[[_],None]"
test___get_ssl_context6,"Callable[[_],None]"
test_close_twice,"Callable[[_],None]"
test_close_cancels_cleanup_handle,"Callable[[_],None]"
test_close_abort_closed_transports,"Callable[[_],None]"
test_close_cancels_cleanup_closed_handle,"Callable[[_],None]"
test_ctor_with_default_loop,"Callable[[_],None]"
test_connect_with_limit,"Callable[[_, _],None]"
test_connect_queued_operation_tracing,"Callable[[_, _],None]"
test_connect_reuseconn_tracing,"Callable[[_, _],None]"
test_connect_with_limit_and_limit_per_host,"Callable[[_, _],None]"
test_connect_with_no_limit_and_limit_per_host,"Callable[[_, _],None]"
test_connect_with_no_limits,"Callable[[_, _],None]"
test_connect_with_limit_cancelled,"Callable[[_],None]"
test_connect_with_capacity_release_waiters,"Callable[[_],None]"
test_connect_with_limit_concurrent,"Callable[[_],None]"
test_connect_waiters_cleanup,"Callable[[_],None]"
test_connect_waiters_cleanup_key_error,"Callable[[_],None]"
test_close_with_acquired_connection,"Callable[[_],None]"
test_default_force_close,"Callable[[_],None]"
test_limit_property,"Callable[[_],None]"
test_limit_per_host_property,"Callable[[_],None]"
test_limit_property_default,"Callable[[_],None]"
test_limit_per_host_property_default,"Callable[[_],None]"
test_force_close_and_explicit_keep_alive,"Callable[[_],None]"
test_error_on_connection,"Callable[[_, _],None]"
test_cancelled_waiter,"Callable[[_],None]"
test_error_on_connection_with_cancelled_waiter,"Callable[[_, _],None]"
test_tcp_connector,"Callable[[_, _],None]"
test_unix_connector_not_found,"Callable[[_],None]"
test_unix_connector_permission,"Callable[[_],None]"
test_default_use_dns_cache,"Callable[[],None]"
test_resolver_not_called_with_address_is_ip,"Callable[[_],None]"
test_tcp_connector_raise_connector_ssl_error,"Callable[[_],None]"
test_tcp_connector_do_not_raise_connector_ssl_error,"Callable[[_],None]"
test_tcp_connector_uses_provided_local_addr,"Callable[[_],None]"
test_unix_connector,"Callable[[_, _],None]"
test_next_addrs_basic,"Callable[[_, _],None]"
test_remove,"Callable[[_, _],None]"
test_clear,"Callable[[_, _],None]"
test_not_expired_ttl_None,"Callable[[_, _],None]"
test_not_expired_ttl,"Callable[[_],None]"
test_expired_ttl,"Callable[[_, _],None]"
test_next_addrs,"Callable[[_, _],None]"
test_next_addrs_single,"Callable[[_, _],None]"
test_init_process,"Callable[[_],None]"
test_run,"Callable[[_, _],None]"
test_run_async_factory,"Callable[[_, _],None]"
test_handle_quit,"Callable[[_, _],None]"
test_handle_abort,"Callable[[_],None]"
test__wait_next_notify,"Callable[[_],None]"
test__notify_waiter_done,"Callable[[_],None]"
test__notify_waiter_done_explicit_waiter,"Callable[[_],None]"
test_init_signals,"Callable[[_],None]"
test__get_valid_log_format_ok,"Callable[[_, _, _],None]"
test__get_valid_log_format_exc,"Callable[[_],None]"
test__run_ok_parent_changed,"Callable[[_, _, _],None]"
test__run_exc,"Callable[[_, _, _],None]"
test__create_ssl_context_without_certs_and_ciphers,"Callable[[_],None]"
test__create_ssl_context_with_ciphers,"Callable[[_],None]"
test__create_ssl_context_with_ca_certs,"Callable[[_],None]"
test_client,"Callable[[_, _],None]"
test_with_test_server_fails,"Callable[[_],None]"
test_with_client_fails,"Callable[[_],None]"
test_aiohttp_client_close_is_idempotent,"Callable[[],None]"
test_example_with_loop,"Callable[[_],None]"
test_example,"Callable[[_],None]"
test_get_route,"Callable[[],None]"
test_get_route,"Callable[[_, _],None]"
test_get_route,"Callable[[],None]"
test_client_websocket,"Callable[[_, _],None]"
test_client_cookie,"Callable[[_, _],None]"
test_test_client_methods,"Callable[[_, _, _],None]"
test_test_client_head,"Callable[[_, _],None]"
test_make_mocked_request,"Callable[[_],None]"
test_make_mocked_request_sslcontext,"Callable[[],None]"
test_make_mocked_request_unknown_extra_info,"Callable[[],None]"
test_make_mocked_request_app,"Callable[[],None]"
test_make_mocked_request_app_can_store_values,"Callable[[],None]"
test_make_mocked_request_match_info,"Callable[[],None]"
test_make_mocked_request_content,"Callable[[],None]"
test_make_mocked_request_transport,"Callable[[],None]"
test_test_client_props,"Callable[[_],None]"
test_test_client_raw_server_props,"Callable[[_],None]"
test_test_server_context_manager,"Callable[[_],None]"
test_client_unsupported_arg,"Callable[[],None]"
test_server_make_url_yarl_compatibility,"Callable[[_],None]"
test_testcase_no_app,"Callable[[_, _],None]"
test_server_context_manager,"Callable[[_, _],None]"
test_client_context_manager_response,"Callable[[_, _, _],None]"
test_custom_port,"Callable[[_, _, _],None]"
test_trace_config_ctx_default,"Callable[[_],None]"
test_trace_config_ctx_factory,"Callable[[_],None]"
test_trace_config_ctx_request_ctx,"Callable[[_],None]"
test_freeze,"Callable[[_],None]"
test_send,"Callable[[_, _, _, _],None]"
test_shutdown,"Callable[[_, _],None]"
test_double_shutdown,"Callable[[_, _],None]"
test_shutdown_wait_error_handler,"Callable[[_, _],None]"
test_close_after_response,"Callable[[_, _],None]"
test_connection_made,"Callable[[_],None]"
test_connection_made_with_tcp_keepaplive,"Callable[[_, _],None]"
test_connection_made_without_tcp_keepaplive,"Callable[[_],None]"
test_eof_received,"Callable[[_],None]"
test_connection_lost,"Callable[[_],None]"
test_srv_keep_alive,"Callable[[_],None]"
test_srv_keep_alive_disable,"Callable[[_],None]"
test_simple,"Callable[[_, _],None]"
test_bad_method,"Callable[[_, _],None]"
test_data_received_error,"Callable[[_, _],None]"
test_line_too_long,"Callable[[_, _],None]"
test_invalid_content_length,"Callable[[_, _],None]"
test_lingering,"Callable[[_, _],None]"
test_lingering_disabled,"Callable[[_, _, _],None]"
test_handle_cancel,"Callable[[_, _],None]"
test_handle_cancelled,"Callable[[_, _],None]"
test_handle_400,"Callable[[_, _, _],None]"
test_handle_500,"Callable[[_, _, _, _],None]"
test_keep_alive,"Callable[[_, _, _],None]"
test_srv_process_request_without_timeout,"Callable[[_, _],None]"
test_keep_alive_timeout_default,"Callable[[_],None]"
test_keep_alive_timeout_nondefault,"Callable[[_],None]"
test_supports_connect_method,"Callable[[_, _, _],None]"
test_content_length_0,"Callable[[_, _],None]"
test_rudimentary_transport,"Callable[[_],None]"
test_close,"Callable[[_, _],None]"
test_data_received_close,"Callable[[_],None]"
test_data_received_force_close,"Callable[[_],None]"
test__process_keepalive,"Callable[[_],None]"
test__process_keepalive_schedule_next,"Callable[[_],None]"
test__process_keepalive_force_close,"Callable[[_],None]"
test_two_data_received_without_waking_up_start_task,"Callable[[_],None]"
test_access_logger_format,"Callable[[],None]"
test_access_logger_atoms,"Callable[[_],None]"
test_access_logger_dicts,"Callable[[],None]"
test_access_logger_unix_socket,"Callable[[],None]"
test_logger_no_message,"Callable[[],None]"
test_logger_internal_error,"Callable[[],None]"
test_logger_no_transport,"Callable[[],None]"
test_logger_abc,"Callable[[],None]"
test_static_file_ok,"Callable[[_, _],None]"
test_static_file_ok_string_path,"Callable[[_, _],None]"
test_static_file_not_exists,"Callable[[_],None]"
test_static_file_name_too_long,"Callable[[_],None]"
test_static_file_upper_directory,"Callable[[_],None]"
test_static_file_with_content_type,"Callable[[_, _],None]"
test_static_file_custom_content_type,"Callable[[_, _],None]"
test_static_file_with_content_encoding,"Callable[[_, _],None]"
test_static_file_if_modified_since,"Callable[[_, _],None]"
test_static_file_if_modified_since_past_date,"Callable[[_, _],None]"
test_static_file_ssl,"Callable[[_, _],None]"
test_static_file_directory_traversal_attack,"Callable[[_],None]"
test_static_route_path_existence_check,"Callable[[],None]"
test_static_file_huge,"Callable[[_, _],None]"
test_static_file_range,"Callable[[_, _],None]"
test_static_file_range_beyond_eof,"Callable[[_, _],None]"
test_static_file_range_tail,"Callable[[_, _],None]"
test_static_file_invalid_range,"Callable[[_, _],None]"
test_static_file_compression,"Callable[[_, _],None]"
test_static_file_huge_cancel,"Callable[[_, _],None]"
test_static_file_huge_error,"Callable[[_, _],None]"
test_http_processing_error,"Callable[[_],None]"
test_del,"Callable[[_],None]"
test_close,"Callable[[_, _],None]"
test_wait_for_100_1,"Callable[[_, _],None]"
test_wait_for_100_2,"Callable[[_, _],None]"
test_repr,"Callable[[_, _],None]"
test_repr_non_ascii_url,"Callable[[],None]"
test_repr_non_ascii_reason,"Callable[[],None]"
test_url_obj_deprecated,"Callable[[],None]"
test_read_and_release_connection,"Callable[[_, _],None]"
test_read_and_release_connection_with_error,"Callable[[_, _],None]"
test_release,"Callable[[_, _],None]"
test_release_on_del,"Callable[[_, _],None]"
test_response_eof,"Callable[[_, _],None]"
test_response_eof_upgraded,"Callable[[_, _],None]"
test_response_eof_after_connection_detach,"Callable[[_, _],None]"
test_text,"Callable[[_, _],None]"
test_text_bad_encoding,"Callable[[_, _],None]"
test_text_custom_encoding,"Callable[[_, _],None]"
test_text_detect_encoding,"Callable[[_, _],None]"
test_text_detect_encoding_if_invalid_charset,"Callable[[_, _],None]"
test_text_after_read,"Callable[[_, _],None]"
test_json,"Callable[[_, _],None]"
test_json_extended_content_type,"Callable[[_, _],None]"
test_json_custom_content_type,"Callable[[_, _],None]"
test_json_custom_loader,"Callable[[_, _],None]"
test_json_invalid_content_type,"Callable[[_, _],None]"
test_json_no_content,"Callable[[_, _],None]"
test_json_override_encoding,"Callable[[_, _],None]"
test_get_encoding_unknown,"Callable[[_, _],None]"
test_raise_for_status_2xx,"Callable[[],None]"
test_raise_for_status_4xx,"Callable[[],None]"
test_resp_host,"Callable[[],None]"
test_content_type,"Callable[[],None]"
test_content_type_no_header,"Callable[[],None]"
test_charset,"Callable[[],None]"
test_charset_no_header,"Callable[[],None]"
test_charset_no_charset,"Callable[[],None]"
test_content_disposition_full,"Callable[[],None]"
test_content_disposition_no_parameters,"Callable[[],None]"
test_content_disposition_no_header,"Callable[[],None]"
test_response_request_info,"Callable[[],None]"
test_request_info_in_exception,"Callable[[],None]"
test_no_redirect_history_in_exception,"Callable[[],None]"
test_redirect_history_in_exception,"Callable[[],None]"
test_response_read_triggers_callback,"Callable[[_, _],None]"
test_response_real_url,"Callable[[_, _],None]"
test_response_links_comma_separated,"Callable[[_, _],None]"
test_response_links_multiple_headers,"Callable[[_, _],None]"
test_response_links_no_rel,"Callable[[_, _],None]"
test_response_links_quoted,"Callable[[_, _],None]"
test_response_links_relative,"Callable[[_, _],None]"
test_response_links_empty,"Callable[[_, _],None]"
test_using_gzip_if_header_present_and_file_available,"Callable[[_],None]"
test_gzip_if_header_not_present_and_file_available,"Callable[[_],None]"
test_gzip_if_header_not_present_and_file_not_available,"Callable[[_],None]"
test_gzip_if_header_present_and_file_not_available,"Callable[[_],None]"
test_parse_frame,"Callable[[_],None]"
test_parse_frame_length0,"Callable[[_],None]"
test_parse_frame_length2,"Callable[[_],None]"
test_parse_frame_length4,"Callable[[_],None]"
test_parse_frame_mask,"Callable[[_],None]"
test_parse_frame_header_reversed_bits,"Callable[[_, _],None]"
test_parse_frame_header_control_frame,"Callable[[_, _],None]"
test_parse_frame_header_payload_size,"Callable[[_, _],None]"
test_ping_frame,"Callable[[_, _],None]"
test_pong_frame,"Callable[[_, _],None]"
test_close_frame,"Callable[[_, _],None]"
test_close_frame_info,"Callable[[_, _],None]"
test_close_frame_invalid,"Callable[[_, _],None]"
test_close_frame_invalid_2,"Callable[[_, _],None]"
test_close_frame_unicode_err,"Callable[[_],None]"
test_unknown_frame,"Callable[[_, _],None]"
test_simple_text,"Callable[[_, _],None]"
test_simple_text_unicode_err,"Callable[[_],None]"
test_simple_binary,"Callable[[_, _],None]"
test_fragmentation_header,"Callable[[_, _],None]"
test_continuation,"Callable[[_, _],None]"
test_continuation_with_ping,"Callable[[_, _],None]"
test_continuation_err,"Callable[[_, _],None]"
test_continuation_with_close,"Callable[[_, _],None]"
test_continuation_with_close_unicode_err,"Callable[[_, _],None]"
test_continuation_with_close_bad_code,"Callable[[_, _],None]"
test_continuation_with_close_bad_payload,"Callable[[_, _],None]"
test_continuation_with_close_empty,"Callable[[_, _],None]"
test_websocket_mask_python,"Callable[[],None]"
test_websocket_mask_cython,"Callable[[],None]"
test_websocket_mask_python_empty,"Callable[[],None]"
test_websocket_mask_cython_empty,"Callable[[],None]"
test_msgtype_aliases,"Callable[[],None]"
test_parse_compress_frame_single,"Callable[[_],None]"
test_parse_compress_frame_multi,"Callable[[_],None]"
test_parse_compress_error_frame,"Callable[[_],None]"
test_parse_no_compress_frame_single,"Callable[[],None]"
test_msg_too_large,"Callable[[_],None]"
test_msg_too_large_not_fin,"Callable[[_],None]"
test_compressed_msg_too_large,"Callable[[_],None]"
test_stream_response_ctor,"Callable[[],None]"
test_stream_response_hashable,"Callable[[],None]"
test_stream_response_eq,"Callable[[],None]"
test_stream_response_is_mutable_mapping,"Callable[[],None]"
test_stream_response_delitem,"Callable[[],None]"
test_stream_response_len,"Callable[[],None]"
test_request_iter,"Callable[[],None]"
test_content_length,"Callable[[],None]"
test_content_length_setter,"Callable[[],None]"
test_content_length_setter_with_enable_chunked_encoding,"Callable[[],None]"
test_drop_content_length_header_on_setting_len_to_None,"Callable[[],None]"
test_set_content_length_to_None_on_non_set,"Callable[[],None]"
test_setting_content_type,"Callable[[],None]"
test_setting_charset,"Callable[[],None]"
test_default_charset,"Callable[[],None]"
test_reset_charset,"Callable[[],None]"
test_reset_charset_after_setting,"Callable[[],None]"
test_charset_without_content_type,"Callable[[],None]"
test_last_modified_initial,"Callable[[],None]"
test_last_modified_string,"Callable[[],None]"
test_last_modified_timestamp,"Callable[[],None]"
test_last_modified_datetime,"Callable[[],None]"
test_last_modified_reset,"Callable[[],None]"
test_start,"Callable[[],None]"
test_chunked_encoding,"Callable[[],None]"
test_enable_chunked_encoding_with_content_length,"Callable[[],None]"
test_chunk_size,"Callable[[],None]"
test_chunked_encoding_forbidden_for_http_10,"Callable[[],None]"
test_compression_no_accept,"Callable[[],None]"
test_force_compression_no_accept_backwards_compat,"Callable[[],None]"
test_force_compression_false_backwards_compat,"Callable[[],None]"
test_compression_default_coding,"Callable[[],None]"
test_force_compression_deflate,"Callable[[],None]"
test_force_compression_no_accept_deflate,"Callable[[],None]"
test_force_compression_gzip,"Callable[[],None]"
test_force_compression_no_accept_gzip,"Callable[[],None]"
test_change_content_length_if_compression_enabled,"Callable[[],None]"
test_set_content_length_if_compression_enabled,"Callable[[],None]"
test_remove_content_length_if_compression_enabled_http11,"Callable[[],None]"
test_remove_content_length_if_compression_enabled_http10,"Callable[[],None]"
test_force_compression_identity,"Callable[[],None]"
test_force_compression_identity_response,"Callable[[],None]"
test_rm_content_length_if_compression_http11,"Callable[[],None]"
test_rm_content_length_if_compression_http10,"Callable[[],None]"
test_content_length_on_chunked,"Callable[[],None]"
test_write_non_byteish,"Callable[[],None]"
test_write_before_start,"Callable[[],None]"
test_cannot_write_after_eof,"Callable[[],None]"
test___repr___after_eof,"Callable[[],None]"
test_cannot_write_eof_before_headers,"Callable[[],None]"
test_cannot_write_eof_twice,"Callable[[],None]"
test_force_close,"Callable[[],None]"
test_response_output_length,"Callable[[],None]"
test_response_cookies,"Callable[[],None]"
test_response_cookie_path,"Callable[[],None]"
test_response_cookie__issue_del_cookie,"Callable[[],None]"
test_cookie_set_after_del,"Callable[[],None]"
test_set_status_with_reason,"Callable[[],None]"
test_start_force_close,"Callable[[],None]"
test___repr__,"Callable[[],None]"
test___repr___not_prepared,"Callable[[],None]"
test_keep_alive_http10_default,"Callable[[],None]"
test_keep_alive_http10_switched_on,"Callable[[],None]"
test_keep_alive_http09,"Callable[[],None]"
test_prepare_twice,"Callable[[],None]"
test_prepare_calls_signal,"Callable[[],None]"
test_response_ctor,"Callable[[],None]"
test_ctor_with_headers_and_status,"Callable[[],None]"
test_ctor_content_type,"Callable[[],None]"
test_ctor_text_body_combined,"Callable[[],None]"
test_ctor_text,"Callable[[],None]"
test_ctor_charset,"Callable[[],None]"
test_ctor_charset_default_utf8,"Callable[[],None]"
test_ctor_charset_in_content_type,"Callable[[],None]"
test_ctor_charset_without_text,"Callable[[],None]"
test_ctor_content_type_with_extra,"Callable[[],None]"
test_ctor_both_content_type_param_and_header_with_text,"Callable[[],None]"
test_ctor_both_charset_param_and_header_with_text,"Callable[[],None]"
test_ctor_both_content_type_param_and_header,"Callable[[],None]"
test_ctor_both_charset_param_and_header,"Callable[[],None]"
test_assign_nonbyteish_body,"Callable[[],None]"
test_assign_nonstr_text,"Callable[[],None]"
test_response_set_content_length,"Callable[[],None]"
test_send_headers_for_empty_body,"Callable[[_, _],None]"
test_render_with_body,"Callable[[_, _],None]"
test_send_set_cookie_header,"Callable[[_, _],None]"
test_consecutive_write_eof,"Callable[[],None]"
test_set_text_with_content_type,"Callable[[],None]"
test_set_text_with_charset,"Callable[[],None]"
test_default_content_type_in_stream_response,"Callable[[],None]"
test_default_content_type_in_response,"Callable[[],None]"
test_content_type_with_set_text,"Callable[[],None]"
test_content_type_with_set_body,"Callable[[],None]"
test_started_when_not_started,"Callable[[],None]"
test_started_when_started,"Callable[[],None]"
test_drain_before_start,"Callable[[],None]"
test_changing_status_after_prepare_raises,"Callable[[],None]"
test_nonstr_text_in_ctor,"Callable[[],None]"
test_text_in_ctor_with_content_type,"Callable[[],None]"
test_text_in_ctor_with_content_type_header,"Callable[[],None]"
test_text_in_ctor_with_content_type_header_multidict,"Callable[[],None]"
test_body_in_ctor_with_content_type_header_multidict,"Callable[[],None]"
test_text_with_empty_payload,"Callable[[],None]"
test_response_with_content_length_header_without_body,"Callable[[],None]"
test_response_with_immutable_headers,"Callable[[],None]"
test_content_type_is_application_json_by_default,"Callable[[_],None]"
test_passing_text_only,"Callable[[_],None]"
test_data_and_text_raises_value_error,"Callable[[_],None]"
test_data_and_body_raises_value_error,"Callable[[_],None]"
test_text_is_json_encoded,"Callable[[_],None]"
test_content_type_is_overrideable,"Callable[[_],None]"
test_simple_server,"Callable[[_, _],None]"
test_raw_server_handler_timeout,"Callable[[_, _],None]"
test_aiohttp_plugin,"Callable[[_],None]"
test_warning_checks,"Callable[[_],None]"
test_aiohttp_plugin_async_fixture,"Callable[[_, _],None]"
test_aiohttp_plugin_async_gen_fixture,"Callable[[_],None]"
test_tcp_nodelay_exception,"Callable[[],None]"
test_tcp_nodelay_enable,"Callable[[],None]"
test_tcp_nodelay_enable_and_disable,"Callable[[],None]"
test_tcp_nodelay_enable_ipv6,"Callable[[],None]"
test_tcp_nodelay_enable_unix,"Callable[[],None]"
test_tcp_nodelay_enable_no_socket,"Callable[[],None]"
test_tcp_cork_enable,"Callable[[],None]"
test_set_cork_enable_and_disable,"Callable[[],None]"
test_set_cork_enable_ipv6,"Callable[[],None]"
test_set_cork_enable_unix,"Callable[[],None]"
test_set_cork_enable_no_socket,"Callable[[],None]"
test_set_cork_exception,"Callable[[],None]"
test_subclass,"Callable[[_],None]"
test_iface,"Callable[[_],None]"
test_ctor_default,"Callable[[_],None]"
test_ctor,"Callable[[_],None]"
test_ctor_copy_list,"Callable[[_],None]"
test_freeze,"Callable[[_],None]"
test_repr,"Callable[[_],None]"
test_getitem,"Callable[[_],None]"
test_setitem,"Callable[[_],None]"
test_delitem,"Callable[[_],None]"
test_len,"Callable[[_],None]"
test_iter,"Callable[[_],None]"
test_reversed,"Callable[[_],None]"
test_eq,"Callable[[_],None]"
test_ne,"Callable[[_],None]"
test_le,"Callable[[_],None]"
test_lt,"Callable[[_],None]"
test_ge,"Callable[[_],None]"
test_gt,"Callable[[_],None]"
test_insert,"Callable[[_],None]"
test_frozen_setitem,"Callable[[_],None]"
test_frozen_delitem,"Callable[[_],None]"
test_frozen_insert,"Callable[[_],None]"
test_contains,"Callable[[_],None]"
test_iadd,"Callable[[_],None]"
test_iadd_frozen,"Callable[[_],None]"
test_index,"Callable[[_],None]"
test_remove,"Callable[[_],None]"
test_remove_frozen,"Callable[[_],None]"
test_clear,"Callable[[_],None]"
test_clear_frozen,"Callable[[_],None]"
test_extend,"Callable[[_],None]"
test_extend_frozen,"Callable[[_],None]"
test_reverse,"Callable[[_],None]"
test_reverse_frozen,"Callable[[_],None]"
test_pop,"Callable[[_],None]"
test_pop_default,"Callable[[_],None]"
test_pop_frozen,"Callable[[_],None]"
test_append,"Callable[[_],None]"
test_append_frozen,"Callable[[_],None]"
test_count,"Callable[[_],None]"
test_payloadwriter_properties,"Callable[[_, _, _],None]"
test_write_payload_eof,"Callable[[_, _, _],None]"
test_write_payload_chunked,"Callable[[_, _, _, _],None]"
test_write_payload_chunked_multiple,"Callable[[_, _, _, _],None]"
test_write_payload_length,"Callable[[_, _, _],None]"
test_write_payload_chunked_filter,"Callable[[_, _, _],None]"
test_write_payload_deflate_compression,"Callable[[_, _, _],None]"
test_write_drain,"Callable[[_, _, _],None]"
test_write_calls_callback,"Callable[[_, _, _],None]"
test_write_eof_calls_callback,"Callable[[_, _, _],None]"
test_write_to_closing_transport,"Callable[[_, _, _],None]"
test_drain,"Callable[[_, _, _],None]"
test_drain_no_transport,"Callable[[_, _, _],None]"
test_create_waiter,"Callable[[_],None]"
test_ctor_global_loop,"Callable[[_],None]"
test_at_eof,"Callable[[_],None]"
test_wait_eof,"Callable[[_],None]"
test_wait_eof_eof,"Callable[[_],None]"
test_feed_empty_data,"Callable[[_],None]"
test_feed_nonempty_data,"Callable[[_],None]"
test_read_zero,"Callable[[_],None]"
test_read,"Callable[[_],None]"
test_read_line_breaks,"Callable[[_],None]"
test_read_all,"Callable[[_],None]"
test_read_up_to,"Callable[[_],None]"
test_read_eof,"Callable[[_],None]"
test_read_eof_infinite,"Callable[[_],None]"
test_read_eof_unread_data_no_warning,"Callable[[_],None]"
test_read_until_eof,"Callable[[_],None]"
test_read_exception,"Callable[[_],None]"
test_readline,"Callable[[_],None]"
test_readline_limit_with_existing_data,"Callable[[_],None]"
test_readline_limit,"Callable[[_],None]"
test_readline_nolimit_nowait,"Callable[[_],None]"
test_readline_eof,"Callable[[_],None]"
test_readline_empty_eof,"Callable[[_],None]"
test_readline_read_byte_count,"Callable[[_],None]"
test_readline_exception,"Callable[[_],None]"
test_readexactly_zero_or_less,"Callable[[_],None]"
test_readexactly,"Callable[[_],None]"
test_readexactly_eof,"Callable[[_],None]"
test_readexactly_exception,"Callable[[_],None]"
test_unread_data,"Callable[[_],None]"
test_exception,"Callable[[_],None]"
test_exception_waiter,"Callable[[_],None]"
test_exception_cancel,"Callable[[_],None]"
test_readany_eof,"Callable[[_],None]"
test_readany_empty_eof,"Callable[[_],None]"
test_readany_exception,"Callable[[_],None]"
test_read_nowait,"Callable[[_],None]"
test_read_nowait_n,"Callable[[_],None]"
test_read_nowait_exception,"Callable[[_],None]"
test_read_nowait_waiter,"Callable[[_],None]"
test_readchunk,"Callable[[_],None]"
test_readchunk_wait_eof,"Callable[[_],None]"
test_begin_and_end_chunk_receiving,"Callable[[_],None]"
test_end_chunk_receiving_without_begin,"Callable[[_],None]"
test_readchunk_with_unread,"Callable[[_],None]"
test_readchunk_with_other_read_calls,"Callable[[_],None]"
test_readchunk_separate_http_chunk_tail,"Callable[[_],None]"
test___repr__,"Callable[[_],None]"
test___repr__nondefault_limit,"Callable[[_],None]"
test___repr__eof,"Callable[[_],None]"
test___repr__data,"Callable[[_],None]"
test___repr__exception,"Callable[[_],None]"
test___repr__waiter,"Callable[[_],None]"
test_unread_empty,"Callable[[_],None]"
test_empty_stream_reader,"Callable[[],None]"
test_is_eof,"Callable[[_, _],None]"
test_at_eof,"Callable[[_, _],None]"
test_feed_data,"Callable[[_, _],None]"
test_feed_eof,"Callable[[_, _],None]"
test_read,"Callable[[_, _],None]"
test_read_eof,"Callable[[_, _],None]"
test_read_cancelled,"Callable[[_, _],None]"
test_read_until_eof,"Callable[[_, _],None]"
test_read_exc,"Callable[[_, _],None]"
test_read_exception,"Callable[[_, _],None]"
test_read_exception_with_data,"Callable[[_, _],None]"
test_read_exception_on_wait,"Callable[[_, _],None]"
test_exception,"Callable[[_, _],None]"
test_exception_waiter,"Callable[[_, _],None]"
test_feed_data_waiters,"Callable[[_],None]"
test_feed_data_completed_waiters,"Callable[[_],None]"
test_feed_eof_waiters,"Callable[[_],None]"
test_feed_eof_cancelled,"Callable[[_],None]"
test_on_eof,"Callable[[_],None]"
test_on_eof_empty_reader,"Callable[[],None]"
test_on_eof_exc_in_callback,"Callable[[_],None]"
test_on_eof_exc_in_callback_empty_stream_reader,"Callable[[],None]"
test_on_eof_eof_is_set,"Callable[[_],None]"
test_on_eof_eof_is_set_exception,"Callable[[_],None]"
test_set_exception,"Callable[[_],None]"
test_set_exception_cancelled,"Callable[[_],None]"
test_set_exception_eof_callbacks,"Callable[[_],None]"
test_stream_reader_lines,"Callable[[],None]"
test_stream_reader_chunks_complete,"Callable[[],None]"
test_stream_reader_chunks_incomplete,"Callable[[],None]"
test_data_queue_empty,"Callable[[],None]"
test_data_queue_items,"Callable[[],None]"
test_stream_reader_iter_any,"Callable[[],None]"
test_stream_reader_iter,"Callable[[],None]"
test_stream_reader_iter_chunks_no_chunked_encoding,"Callable[[],None]"
test_stream_reader_iter_chunks_chunked_encoding,"Callable[[_],None]"
test_app_ctor,"Callable[[],None]"
test_app_call,"Callable[[],None]"
test_app_default_loop,"Callable[[],None]"
test_set_loop,"Callable[[],None]"
test_set_loop_default_loop,"Callable[[],None]"
test_set_loop_with_different_loops,"Callable[[],None]"
test_app_make_handler_debug_exc,"Callable[[_, _],None]"
test_app_make_handler_args,"Callable[[_],None]"
test_app_make_handler_access_log_class,"Callable[[_],None]"
test_app_make_handler_raises_deprecation_warning,"Callable[[],None]"
test_app_register_on_finish,"Callable[[],None]"
test_app_register_coro,"Callable[[],None]"
test_non_default_router,"Callable[[],None]"
test_logging,"Callable[[],None]"
test_on_shutdown,"Callable[[],None]"
test_on_startup,"Callable[[],None]"
test_app_delitem,"Callable[[],None]"
test_app_freeze,"Callable[[],None]"
test_equality,"Callable[[],None]"
test_app_run_middlewares,"Callable[[],None]"
test_subapp_pre_frozen_after_adding,"Callable[[],None]"
test_app_inheritance,"Callable[[],None]"
test_app_custom_attr,"Callable[[],None]"
test_cleanup_ctx,"Callable[[],None]"
test_cleanup_ctx_exception_on_startup,"Callable[[],None]"
test_cleanup_ctx_exception_on_cleanup,"Callable[[],None]"
test_cleanup_ctx_exception_on_cleanup_multiple,"Callable[[],None]"
test_cleanup_ctx_multiple_yields,"Callable[[],None]"
test_subapp_chained_config_dict_visibility,"Callable[[_],None]"
test_subapp_chained_config_dict_overriding,"Callable[[_],None]"
test_subapp_on_startup,"Callable[[_],None]"
test_not_get,"Callable[[],None]"
test_no_upgrade,"Callable[[],None]"
test_no_connection,"Callable[[],None]"
test_protocol_version_unset,"Callable[[],None]"
test_protocol_version_not_supported,"Callable[[],None]"
test_protocol_key_not_present,"Callable[[],None]"
test_protocol_key_invalid,"Callable[[],None]"
test_protocol_key_bad_size,"Callable[[],None]"
test_handshake_ok,"Callable[[],None]"
test_handshake_protocol,"Callable[[],None]"
test_handshake_protocol_agreement,"Callable[[],None]"
test_handshake_protocol_unsupported,"Callable[[_],None]"
test_handshake_compress,"Callable[[],None]"
test_handshake_compress_server_notakeover,"Callable[[],None]"
test_handshake_compress_client_notakeover,"Callable[[],None]"
test_handshake_compress_wbits,"Callable[[],None]"
test_handshake_compress_wbits_error,"Callable[[],None]"
test_handshake_compress_bad_ext,"Callable[[],None]"
test_handshake_compress_multi_ext_bad,"Callable[[],None]"
test_handshake_compress_multi_ext_wbits,"Callable[[],None]"
test_date_parsing,"Callable[[],None]"
test_domain_matching,"Callable[[],None]"
test_path_matching,"Callable[[],None]"
test_constructor,"Callable[[_, _, _],None]"
test_save_load,"Callable[[_, _, _],None]"
test_update_cookie_with_unicode_domain,"Callable[[_],None]"
test_filter_cookie_with_unicode_domain,"Callable[[_],None]"
test_domain_filter_ip_cookie_send,"Callable[[_],None]"
test_domain_filter_ip_cookie_receive,"Callable[[_],None]"
test_preserving_ip_domain_cookies,"Callable[[_],None]"
test_preserving_quoted_cookies,"Callable[[_],None]"
test_ignore_domain_ending_with_dot,"Callable[[_],None]"
test_domain_filter_same_host,"Callable[[_],None]"
test_domain_filter_same_host_and_subdomain,"Callable[[_],None]"
test_domain_filter_same_host_diff_subdomain,"Callable[[_],None]"
test_domain_filter_diff_host,"Callable[[_],None]"
test_domain_filter_host_only,"Callable[[_],None]"
test_secure_filter,"Callable[[_],None]"
test_path_filter_root,"Callable[[_],None]"
test_path_filter_folder,"Callable[[_],None]"
test_path_filter_file,"Callable[[_],None]"
test_path_filter_subfolder,"Callable[[_],None]"
test_path_filter_subsubfolder,"Callable[[_],None]"
test_path_filter_different_folder,"Callable[[_],None]"
test_path_value,"Callable[[_],None]"
test_expires,"Callable[[_],None]"
test_max_age,"Callable[[_],None]"
test_invalid_values,"Callable[[_],None]"
test_cookie_not_expired_when_added_after_removal,"Callable[[_],None]"
test_dummy_cookie_jar,"Callable[[],None]"
test_loop,"Callable[[],None]"
test_pause_writing,"Callable[[],None]"
test_resume_writing_no_waiters,"Callable[[],None]"
test_connection_made,"Callable[[],None]"
test_connection_lost_not_paused,"Callable[[],None]"
test_connection_lost_paused_without_waiter,"Callable[[],None]"
test_drain_lost,"Callable[[],None]"
test_drain_not_paused,"Callable[[],None]"
test_resume_drain_waited,"Callable[[],None]"
test_lost_drain_waited_ok,"Callable[[],None]"
test_lost_drain_waited_exception,"Callable[[],None]"
test_lost_drain_cancelled,"Callable[[],None]"
test_resume_drain_cancelled,"Callable[[],None]"
test_read,"Callable[[_, _],None]"
test_read_resume_paused,"Callable[[_, _],None]"
test_readline,"Callable[[_, _],None]"
test_readline_resume_paused,"Callable[[_, _],None]"
test_readany,"Callable[[_, _],None]"
test_readany_resume_paused,"Callable[[_, _],None]"
test_readchunk,"Callable[[_, _],None]"
test_readchunk_resume_paused,"Callable[[_, _],None]"
test_readexactly,"Callable[[_, _],None]"
test_feed_data,"Callable[[_, _],None]"
test_read_nowait,"Callable[[_, _],None]"
test_feed_pause,"Callable[[_, _],None]"
test_resume_on_read,"Callable[[_, _],None]"
test_ws_connect,"Callable[[_, _, _],None]"
test_ws_connect_with_origin,"Callable[[_, _],None]"
test_ws_connect_custom_response,"Callable[[_, _, _],None]"
test_ws_connect_err_status,"Callable[[_, _, _],None]"
test_ws_connect_err_upgrade,"Callable[[_, _, _],None]"
test_ws_connect_err_conn,"Callable[[_, _, _],None]"
test_ws_connect_err_challenge,"Callable[[_, _, _],None]"
test_ws_connect_common_headers,"Callable[[_, _, _],None]"
test_connection,"Callable[[],None]"
test_close,"Callable[[_, _, _],None]"
test_close_eofstream,"Callable[[_, _, _],None]"
test_close_exc,"Callable[[_, _, _],None]"
test_close_exc2,"Callable[[_, _, _],None]"
test_send_data_after_close,"Callable[[_, _, _, _],None]"
test_send_data_type_errors,"Callable[[_, _, _],None]"
test_reader_read_exception,"Callable[[_, _, _],None]"
test_receive_runtime_err,"Callable[[_],None]"
test_ws_connect_close_resp_on_err,"Callable[[_, _, _],None]"
test_ws_connect_non_overlapped_protocols,"Callable[[_, _, _],None]"
test_ws_connect_non_overlapped_protocols_2,"Callable[[_, _, _],None]"
test_ws_connect_deflate,"Callable[[_, _, _],None]"
test_ws_connect_deflate_per_message,"Callable[[_, _, _],None]"
test_ws_connect_deflate_server_not_support,"Callable[[_, _, _],None]"
test_ws_connect_deflate_notakeover,"Callable[[_, _, _],None]"
test_ws_connect_deflate_client_wbits,"Callable[[_, _, _],None]"
test_ws_connect_deflate_client_wbits_bad,"Callable[[_, _, _],None]"
test_ws_connect_deflate_server_ext_bad,"Callable[[_, _, _],None]"
test_all_http_exceptions_exported,"Callable[[],None]"
test_HTTPOk,"Callable[[_, _],None]"
test_terminal_classes_has_status_code,"Callable[[],None]"
test_HTTPFound,"Callable[[_, _],None]"
test_HTTPFound_empty_location,"Callable[[],None]"
test_HTTPMethodNotAllowed,"Callable[[_, _],None]"
test_override_body_with_text,"Callable[[],None]"
test_override_body_with_binary,"Callable[[],None]"
test_default_body,"Callable[[],None]"
test_empty_body_204,"Callable[[],None]"
test_empty_body_205,"Callable[[],None]"
test_empty_body_304,"Callable[[],None]"
test_link_header_451,"Callable[[_, _],None]"
test_HTTPException_retains_cause,"Callable[[],None]"
test_parse_headers,"Callable[[_],None]"
test_parse,"Callable[[_],None]"
test_parse_body,"Callable[[_],None]"
test_parse_body_with_CRLF,"Callable[[_],None]"
test_parse_delayed,"Callable[[_],None]"
test_headers_multi_feed,"Callable[[_],None]"
test_headers_split_field,"Callable[[_],None]"
test_parse_headers_multi,"Callable[[_],None]"
test_conn_default_1_0,"Callable[[_],None]"
test_conn_default_1_1,"Callable[[_],None]"
test_conn_close,"Callable[[_],None]"
test_conn_close_1_0,"Callable[[_],None]"
test_conn_keep_alive_1_0,"Callable[[_],None]"
test_conn_keep_alive_1_1,"Callable[[_],None]"
test_conn_other_1_0,"Callable[[_],None]"
test_conn_other_1_1,"Callable[[_],None]"
test_request_chunked,"Callable[[_],None]"
test_conn_upgrade,"Callable[[_],None]"
test_compression_empty,"Callable[[_],None]"
test_compression_deflate,"Callable[[_],None]"
test_compression_gzip,"Callable[[_],None]"
test_compression_brotli,"Callable[[_],None]"
test_compression_unknown,"Callable[[_],None]"
test_headers_connect,"Callable[[_],None]"
test_headers_old_websocket_key1,"Callable[[_],None]"
test_headers_content_length_err_1,"Callable[[_],None]"
test_headers_content_length_err_2,"Callable[[_],None]"
test_invalid_header,"Callable[[_],None]"
test_invalid_name,"Callable[[_],None]"
test_max_header_field_size,"Callable[[_, _],None]"
test_max_header_field_size_under_limit,"Callable[[_],None]"
test_max_header_value_size,"Callable[[_, _],None]"
test_max_header_value_size_under_limit,"Callable[[_],None]"
test_max_header_value_size_continuation,"Callable[[_, _],None]"
test_max_header_value_size_continuation_under_limit,"Callable[[_],None]"
test_http_request_parser,"Callable[[_],None]"
test_http_request_bad_status_line,"Callable[[_],None]"
test_http_request_upgrade,"Callable[[_],None]"
test_http_request_parser_utf8,"Callable[[_],None]"
test_http_request_parser_non_utf8,"Callable[[_],None]"
test_http_request_parser_two_slashes,"Callable[[_],None]"
test_http_request_parser_bad_method,"Callable[[_],None]"
test_http_request_parser_bad_version,"Callable[[_],None]"
test_http_request_max_status_line,"Callable[[_, _],None]"
test_http_request_max_status_line_under_limit,"Callable[[_],None]"
test_http_response_parser_utf8,"Callable[[_],None]"
test_http_response_parser_bad_status_line_too_long,"Callable[[_, _],None]"
test_http_response_parser_status_line_under_limit,"Callable[[_],None]"
test_http_response_parser_bad_version,"Callable[[_],None]"
test_http_response_parser_no_reason,"Callable[[_],None]"
test_http_response_parser_bad,"Callable[[_],None]"
test_http_response_parser_code_under_100,"Callable[[_],None]"
test_http_response_parser_code_above_999,"Callable[[_],None]"
test_http_response_parser_code_not_int,"Callable[[_],None]"
test_http_request_chunked_payload,"Callable[[_],None]"
test_http_request_chunked_payload_and_next_message,"Callable[[_],None]"
test_http_request_chunked_payload_chunks,"Callable[[_],None]"
test_parse_chunked_payload_chunk_extension,"Callable[[_],None]"
test_parse_payload_response_without_body,"Callable[[_, _, _],None]"
test_parse_length_payload,"Callable[[_],None]"
test_parse_no_length_payload,"Callable[[_],None]"
test_partial_url,"Callable[[_],None]"
test_url_parse_non_strict_mode,"Callable[[_],None]"
test_parse_eof_payload,"Callable[[_, _],None]"
test_parse_no_body,"Callable[[_, _],None]"
test_parse_length_payload_eof,"Callable[[_, _],None]"
test_parse_chunked_payload_size_error,"Callable[[_, _],None]"
test_http_payload_parser_length,"Callable[[_, _],None]"
test_http_payload_parser_deflate,"Callable[[_, _],None]"
test_http_payload_parser_deflate_no_wbits,"Callable[[_, _],None]"
test_http_payload_parser_length_zero,"Callable[[_, _],None]"
test_http_payload_brotli,"Callable[[_, _],None]"
test_feed_data,"Callable[[_, _],None]"
test_feed_data_err,"Callable[[_, _],None]"
test_feed_eof,"Callable[[_, _],None]"
test_feed_eof_err_deflate,"Callable[[_, _],None]"
test_feed_eof_no_err_gzip,"Callable[[_, _],None]"
test_feed_eof_no_err_brotli,"Callable[[_, _],None]"
test_empty_body,"Callable[[_, _],None]"
test_connect,"Callable[[_, _],None]"
test_proxy_headers,"Callable[[_, _],None]"
test_proxy_auth,"Callable[[_],None]"
test_proxy_dns_error,"Callable[[_],None]"
test_proxy_connection_error,"Callable[[_],None]"
test_https_connect,"Callable[[_, _],None]"
test_https_connect_certificate_error,"Callable[[_, _],None]"
test_https_connect_ssl_error,"Callable[[_, _],None]"
test_https_connect_runtime_error,"Callable[[_, _],None]"
test_https_connect_http_proxy_error,"Callable[[_, _],None]"
test_https_connect_resp_start_error,"Callable[[_, _],None]"
test_request_port,"Callable[[_, _],None]"
test_proxy_auth_property,"Callable[[_],None]"
test_proxy_auth_property_default,"Callable[[_],None]"
test_https_connect_pass_ssl_context,"Callable[[_, _],None]"
test_https_auth,"Callable[[_, _],None]"
test_keepalive_two_requests_success,"Callable[[_],None]"
test_keepalive_response_released,"Callable[[_],None]"
test_keepalive_server_force_close_connection,"Callable[[_],None]"
test_release_early,"Callable[[_],None]"
test_HTTP_304,"Callable[[_],None]"
test_HTTP_304_WITH_BODY,"Callable[[_],None]"
test_auto_header_user_agent,"Callable[[_],None]"
test_skip_auto_headers_user_agent,"Callable[[_],None]"
test_skip_default_auto_headers_user_agent,"Callable[[_],None]"
test_skip_auto_headers_content_type,"Callable[[_],None]"
test_post_data_bytesio,"Callable[[_],None]"
test_post_data_with_bytesio_file,"Callable[[_],None]"
test_post_data_stringio,"Callable[[_],None]"
test_post_data_textio_encoding,"Callable[[_],None]"
test_ssl_client,"Callable[[_, _, _],None]"
test_format_task_get,"Callable[[_],None]"
test_str_params,"Callable[[_],None]"
test_drop_params_on_redirect,"Callable[[_],None]"
test_drop_fragment_on_redirect,"Callable[[_],None]"
test_drop_fragment,"Callable[[_],None]"
test_history,"Callable[[_],None]"
test_keepalive_closed_by_server,"Callable[[_],None]"
test_wait_for,"Callable[[_],None]"
test_raw_headers,"Callable[[_],None]"
test_host_header_first,"Callable[[_],None]"
test_empty_header_values,"Callable[[_],None]"
test_204_with_gzipped_content_encoding,"Callable[[_],None]"
test_timeout_on_reading_headers,"Callable[[_, _],None]"
test_timeout_on_conn_reading_headers,"Callable[[_, _],None]"
test_timeout_on_session_read_timeout,"Callable[[_, _],None]"
test_timeout_on_reading_data,"Callable[[_, _],None]"
test_timeout_none,"Callable[[_, _],None]"
test_readline_error_on_conn_close,"Callable[[_],None]"
test_no_error_on_conn_close_if_eof,"Callable[[_],None]"
test_error_not_overwrote_on_conn_close,"Callable[[_],None]"
test_HTTP_200_OK_METHOD,"Callable[[_],None]"
test_HTTP_200_OK_METHOD_connector,"Callable[[_],None]"
test_HTTP_302_REDIRECT_GET,"Callable[[_],None]"
test_HTTP_302_REDIRECT_HEAD,"Callable[[_],None]"
test_HTTP_302_REDIRECT_NON_HTTP,"Callable[[_],None]"
test_HTTP_302_REDIRECT_POST,"Callable[[_],None]"
test_HTTP_302_REDIRECT_POST_with_content_length_hdr,"Callable[[_],None]"
test_HTTP_307_REDIRECT_POST,"Callable[[_],None]"
test_HTTP_308_PERMANENT_REDIRECT_POST,"Callable[[_],None]"
test_HTTP_302_max_redirects,"Callable[[_],None]"
test_HTTP_200_GET_WITH_PARAMS,"Callable[[_],None]"
test_HTTP_200_GET_WITH_MultiDict_PARAMS,"Callable[[_],None]"
test_HTTP_200_GET_WITH_MIXED_PARAMS,"Callable[[_],None]"
test_POST_DATA,"Callable[[_],None]"
test_POST_DATA_with_explicit_formdata,"Callable[[_],None]"
test_POST_DATA_with_charset,"Callable[[_],None]"
test_POST_DATA_formdats_with_charset,"Callable[[_],None]"
test_POST_DATA_with_charset_post,"Callable[[_],None]"
test_POST_DATA_with_context_transfer_encoding,"Callable[[_],None]"
test_POST_MultiDict,"Callable[[_],None]"
test_POST_DATA_DEFLATE,"Callable[[_],None]"
test_POST_FILES,"Callable[[_, _],None]"
test_POST_FILES_DEFLATE,"Callable[[_, _],None]"
test_POST_bytes,"Callable[[_],None]"
test_POST_bytes_too_large,"Callable[[_],None]"
test_POST_FILES_STR,"Callable[[_, _],None]"
test_POST_FILES_STR_SIMPLE,"Callable[[_, _],None]"
test_POST_FILES_LIST,"Callable[[_, _],None]"
test_POST_FILES_CT,"Callable[[_, _],None]"
test_POST_FILES_SINGLE,"Callable[[_, _],None]"
test_POST_FILES_SINGLE_content_disposition,"Callable[[_, _],None]"
test_POST_FILES_SINGLE_BINARY,"Callable[[_, _],None]"
test_POST_FILES_IO,"Callable[[_],None]"
test_POST_FILES_IO_WITH_PARAMS,"Callable[[_],None]"
test_POST_FILES_WITH_DATA,"Callable[[_, _],None]"
test_POST_STREAM_DATA,"Callable[[_, _],None]"
test_POST_STREAM_DATA_no_params,"Callable[[_, _],None]"
test_json,"Callable[[_],None]"
test_json_custom,"Callable[[_],None]"
test_expect_continue,"Callable[[_],None]"
test_encoding_deflate,"Callable[[_],None]"
test_encoding_deflate_nochunk,"Callable[[_],None]"
test_encoding_gzip,"Callable[[_],None]"
test_encoding_gzip_write_by_chunks,"Callable[[_],None]"
test_encoding_gzip_nochunk,"Callable[[_],None]"
test_bad_payload_compression,"Callable[[_],None]"
test_bad_payload_chunked_encoding,"Callable[[_],None]"
test_bad_payload_content_length,"Callable[[_],None]"
test_payload_content_length_by_chunks,"Callable[[_],None]"
test_chunked,"Callable[[_],None]"
test_shortcuts,"Callable[[_],None]"
test_cookies,"Callable[[_],None]"
test_morsel_with_attributes,"Callable[[_],None]"
test_set_cookies,"Callable[[_],None]"
test_request_conn_error,"Callable[[],None]"
test_broken_connection,"Callable[[_],None]"
test_broken_connection_2,"Callable[[_],None]"
test_custom_headers,"Callable[[_],None]"
test_redirect_to_absolute_url,"Callable[[_],None]"
test_redirect_without_location_header,"Callable[[_],None]"
test_chunked_deprecated,"Callable[[_],None]"
test_raise_for_status,"Callable[[_],None]"
test_raise_for_status_per_request,"Callable[[_],None]"
test_raise_for_status_disable_per_request,"Callable[[_],None]"
test_request_raise_for_status_default,"Callable[[_],None]"
test_request_raise_for_status_disabled,"Callable[[_],None]"
test_request_raise_for_status_enabled,"Callable[[_],None]"
test_invalid_idna,"Callable[[],None]"
test_creds_in_auth_and_url,"Callable[[],None]"
test_drop_auth_on_redirect_to_other_host,"Callable[[_],None]"
test_async_with_session,"Callable[[],None]"
test_session_close_awaitable,"Callable[[],None]"
test_close_run_until_complete_not_deprecated,"Callable[[],None]"
test_close_resp_on_error_async_with_session,"Callable[[_],None]"
test_release_resp_on_normal_exit_from_cm,"Callable[[_],None]"
test_non_close_detached_session_on_error_cm,"Callable[[_],None]"
test_close_detached_session_on_non_existing_addr,"Callable[[],None]"
test_aiohttp_request_context_manager,"Callable[[_],None]"
test_aiohttp_request_ctx_manager_not_found,"Callable[[],None]"
test_aiohttp_request_coroutine,"Callable[[_],None]"
test_yield_from_in_session_request,"Callable[[_],None]"
test_close_context_manager,"Callable[[_],None]"
test_session_auth,"Callable[[_],None]"
test_session_auth_override,"Callable[[_],None]"
test_session_auth_header_conflict,"Callable[[_],None]"
test_session_headers,"Callable[[_],None]"
test_session_headers_merge,"Callable[[_],None]"
test_multidict_headers,"Callable[[_],None]"
test_request_conn_closed,"Callable[[_],None]"
test_dont_close_explicit_connector,"Callable[[_],None]"
test_server_close_keepalive_connection,"Callable[[],None]"
test_handle_keepalive_on_closed_connection,"Callable[[],None]"
test_await_after_cancelling,"Callable[[_],None]"
test_async_payload_generator,"Callable[[_],None]"
test_read_from_closed_response,"Callable[[_],None]"
test_read_from_closed_response2,"Callable[[_],None]"
test_read_from_closed_content,"Callable[[_],None]"
test_read_timeout,"Callable[[_],None]"
test_read_timeout_on_prepared_response,"Callable[[_],None]"
test_middleware_modifies_response,"Callable[[_, _],None]"
test_middleware_handles_exception,"Callable[[_, _],None]"
test_middleware_chain,"Callable[[_, _],None]"
test_remove_trailing_when_necessary,"Callable[[_, _, _, _],None]"
test_merge_slash,"Callable[[_, _, _, _],None]"
test_append_and_merge_slash,"Callable[[_, _, _, _],None]"
test_remove_and_merge_slash,"Callable[[_, _, _, _],None]"
test_cannot_remove_and_add_slash,"Callable[[_],None]"
test_old_style_middleware,"Callable[[_, _],None]"
test_mixed_middleware,"Callable[[_, _],None]"
test_old_style_middleware_class,"Callable[[_, _],None]"
test_new_style_middleware_class,"Callable[[_, _],None]"
test_new_style_middleware_method,"Callable[[_, _],None]"
test_parse_empty,"Callable[[_],None]"
test_inlonly,"Callable[[_],None]"
test_inlonlyquoted,"Callable[[_],None]"
test_semicolon,"Callable[[_],None]"
test_inlwithasciifilename,"Callable[[_],None]"
test_inlwithfnattach,"Callable[[_],None]"
test_attonly,"Callable[[_],None]"
test_attonlyquoted,"Callable[[_],None]"
test_attonlyucase,"Callable[[_],None]"
test_attwithasciifilename,"Callable[[_],None]"
test_inlwithasciifilenamepdf,"Callable[[_],None]"
test_attwithasciifilename25,"Callable[[_],None]"
test_attwithasciifilename35,"Callable[[_],None]"
test_attwithasciifnescapedchar,"Callable[[_],None]"
test_attwithasciifnescapedquote,"Callable[[_],None]"
test_attwithquotedsemicolon,"Callable[[_],None]"
test_attwithfilenameandextparam,"Callable[[_],None]"
test_attwithfilenameandextparamescaped,"Callable[[_],None]"
test_attwithasciifilenameucase,"Callable[[_],None]"
test_attwithasciifilenamenq,"Callable[[_],None]"
test_attwithtokfncommanq,"Callable[[_],None]"
test_attwithasciifilenamenqs,"Callable[[_],None]"
test_attemptyparam,"Callable[[_],None]"
test_attwithasciifilenamenqws,"Callable[[_],None]"
test_attwithfntokensq,"Callable[[_],None]"
test_attwithisofnplain,"Callable[[_],None]"
test_attwithutf8fnplain,"Callable[[_],None]"
test_attwithfnrawpctenca,"Callable[[_],None]"
test_attwithfnusingpct,"Callable[[_],None]"
test_attwithfnrawpctencaq,"Callable[[_],None]"
test_attwithnamepct,"Callable[[_],None]"
test_attwithfilenamepctandiso,"Callable[[_],None]"
test_attwithfnrawpctenclong,"Callable[[_],None]"
test_attwithasciifilenamews1,"Callable[[_],None]"
test_attwith2filenames,"Callable[[_],None]"
test_attfnbrokentoken,"Callable[[_],None]"
test_attfnbrokentokeniso,"Callable[[_],None]"
test_attfnbrokentokenutf,"Callable[[_],None]"
test_attmissingdisposition,"Callable[[_],None]"
test_attmissingdisposition2,"Callable[[_],None]"
test_attmissingdisposition3,"Callable[[_],None]"
test_attmissingdisposition4,"Callable[[_],None]"
test_emptydisposition,"Callable[[_],None]"
test_doublecolon,"Callable[[_],None]"
test_attandinline,"Callable[[_],None]"
test_attandinline2,"Callable[[_],None]"
test_attbrokenquotedfn,"Callable[[_],None]"
test_attbrokenquotedfn2,"Callable[[_],None]"
test_attbrokenquotedfn3,"Callable[[_],None]"
test_attmultinstances,"Callable[[_],None]"
test_attmissingdelim,"Callable[[_],None]"
test_attmissingdelim2,"Callable[[_],None]"
test_attmissingdelim3,"Callable[[_],None]"
test_attreversed,"Callable[[_],None]"
test_attconfusedparam,"Callable[[_],None]"
test_attabspath,"Callable[[_],None]"
test_attabspathwin,"Callable[[_],None]"
test_attcdate,"Callable[[_],None]"
test_attmdate,"Callable[[_],None]"
test_dispext,"Callable[[_],None]"
test_dispextbadfn,"Callable[[_],None]"
test_attwithisofn2231iso,"Callable[[_],None]"
test_attwithfn2231utf8,"Callable[[_],None]"
test_attwithfn2231noc,"Callable[[_],None]"
test_attwithfn2231utf8comp,"Callable[[_],None]"
test_attwithfn2231utf8_bad,"Callable[[_],None]"
test_attwithfn2231iso_bad,"Callable[[_],None]"
test_attwithfn2231ws1,"Callable[[_],None]"
test_attwithfn2231ws2,"Callable[[_],None]"
test_attwithfn2231ws3,"Callable[[_],None]"
test_attwithfn2231quot,"Callable[[_],None]"
test_attwithfn2231quot2,"Callable[[_],None]"
test_attwithfn2231singleqmissing,"Callable[[_],None]"
test_attwithfn2231nbadpct1,"Callable[[_],None]"
test_attwithfn2231nbadpct2,"Callable[[_],None]"
test_attwithfn2231dpct,"Callable[[_],None]"
test_attwithfn2231abspathdisguised,"Callable[[_],None]"
test_attfncont,"Callable[[_],None]"
test_attfncontqs,"Callable[[_],None]"
test_attfncontenc,"Callable[[_],None]"
test_attfncontlz,"Callable[[_],None]"
test_attfncontnc,"Callable[[_],None]"
test_attfnconts1,"Callable[[_],None]"
test_attfncontord,"Callable[[_],None]"
test_attfnboth,"Callable[[_],None]"
test_attfnboth2,"Callable[[_],None]"
test_attfnboth3,"Callable[[_],None]"
test_attnewandfn,"Callable[[_],None]"
test_attrfc2047token,"Callable[[_],None]"
test_attrfc2047quoted,"Callable[[_],None]"
test_bad_continuous_param,"Callable[[_],None]"
test_no_filename,"Callable[[_],None]"
test_filename,"Callable[[_],None]"
test_filename_ext,"Callable[[_],None]"
test_attfncont,"Callable[[_],None]"
test_attfncontqs,"Callable[[_],None]"
test_attfncontenc,"Callable[[_],None]"
test_attfncontlz,"Callable[[_],None]"
test_attfncontnc,"Callable[[_],None]"
test_attfnconts1,"Callable[[_],None]"
test_attfnboth,"Callable[[_],None]"
test_attfnboth3,"Callable[[_],None]"
test_attrfc2047quoted,"Callable[[_],None]"
test_send_recv_text,"Callable[[_],None]"
test_send_recv_bytes_bad_type,"Callable[[_],None]"
test_send_recv_bytes,"Callable[[_],None]"
test_send_recv_text_bad_type,"Callable[[_],None]"
test_send_recv_json,"Callable[[_],None]"
test_ping_pong,"Callable[[_],None]"
test_ping_pong_manual,"Callable[[_],None]"
test_close,"Callable[[_],None]"
test_concurrent_close,"Callable[[_],None]"
test_close_from_server,"Callable[[_],None]"
test_close_manual,"Callable[[_],None]"
test_close_timeout,"Callable[[_],None]"
test_close_cancel,"Callable[[_],None]"
test_override_default_headers,"Callable[[_],None]"
test_additional_headers,"Callable[[_],None]"
test_recv_protocol_error,"Callable[[_],None]"
test_recv_timeout,"Callable[[_],None]"
test_receive_timeout,"Callable[[_],None]"
test_custom_receive_timeout,"Callable[[_],None]"
test_heartbeat,"Callable[[_, _],None]"
test_heartbeat_no_pong,"Callable[[_, _],None]"
test_send_recv_compress,"Callable[[_],None]"
test_send_recv_compress_wbits,"Callable[[_],None]"
test_send_recv_compress_wbit_error,"Callable[[_],None]"
test_ws_client_async_for,"Callable[[_],None]"
test_ws_async_with,"Callable[[_],None]"
test_ws_async_with_send,"Callable[[_],None]"
test_ws_async_with_shortcut,"Callable[[_],None]"
test_closed_async_for,"Callable[[_],None]"
test_peer_connection_lost,"Callable[[_],None]"
test_peer_connection_lost_iter,"Callable[[_],None]"
test_pong,"Callable[[_],None]"
test_ping,"Callable[[_],None]"
test_send_text,"Callable[[_],None]"
test_send_binary,"Callable[[_],None]"
test_send_binary_long,"Callable[[_],None]"
test_send_binary_very_long,"Callable[[_],None]"
test_close,"Callable[[_],None]"
test_send_text_masked,"Callable[[_, _],None]"
test_send_compress_text,"Callable[[_, _],None]"
test_send_compress_text_notakeover,"Callable[[_, _],None]"
test_send_compress_text_per_message,"Callable[[_, _],None]"
test_parse_mimetype,"Callable[[_, _],None]"
test_guess_filename_with_tempfile,"Callable[[],None]"
test_basic_auth1,"Callable[[],None]"
test_basic_auth2,"Callable[[],None]"
test_basic_with_auth_colon_in_login,"Callable[[],None]"
test_basic_auth3,"Callable[[],None]"
test_basic_auth4,"Callable[[],None]"
test_basic_auth_decode,"Callable[[_],None]"
test_basic_auth_invalid,"Callable[[],None]"
test_basic_auth_decode_not_basic,"Callable[[],None]"
test_basic_auth_decode_bad_base64,"Callable[[],None]"
test_basic_auth_decode_illegal_chars_base64,"Callable[[_],None]"
test_basic_auth_decode_invalid_credentials,"Callable[[],None]"
test_basic_auth_decode_blank_username,"Callable[[_, _],None]"
test_basic_auth_from_url,"Callable[[],None]"
test_basic_auth_from_not_url,"Callable[[],None]"
test_reify,"Callable[[_],None]"
test_reify_class,"Callable[[_],None]"
test_reify_assignment,"Callable[[_],None]"
test_is_ip_address,"Callable[[],None]"
test_is_ip_address_bytes,"Callable[[],None]"
test_ipv4_addresses,"Callable[[],None]"
test_ipv6_addresses,"Callable[[],None]"
test_host_addresses,"Callable[[],None]"
test_is_ip_address_invalid_type,"Callable[[],None]"
test_timeout_handle,"Callable[[_],None]"
test_timeout_handle_cb_exc,"Callable[[_],None]"
test_timer_context_cancelled,"Callable[[],None]"
test_timer_context_no_task,"Callable[[_],None]"
test_weakref_handle,"Callable[[_],None]"
test_weakref_handle_weak,"Callable[[_],None]"
test_ceil_call_later,"Callable[[],None]"
test_ceil_call_later_no_timeout,"Callable[[],None]"
test_ceil_timeout,"Callable[[_],None]"
test_ceil_timeout_no_task,"Callable[[_],None]"
test_content_disposition,"Callable[[],None]"
test_content_disposition_bad_type,"Callable[[],None]"
test_set_content_disposition_bad_param,"Callable[[],None]"
test_proxies_from_env_http,"Callable[[_],None]"
test_proxies_from_env_http_proxy_for_https_proto,"Callable[[_],None]"
test_proxies_from_env_https_proxy_skipped,"Callable[[_],None]"
test_proxies_from_env_http_with_auth,"Callable[[_],None]"
test_get_running_loop_not_running,"Callable[[_],None]"
test_get_running_loop_ok,"Callable[[_],None]"
test_set_result,"Callable[[_],None]"
test_set_result_cancelled,"Callable[[_],None]"
test_set_exception,"Callable[[_],None]"
test_set_exception_cancelled,"Callable[[_],None]"
test_inheritance,"Callable[[_],None]"
test_getitem,"Callable[[_],None]"
test_getitem_not_found,"Callable[[_],None]"
test_get,"Callable[[_],None]"
test_get_default,"Callable[[_],None]"
test_get_non_default,"Callable[[_],None]"
test_len,"Callable[[_],None]"
test_iter,"Callable[[_],None]"
test_contains,"Callable[[_],None]"
test_bool,"Callable[[_],None]"
test_repr,"Callable[[_],None]"
test_async_resolver_positive_lookup,"Callable[[_],None]"
test_async_resolver_query_positive_lookup,"Callable[[_],None]"
test_async_resolver_multiple_replies,"Callable[[_],None]"
test_async_resolver_query_multiple_replies,"Callable[[_],None]"
test_async_resolver_negative_lookup,"Callable[[_],None]"
test_async_resolver_query_negative_lookup,"Callable[[_],None]"
test_async_resolver_no_hosts_in_query,"Callable[[_],None]"
test_async_resolver_no_hosts_in_gethostbyname,"Callable[[_],None]"
test_threaded_resolver_positive_lookup,"Callable[[],None]"
test_threaded_resolver_multiple_replies,"Callable[[],None]"
test_threaded_negative_lookup,"Callable[[],None]"
test_close_for_threaded_resolver,"Callable[[_],None]"
test_close_for_async_resolver,"Callable[[_],None]"
test_default_loop_for_threaded_resolver,"Callable[[_],None]"
test_default_loop_for_async_resolver,"Callable[[_],None]"
test_async_resolver_ipv6_positive_lookup,"Callable[[_],None]"
test_async_resolver_query_ipv6_positive_lookup,"Callable[[_],None]"
test_async_resolver_aiodns_not_present,"Callable[[_, _],None]"
test_default_resolver,"Callable[[],None]"
test_at_eof,"Callable[[_],None]"
test_next,"Callable[[_],None]"
test_release,"Callable[[_],None]"
test_release_when_stream_at_eof,"Callable[[_],None]"
test_next,"Callable[[_],None]"
test_next_next,"Callable[[_],None]"
test_read,"Callable[[_],None]"
test_read_chunk_at_eof,"Callable[[_],None]"
test_read_chunk_without_content_length,"Callable[[_],None]"
test_read_incomplete_chunk,"Callable[[_],None]"
test_read_all_at_once,"Callable[[_],None]"
test_read_incomplete_body_chunked,"Callable[[_],None]"
test_read_boundary_with_incomplete_chunk,"Callable[[_],None]"
test_multi_read_chunk,"Callable[[_],None]"
test_read_chunk_properly_counts_read_bytes,"Callable[[_],None]"
test_read_does_not_read_boundary,"Callable[[_],None]"
test_multiread,"Callable[[_],None]"
test_read_multiline,"Callable[[_],None]"
test_read_respects_content_length,"Callable[[_],None]"
test_read_with_content_encoding_gzip,"Callable[[_],None]"
test_read_with_content_encoding_deflate,"Callable[[_],None]"
test_read_with_content_encoding_identity,"Callable[[_],None]"
test_read_with_content_encoding_unknown,"Callable[[_],None]"
test_read_with_content_transfer_encoding_base64,"Callable[[_],None]"
test_read_with_content_transfer_encoding_quoted_printable,"Callable[[_],None]"
test_read_with_content_transfer_encoding_binary,"Callable[[_, _],None]"
test_read_with_content_transfer_encoding_unknown,"Callable[[_],None]"
test_read_text,"Callable[[_],None]"
test_read_text_default_encoding,"Callable[[_],None]"
test_read_text_encoding,"Callable[[_],None]"
test_read_text_guess_encoding,"Callable[[_],None]"
test_read_text_compressed,"Callable[[_],None]"
test_read_text_while_closed,"Callable[[_],None]"
test_read_json,"Callable[[_],None]"
test_read_json_encoding,"Callable[[_],None]"
test_read_json_guess_encoding,"Callable[[_],None]"
test_read_json_compressed,"Callable[[_],None]"
test_read_json_while_closed,"Callable[[_],None]"
test_read_form,"Callable[[_],None]"
test_read_form_encoding,"Callable[[_],None]"
test_read_form_guess_encoding,"Callable[[_],None]"
test_read_form_while_closed,"Callable[[_],None]"
test_readline,"Callable[[_],None]"
test_release,"Callable[[_],None]"
test_release_respects_content_length,"Callable[[_],None]"
test_release_release,"Callable[[_],None]"
test_filename,"Callable[[_],None]"
test_reading_long_part,"Callable[[_],None]"
test_from_response,"Callable[[_],None]"
test_bad_boundary,"Callable[[_],None]"
test_dispatch,"Callable[[_],None]"
test_dispatch_bodypart,"Callable[[_],None]"
test_dispatch_multipart,"Callable[[_],None]"
test_dispatch_custom_multipart_reader,"Callable[[_],None]"
test_emit_next,"Callable[[_],None]"
test_invalid_boundary,"Callable[[_],None]"
test_release,"Callable[[_],None]"
test_release_release,"Callable[[_],None]"
test_release_next,"Callable[[_],None]"
test_second_next_releases_previous_object,"Callable[[_],None]"
test_release_without_read_the_last_object,"Callable[[_],None]"
test_read_chunk_by_length_doesnt_breaks_reader,"Callable[[_],None]"
test_read_chunk_from_stream_doesnt_breaks_reader,"Callable[[_],None]"
test_reading_skips_prelude,"Callable[[_],None]"
test_writer,"Callable[[_],None]"
test_writer_serialize_io_chunk,"Callable[[_, _, _],None]"
test_writer_serialize_json,"Callable[[_, _, _],None]"
test_writer_serialize_form,"Callable[[_, _, _],None]"
test_writer_serialize_form_dict,"Callable[[_, _, _],None]"
test_writer_write,"Callable[[_, _, _],None]"
test_writer_write_no_close_boundary,"Callable[[_, _],None]"
test_writer_content_transfer_encoding_unknown,"Callable[[_, _, _],None]"
test_default_subtype,"Callable[[_, _],None]"
test_unquoted_boundary,"Callable[[_],None]"
test_quoted_boundary,"Callable[[_],None]"
test_bad_boundary,"Callable[[_],None]"
test_default_headers,"Callable[[_, _],None]"
test_iter_parts,"Callable[[_, _],None]"
test_append,"Callable[[_, _],None]"
test_append_with_headers,"Callable[[_, _],None]"
test_append_json,"Callable[[_, _],None]"
test_append_part,"Callable[[_, _],None]"
test_append_json_overrides_content_type,"Callable[[_, _],None]"
test_append_form,"Callable[[_, _],None]"
test_append_multipart,"Callable[[_, _],None]"
test_write,"Callable[[_, _, _],None]"
test_with,"Callable[[_],None]"
test_append_int_not_allowed,"Callable[[_],None]"
test_append_float_not_allowed,"Callable[[_],None]"
test_append_none_not_allowed,"Callable[[_],None]"
test_async_for_reader,"Callable[[],None]"
test_async_for_bodypart,"Callable[[],None]"
test_run_app_http,"Callable[[_],None]"
test_run_app_close_loop,"Callable[[_],None]"
test_run_app_https,"Callable[[_],None]"
test_run_app_nondefault_host_port,"Callable[[_, _],None]"
test_run_app_custom_backlog,"Callable[[_],None]"
test_run_app_custom_backlog_unix,"Callable[[_],None]"
test_run_app_http_unix_socket,"Callable[[_, _],None]"
test_run_app_https_unix_socket,"Callable[[_, _],None]"
test_run_app_abstract_linux_socket,"Callable[[_],None]"
test_run_app_preexisting_inet_socket,"Callable[[_, _],None]"
test_run_app_preexisting_inet6_socket,"Callable[[_],None]"
test_run_app_preexisting_unix_socket,"Callable[[_, _],None]"
test_run_app_multiple_preexisting_sockets,"Callable[[_],None]"
test_sigint,"Callable[[],None]"
test_sigterm,"Callable[[],None]"
test_startup_cleanup_signals_even_on_failure,"Callable[[_],None]"
test_run_app_coro,"Callable[[_],None]"
test_site_for_nonfrozen_app,"Callable[[_],None]"
test_runner_setup_handle_signals,"Callable[[_],None]"
test_runner_setup_without_signal_handling,"Callable[[_],None]"
test_site_double_added,"Callable[[_],None]"
test_site_stop_not_started,"Callable[[_],None]"
test_custom_log_format,"Callable[[_],None]"
test_unreg_site,"Callable[[_],None]"
test_app_property,"Callable[[_, _],None]"
test_non_app,"Callable[[],None]"
test_addresses,"Callable[[_, _],None]"
test_register_uncommon_http_methods,"Callable[[_],None]"
test_add_route_root,"Callable[[_],None]"
test_add_route_simple,"Callable[[_],None]"
test_add_with_matchdict,"Callable[[_],None]"
test_add_with_matchdict_with_colon,"Callable[[_],None]"
test_add_route_with_add_get_shortcut,"Callable[[_],None]"
test_add_route_with_add_post_shortcut,"Callable[[_],None]"
test_add_route_with_add_put_shortcut,"Callable[[_],None]"
test_add_route_with_add_patch_shortcut,"Callable[[_],None]"
test_add_route_with_add_delete_shortcut,"Callable[[_],None]"
test_add_route_with_add_head_shortcut,"Callable[[_],None]"
test_add_with_name,"Callable[[_],None]"
test_add_with_tailing_slash,"Callable[[_],None]"
test_add_invalid_path,"Callable[[_],None]"
test_add_url_invalid1,"Callable[[_],None]"
test_add_url_invalid2,"Callable[[_],None]"
test_add_url_invalid3,"Callable[[_],None]"
test_add_url_invalid4,"Callable[[_],None]"
test_add_url_escaping,"Callable[[_],None]"
test_any_method,"Callable[[_],None]"
test_match_second_result_in_table,"Callable[[_],None]"
test_raise_method_not_allowed,"Callable[[_],None]"
test_raise_method_not_found,"Callable[[_],None]"
test_double_add_url_with_the_same_name,"Callable[[_],None]"
test_route_plain,"Callable[[_],None]"
test_route_unknown_route_name,"Callable[[_],None]"
test_route_dynamic,"Callable[[_],None]"
test_add_static,"Callable[[_],None]"
test_add_static_append_version,"Callable[[_],None]"
test_add_static_append_version_set_from_constructor,"Callable[[_],None]"
test_add_static_append_version_override_constructor,"Callable[[_],None]"
test_add_static_append_version_filename_without_slash,"Callable[[_],None]"
test_add_static_append_version_non_exists_file,"Callable[[_],None]"
test_add_static_append_version_non_exists_file_without_slash,"Callable[[_],None]"
test_add_static_append_version_follow_symlink,"Callable[[_, _],None]"
test_add_static_append_version_not_follow_symlink,"Callable[[_, _],None]"
test_plain_not_match,"Callable[[_],None]"
test_dynamic_not_match,"Callable[[_],None]"
test_static_not_match,"Callable[[_],None]"
test_dynamic_with_trailing_slash,"Callable[[_],None]"
test_len,"Callable[[_],None]"
test_iter,"Callable[[_],None]"
test_contains,"Callable[[_],None]"
test_static_repr,"Callable[[_],None]"
test_static_adds_slash,"Callable[[_],None]"
test_static_remove_trailing_slash,"Callable[[_],None]"
test_add_route_with_re,"Callable[[_],None]"
test_add_route_with_re_and_slashes,"Callable[[_],None]"
test_add_route_with_re_not_match,"Callable[[_],None]"
test_add_route_with_re_including_slashes,"Callable[[_],None]"
test_add_route_with_invalid_re,"Callable[[_],None]"
test_route_dynamic_with_regex_spec,"Callable[[_],None]"
test_route_dynamic_with_regex_spec_and_trailing_slash,"Callable[[_],None]"
test_route_dynamic_with_regex,"Callable[[_],None]"
test_route_dynamic_quoting,"Callable[[_],None]"
test_regular_match_info,"Callable[[_],None]"
test_match_info_with_plus,"Callable[[_],None]"
test_not_found_repr,"Callable[[_],None]"
test_not_allowed_repr,"Callable[[_],None]"
test_default_expect_handler,"Callable[[_],None]"
test_custom_expect_handler_plain,"Callable[[_],None]"
test_custom_expect_handler_dynamic,"Callable[[_],None]"
test_expect_handler_non_coroutine,"Callable[[_],None]"
test_dynamic_match_non_ascii,"Callable[[_],None]"
test_dynamic_match_with_static_part,"Callable[[_],None]"
test_dynamic_match_two_part2,"Callable[[_],None]"
test_dynamic_match_unquoted_path,"Callable[[_],None]"
test_add_route_not_started_with_slash,"Callable[[_],None]"
test_add_route_invalid_method,"Callable[[_],None]"
test_routes_view_len,"Callable[[_, _],None]"
test_routes_view_iter,"Callable[[_, _],None]"
test_routes_view_contains,"Callable[[_, _],None]"
test_routes_abc,"Callable[[_],None]"
test_named_resources_abc,"Callable[[_],None]"
test_named_resources,"Callable[[_],None]"
test_resource_iter,"Callable[[_],None]"
test_deprecate_bare_generators,"Callable[[_],None]"
test_view_route,"Callable[[_],None]"
test_resource_route_match,"Callable[[_],None]"
test_error_on_double_route_adding,"Callable[[_],None]"
test_error_on_adding_route_after_wildcard,"Callable[[_],None]"
test_http_exception_is_none_when_resolved,"Callable[[_],None]"
test_http_exception_is_not_none_when_not_resolved,"Callable[[_],None]"
test_match_info_get_info_plain,"Callable[[_],None]"
test_match_info_get_info_dynamic,"Callable[[_],None]"
test_match_info_get_info_dynamic2,"Callable[[_],None]"
test_static_resource_get_info,"Callable[[_],None]"
test_system_route_get_info,"Callable[[_],None]"
test_resources_view_len,"Callable[[_],None]"
test_resources_view_iter,"Callable[[_],None]"
test_resources_view_contains,"Callable[[_],None]"
test_resources_abc,"Callable[[_],None]"
test_static_route_user_home,"Callable[[_],None]"
test_static_route_points_to_file,"Callable[[_],None]"
test_404_for_static_resource,"Callable[[_],None]"
test_405_for_resource_adapter,"Callable[[_],None]"
test_check_allowed_method_for_found_resource,"Callable[[_],None]"
test_url_for_in_static_resource,"Callable[[_],None]"
test_url_for_in_static_resource_pathlib,"Callable[[_],None]"
test_url_for_in_resource_route,"Callable[[_],None]"
test_subapp_get_info,"Callable[[_],None]"
test_subapp_url_for,"Callable[[_],None]"
test_subapp_repr,"Callable[[_],None]"
test_subapp_len,"Callable[[_],None]"
test_subapp_iter,"Callable[[_],None]"
test_invalid_route_name,"Callable[[_],None]"
test_frozen_router,"Callable[[_],None]"
test_frozen_router_subapp,"Callable[[_],None]"
test_frozen_app_on_subapp,"Callable[[_],None]"
test_set_options_route,"Callable[[_],None]"
test_dynamic_url_with_name_started_from_underscore,"Callable[[_],None]"
test_cannot_add_subapp_with_empty_prefix,"Callable[[_],None]"
test_cannot_add_subapp_with_slash_prefix,"Callable[[_],None]"
test_convert_empty_path_to_slash_on_freezing,"Callable[[_],None]"
test_deprecate_non_coroutine,"Callable[[_],None]"
test_plain_resource_canonical,"Callable[[],None]"
test_dynamic_resource_canonical,"Callable[[],None]"
test_static_resource_canonical,"Callable[[],None]"
test_prefixed_subapp_resource_canonical,"Callable[[_],None]"
test_websocket_can_prepare,"Callable[[_, _],None]"
test_websocket_json,"Callable[[_, _],None]"
test_websocket_json_invalid_message,"Callable[[_, _],None]"
test_websocket_send_json,"Callable[[_, _],None]"
test_websocket_receive_json,"Callable[[_, _],None]"
test_send_recv_text,"Callable[[_, _],None]"
test_send_recv_bytes,"Callable[[_, _],None]"
test_send_recv_json,"Callable[[_, _],None]"
test_close_timeout,"Callable[[_, _],None]"
test_concurrent_close,"Callable[[_, _],None]"
test_auto_pong_with_closing_by_peer,"Callable[[_, _],None]"
test_ping,"Callable[[_, _],None]"
test_pong,"Callable[[_, _],None]"
test_change_status,"Callable[[_, _],None]"
test_handle_protocol,"Callable[[_, _],None]"
test_server_close_handshake,"Callable[[_, _],None]"
test_receive_timeout,"Callable[[_, _],None]"
test_custom_receive_timeout,"Callable[[_, _],None]"
test_heartbeat,"Callable[[_, _, _],None]"
test_heartbeat_no_pong,"Callable[[_, _, _],None]"
test_server_ws_async_for,"Callable[[_, _],None]"
test_closed_async_for,"Callable[[_, _],None]"
test_websocket_disable_keepalive,"Callable[[_, _],None]"
test_subprocess_co,"Callable[[_],None]"
test_on_startup_hook,"Callable[[_],None]"
test_default_loop,"Callable[[_],None]"
test_default_loop,"Callable[[_],None]"
test_ctor,"Callable[[],None]"
test_render_ok,"Callable[[],None]"
test_render_unknown_method,"Callable[[],None]"
test_render_unsupported_method,"Callable[[],None]"
test_fingerprint_sha256,"Callable[[],None]"
test_fingerprint_sha1,"Callable[[],None]"
test_fingerprint_md5,"Callable[[],None]"
test_fingerprint_check_no_ssl,"Callable[[],None]"
test__merge_ssl_params_verify_ssl,"Callable[[],None]"
test__merge_ssl_params_verify_ssl_conflict,"Callable[[],None]"
test__merge_ssl_params_ssl_context,"Callable[[],None]"
test__merge_ssl_params_ssl_context_conflict,"Callable[[],None]"
test__merge_ssl_params_fingerprint,"Callable[[],None]"
test__merge_ssl_params_fingerprint_conflict,"Callable[[],None]"
test__merge_ssl_params_ssl,"Callable[[],None]"
test__merge_ssl_params_invlid,"Callable[[],None]"
test_entry_func_empty,"Callable[[_],None]"
test_entry_func_only_module,"Callable[[_],None]"
test_entry_func_only_function,"Callable[[_],None]"
test_entry_func_only_separator,"Callable[[_],None]"
test_entry_func_relative_module,"Callable[[_],None]"
test_entry_func_non_existent_module,"Callable[[_],None]"
test_entry_func_non_existent_attribute,"Callable[[_],None]"
test_path_when_unsupported,"Callable[[_, _],None]"
test_entry_func_call,"Callable[[_],None]"
test_running_application,"Callable[[_],None]"
test_method1,"Callable[[_],None]"
test_method2,"Callable[[_],None]"
test_method3,"Callable[[_],None]"
test_version_1_0,"Callable[[_],None]"
test_version_default,"Callable[[_],None]"
test_request_info,"Callable[[_],None]"
test_request_info_with_fragment,"Callable[[_],None]"
test_version_err,"Callable[[_],None]"
test_https_proxy,"Callable[[_],None]"
test_keep_alive,"Callable[[_],None]"
test_host_port_default_http,"Callable[[_],None]"
test_host_port_default_https,"Callable[[_],None]"
test_host_port_nondefault_http,"Callable[[_],None]"
test_host_port_nondefault_https,"Callable[[_],None]"
test_host_port_default_ws,"Callable[[_],None]"
test_host_port_default_wss,"Callable[[_],None]"
test_host_port_nondefault_ws,"Callable[[_],None]"
test_host_port_nondefault_wss,"Callable[[_],None]"
test_host_port_err,"Callable[[_],None]"
test_hostname_err,"Callable[[_],None]"
test_host_header_host_first,"Callable[[_],None]"
test_host_header_host_without_port,"Callable[[_],None]"
test_host_header_host_with_default_port,"Callable[[_],None]"
test_host_header_host_with_nondefault_port,"Callable[[_],None]"
test_host_header_host_idna_encode,"Callable[[_],None]"
test_host_header_host_unicode,"Callable[[_],None]"
test_host_header_explicit_host,"Callable[[_],None]"
test_host_header_explicit_host_with_port,"Callable[[_],None]"
test_host_header_ipv4,"Callable[[_],None]"
test_host_header_ipv6,"Callable[[_],None]"
test_host_header_ipv4_with_port,"Callable[[_],None]"
test_host_header_ipv6_with_port,"Callable[[_],None]"
test_default_loop,"Callable[[_],None]"
test_default_headers_useragent,"Callable[[_],None]"
test_default_headers_useragent_custom,"Callable[[_],None]"
test_skip_default_useragent_header,"Callable[[_],None]"
test_headers,"Callable[[_],None]"
test_headers_list,"Callable[[_],None]"
test_headers_default,"Callable[[_],None]"
test_invalid_url,"Callable[[_],None]"
test_no_path,"Callable[[_],None]"
test_ipv6_default_http_port,"Callable[[_],None]"
test_ipv6_default_https_port,"Callable[[_],None]"
test_ipv6_nondefault_http_port,"Callable[[_],None]"
test_ipv6_nondefault_https_port,"Callable[[_],None]"
test_basic_auth,"Callable[[_],None]"
test_basic_auth_utf8,"Callable[[_],None]"
test_basic_auth_tuple_forbidden,"Callable[[_],None]"
test_basic_auth_from_url,"Callable[[_],None]"
test_basic_auth_from_url_overridden,"Callable[[_],None]"
test_path_is_not_double_encoded1,"Callable[[_],None]"
test_path_is_not_double_encoded2,"Callable[[_],None]"
test_path_is_not_double_encoded3,"Callable[[_],None]"
test_path_safe_chars_preserved,"Callable[[_],None]"
test_params_are_added_before_fragment1,"Callable[[_],None]"
test_params_are_added_before_fragment2,"Callable[[_],None]"
test_path_not_contain_fragment1,"Callable[[_],None]"
test_path_not_contain_fragment2,"Callable[[_],None]"
test_cookies,"Callable[[_],None]"
test_cookies_merge_with_headers,"Callable[[_],None]"
test_unicode_get1,"Callable[[_],None]"
test_unicode_get2,"Callable[[_],None]"
test_unicode_get3,"Callable[[_],None]"
test_unicode_get4,"Callable[[_],None]"
test_query_multivalued_param,"Callable[[_],None]"
test_query_str_param,"Callable[[_],None]"
test_query_bytes_param_raises,"Callable[[_],None]"
test_query_str_param_is_not_encoded,"Callable[[_],None]"
test_params_update_path_and_url,"Callable[[_],None]"
test_params_empty_path_and_url,"Callable[[_],None]"
test_gen_netloc_all,"Callable[[_],None]"
test_gen_netloc_no_port,"Callable[[_],None]"
test_connection_header,"Callable[[_, _],None]"
test_no_content_length,"Callable[[_, _],None]"
test_no_content_length_head,"Callable[[_, _],None]"
test_content_type_auto_header_get,"Callable[[_, _],None]"
test_content_type_auto_header_form,"Callable[[_, _],None]"
test_content_type_auto_header_bytes,"Callable[[_, _],None]"
test_content_type_skip_auto_header_bytes,"Callable[[_, _],None]"
test_content_type_skip_auto_header_form,"Callable[[_, _],None]"
test_content_type_auto_header_content_length_no_skip,"Callable[[_, _],None]"
test_urlencoded_formdata_charset,"Callable[[_, _],None]"
test_post_data,"Callable[[_, _],None]"
test_pass_falsy_data,"Callable[[_],None]"
test_pass_falsy_data_file,"Callable[[_, _],None]"
test_get_with_data,"Callable[[_],None]"
test_bytes_data,"Callable[[_, _],None]"
test_content_encoding,"Callable[[_, _],None]"
test_content_encoding_dont_set_headers_if_no_body,"Callable[[_, _],None]"
test_content_encoding_header,"Callable[[_, _],None]"
test_compress_and_content_encoding,"Callable[[_, _],None]"
test_chunked,"Callable[[_, _],None]"
test_chunked2,"Callable[[_, _],None]"
test_chunked_explicit,"Callable[[_, _],None]"
test_chunked_length,"Callable[[_, _],None]"
test_chunked_transfer_encoding,"Callable[[_, _],None]"
test_file_upload_not_chunked,"Callable[[_],None]"
test_precompressed_data_stays_intact,"Callable[[_],None]"
test_file_upload_not_chunked_seek,"Callable[[_],None]"
test_file_upload_force_chunked,"Callable[[_],None]"
test_expect100,"Callable[[_, _],None]"
test_expect_100_continue_header,"Callable[[_, _],None]"
test_data_stream,"Callable[[_, _, _],None]"
test_data_stream_deprecated,"Callable[[_, _, _],None]"
test_data_file,"Callable[[_, _, _],None]"
test_data_stream_exc,"Callable[[_, _],None]"
test_data_stream_exc_deprecated,"Callable[[_, _],None]"
test_data_stream_exc_chain,"Callable[[_, _],None]"
test_data_stream_exc_chain_deprecated,"Callable[[_, _],None]"
test_data_stream_continue,"Callable[[_, _, _],None]"
test_data_stream_continue_deprecated,"Callable[[_, _, _],None]"
test_data_continue,"Callable[[_, _, _],None]"
test_close,"Callable[[_, _, _],None]"
test_close_deprecated,"Callable[[_, _, _],None]"
test_custom_response_class,"Callable[[_, _],None]"
test_oserror_on_write_bytes,"Callable[[_, _],None]"
test_terminate,"Callable[[_, _],None]"
test_terminate_with_closed_loop,"Callable[[_, _],None]"
test_terminate_without_writer,"Callable[[_],None]"
test_custom_req_rep,"Callable[[_],None]"
test_verify_ssl_false_with_ssl_context,"Callable[[_],None]"
test_bad_fingerprint,"Callable[[_],None]"
test_insecure_fingerprint_md5,"Callable[[_],None]"
test_insecure_fingerprint_sha1,"Callable[[_],None]"
test_add_signal_handler_not_a_callable,"Callable[[_],None]"
test_function_signal_dispatch,"Callable[[_],None]"
test_function_signal_dispatch2,"Callable[[_],None]"
test_response_prepare,"Callable[[_],None]"
test_non_coroutine,"Callable[[_],None]"
test_setitem,"Callable[[_],None]"
test_delitem,"Callable[[_],None]"
test_cannot_append_to_frozen_signal,"Callable[[_],None]"
test_cannot_setitem_in_frozen_signal,"Callable[[_],None]"
test_cannot_delitem_in_frozen_signal,"Callable[[_],None]"
test_cannot_send_non_frozen_signal,"Callable[[_],None]"
test_repr,"Callable[[_],None]"
_cpu_count,"Callable[[],int]"
VALUE,Any
test,"Callable[[_],Undefined]"
test1,"Callable[[_],Undefined]"
func,"Callable[[],Undefined]"
test_undefined,"Callable[[_],Undef]"
test1,"Callable[[_],ABC]"
test_good,"Callable[[_, top],_]"
bac,top
test_bad,"Callable[[_, trop],_]"
bac,trop
args,trop1
bac,trop2
__init__,"Callable[[_, object],None]"
thing,object
__init__,"Callable[[_, int],None]"
thing,int
__init__,"Callable[[_, object],None]"
thing,object
__init__,"Callable[[_, List[int]],None]"
place,PlaceId
name,str
user,"Dict[UserId, Set[Bar]]"
from_string,"Callable[[_, _],Class]"
validate_b,"Callable[[_, OtherClass],bool]"
obj,OtherClass
upload_post,"Callable[[bytes, str, dict],dict]"
content,bytes
source,str
tags,dict
some_integer,int
some_int,int
test_fail3,"Callable[[test_fail4],_]"
arg,test_fail4
args,test_fail5
kwargs,undefined
test_fail5,"Callable[[],undefined1]"
from_string,"Callable[[_, _],Class]"
validate_b,"Callable[[_, OtherClass],bool]"
obj,OtherClass
some_variable,int
some_other_variable,int
name,str
options,Any
msgs,Any
reports,Any
is_inside_lambda,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
get_all_elements,"Callable[[astroid.node_classes.NodeNG],Iterable[astroid.node_classes.NodeNG]]"
node,astroid.node_classes.NodeNG
clobber_in_except,"Callable[[astroid.node_classes.NodeNG],Tuple[bool, Tuple[str, str]]]"
node,astroid.node_classes.NodeNG
is_super,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
is_error,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
is_builtin_object,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
is_builtin,"Callable[[str],bool]"
name,str
is_defined_in_scope,"Callable[[astroid.node_classes.NodeNG, str, astroid.node_classes.NodeNG],bool]"
var_node,astroid.node_classes.NodeNG
varname,str
scope,astroid.node_classes.NodeNG
is_defined_before,"Callable[[astroid.node_classes.NodeNG],bool]"
var_node,astroid.node_classes.NodeNG
is_default_argument,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
is_func_decorator,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
is_ancestor_name,"Callable[[astroid.node_classes.NodeNG, astroid.node_classes.NodeNG],bool]"
frame,astroid.node_classes.NodeNG
node,astroid.node_classes.NodeNG
assign_parent,"Callable[[astroid.node_classes.NodeNG],astroid.node_classes.NodeNG]"
node,astroid.node_classes.NodeNG
overrides_a_method,"Callable[[astroid.node_classes.NodeNG, str],bool]"
class_node,astroid.node_classes.NodeNG
name,str
check_messages,"Callable[[],Callable]"
messages,str
parse_format_string,"Callable[[str],Tuple[Set[str], int, Dict[str, str], List[str]]]"
format_string,str
split_format_field_names,"Callable[[_],Tuple[str, Iterable[Tuple[bool, str]]]]"
collect_string_fields,"Callable[[_],Iterable[Union[str, None]]]"
parse_format_method_string,"Callable[[str],Tuple[List[Tuple[str, List[Tuple[bool, str]]]], int, int]]"
format_string,str
is_attr_protected,"Callable[[str],bool]"
attrname,str
node_frame_class,"Callable[[astroid.node_classes.NodeNG],Union[astroid.node_classes.NodeNG, None]]"
node,astroid.node_classes.NodeNG
is_attr_private,"Callable[[str],Union[Match[str], None]]"
attrname,str
get_argument_from_call,"Callable[[astroid.Call, int, str],astroid.Name]"
position,int
keyword,str
inherit_from_std_ex,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
error_of_type,"Callable[[astroid.ExceptHandler, _],bool]"
decorated_with_property,"Callable[[astroid.FunctionDef],bool]"
_is_property_decorator,"Callable[[astroid.Name],bool]"
decorated_with,"Callable[[astroid.FunctionDef, Iterable[str]],bool]"
unimplemented_abstract_methods,"Callable[[astroid.node_classes.NodeNG, astroid.FunctionDef],Dict[str, astroid.node_classes.NodeNG]]"
node,astroid.node_classes.NodeNG
visited,"Dict[str, astroid.node_classes.NodeNG]"
find_try_except_wrapper_node,"Callable[[astroid.node_classes.NodeNG],Union[astroid.ExceptHandler, astroid.TryExcept]]"
node,astroid.node_classes.NodeNG
is_from_fallback_block,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
_except_handlers_ignores_exception,"Callable[[astroid.ExceptHandler, _],bool]"
get_exception_handlers,"Callable[[astroid.node_classes.NodeNG, _],List[astroid.ExceptHandler]]"
node,astroid.node_classes.NodeNG
is_node_inside_try_except,"Callable[[astroid.Raise],bool]"
node_ignores_exception,"Callable[[astroid.node_classes.NodeNG, _],bool]"
node,astroid.node_classes.NodeNG
class_is_abstract,"Callable[[astroid.ClassDef],bool]"
_supports_protocol_method,"Callable[[astroid.node_classes.NodeNG, str],bool]"
value,astroid.node_classes.NodeNG
attr,str
is_comprehension,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
_supports_mapping_protocol,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
_supports_membership_test_protocol,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
_supports_iteration_protocol,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
_supports_async_iteration_protocol,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
_supports_getitem_protocol,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
_supports_setitem_protocol,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
_supports_delitem_protocol,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
_is_abstract_class_name,"Callable[[str],bool]"
name,str
is_inside_abstract_class,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
_supports_protocol,"Callable[[astroid.node_classes.NodeNG, astroid.FunctionDef],bool]"
value,astroid.node_classes.NodeNG
is_iterable,"Callable[[astroid.node_classes.NodeNG, bool],bool]"
value,astroid.node_classes.NodeNG
check_async,bool
is_mapping,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
supports_membership_test,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
supports_getitem,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
supports_setitem,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
supports_delitem,"Callable[[astroid.node_classes.NodeNG],bool]"
value,astroid.node_classes.NodeNG
safe_infer,"Callable[[astroid.node_classes.NodeNG, _],Union[astroid.node_classes.NodeNG, None]]"
node,astroid.node_classes.NodeNG
has_known_bases,"Callable[[astroid.ClassDef, _],bool]"
is_none,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
node_type,"Callable[[astroid.node_classes.NodeNG],Union[type, None]]"
node,astroid.node_classes.NodeNG
is_registered_in_singledispatch_function,"Callable[[astroid.FunctionDef],bool]"
get_node_last_lineno,"Callable[[astroid.node_classes.NodeNG],int]"
node,astroid.node_classes.NodeNG
is_postponed_evaluation_enabled,"Callable[[astroid.node_classes.NodeNG],bool]"
node,astroid.node_classes.NodeNG
is_subclass_of,"Callable[[astroid.ClassDef, astroid.ClassDef],bool]"
_is_typing_namedtuple,"Callable[[astroid.ClassDef],bool]"
_is_enum_class,"Callable[[astroid.ClassDef],bool]"
_is_dataclass,"Callable[[astroid.ClassDef],bool]"
_is_raising,"Callable[[typing.List],bool]"
msgs,Any
dist_args,"Dict[str, Union[str, List[str]]]"
self.isolated,bool
self._parsers,"Dict[Kind, List[Tuple[str, RawConfigParser]]]"
self._config,"Dict[Kind, Dict[str, Any]]"
self._modified_parsers,"List[Tuple[str, RawConfigParser]]"
name,str
version,str
commands_order,List[Type[Command]]
hidden,bool
ignore_require_venv,bool
use_pep517,Any
no_use_pep517,Any
_original_showwarning,Any
_BaseBar,Any
phases,Any
entities,"Dict[Text, List[Text]]"
source_path,str
keyword,str
kind,str
count,int
get_values,"Callable[[_, str],dict]"
file_path,str
__get_keys,"Callable[[_, str],List[Keyword]]"
file_path,str
self.rv,Response
self.rv,Response
self.rv,Response
buff,str
buff,str
buff,str
self.rv,Response
self.rv,Response
self.rv,Response
self.rv,Response
self.rv,Response
self.client,FlaskClient
self.app,Flask
rv,Response
self.rv,Response
self.rv,Response
self.rv,Response
self.rv,Response
self.rv,Response
self.rv,Response
remote_resp_json,dict
self.rv,Response
remote_resp_json,dict
req_body,dict
self.rv,Response
self.rv,Response
self.rv,Response
self.query_string,str
self.verify_page_url,str
self.origin,str
self.rv,Response
self.rv,Response
page_content,str
self.rv,Response
page_content,str
self.rv,Response
page_content,str
self.rv,Response
page_content,str
self.rv,Response
page_content,str
self.rv2,Response
self.rv,Response
self.rv2,Response
self.rv,Response
page_content,str
self.rv,Response
self.rv2,Response
self.rv,Response
self.rv2,Response
self.rv,Response
self.rv,Response
self.rv,Response
self.rv,Response
self.rv,Response
self.rv2,Response
self.rv2,Response
self.rv2,Response
self.rv,Response
self.rv2,Response
self.rv3,Response
self.rv,Response
self.rv2,Response
self.rv3,Response
rv4,Response
self.rv,Response
self.rv2,Response
self.rv,Response
self.rv2,Response
self.rv,Response
self.rv2,Response
session,dict
make_docstring,"Callable[[str, str, str],_]"
main_desc,str
param_desc,str
return_desc,str
run,"Callable[[_, _, _, int, bool, int, bool],_]"
max_line_length,int
json_sort,bool
indent_size,int
escape_unicode,bool
process_output,"Callable[[_, _, _, _, int],_]"
cc_threshold,int
create_arguments,"Callable[[_, _, _, _, bool],_]"
use_spaces,bool
create_arguments,"Callable[[_, _, _, _, str, language, _, _],_]"
eslint_config,str
language,language
generate_config,"Callable[[_, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool_or_str, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool_or_int, bool_or_int, bool_or_int, bool_or_int, bool_or_str, bool_or_str, bool_or_str, bool, bool_or_int, str],_]"
allow_bitwise_operators,bool
allow_prototype_overwrite,bool
force_braces,bool
allow_type_coercion,bool
allow_future_identifiers,bool
allow_typeof,bool
allow_filter_in_forin,bool
allow_funcscope,bool
allow_iterator_property,bool
allow_argument_caller_and_callee,bool
allow_comma_operator,bool
allow_non_breaking_whitespace,bool
allow_constructor_functions,bool
allow_grouping_operator,bool
allow_var_statement,bool
allow_missing_semicolon,bool
allow_debugger,bool
allow_assignment_comparisions,bool
allow_eval,bool
allow_increment,bool
allow_proto,bool
allow_scripturls,bool
allow_singleton,bool
allow_this_statements,bool
allow_with_statements,bool
use_mozilla_extension,bool
javascript_strictness,bool_or_str
allow_noyield,bool
allow_eqnull,bool
allow_last_semicolon,bool
allow_func_in_loop,bool
allow_expr_in_assignments,bool
use_es3_array,bool
environment_mootools,bool
environment_couch,bool
environment_jasmine,bool
environment_jquery,bool
environment_node,bool
environment_qunit,bool
environment_rhino,bool
environment_shelljs,bool
environment_prototypejs,bool
environment_yui,bool
environment_mocha,bool
environment_module,bool
environment_wsh,bool
environment_worker,bool
environment_nonstandard,bool
environment_browser,bool
environment_browserify,bool
environment_devel,bool
environment_dojo,bool
environment_typed,bool
environment_phantom,bool
max_statements,bool_or_int
max_depth,bool_or_int
max_parameters,bool_or_int
cyclomatic_complexity,bool_or_int
allow_variable_shadowing,bool_or_str
allow_unused_variables,bool_or_str
allow_latedef,bool_or_str
enforce_trailing_comma,bool
es_version,bool_or_int
jshint_config,str
create_arguments,"Callable[[_, _, _, str],_]"
jshint_config,str
run,"Callable[[_, _, _, int, int, int, bool],_]"
variable_spacing,int
statement_spacing,int
control_spacing,int
check_end_labels,bool
generate_config,"Callable[[_, _, bool, bool, bool, bool, bool, int, bool, int, bool, bool, bool, bool, bool, bool, str, bool, bool, str, int, bool, bool, str, str, str, bool, bool, int, bool, bool, bool, bool, str, bool, _, bool, bool, bool, str, bool, bool, bool, bool, bool, int, str],_]"
alignment_tabs,bool
alt_text,bool
class_attribute_with_static_value,bool
classes_before_ids,bool
consecutive_comments,bool
max_consecutive_comments,int
consecutive_silent_scripts,bool
max_consecutive_silent_scripts,int
empty_object_reference,bool
empty_script,bool
final_newline,bool
final_newline_present,bool
html_attributes,bool
id_names,bool
id_names_style,str
implicit_div,bool
indentation,bool
indentation_character,str
indentation_width,int
inline_styles,bool
instance_variables,bool
instance_variables_file_types,str
instance_variables_matchers_all,str
instance_variables_matchers_partials,str
leading_comment_space,bool
line_length,bool
max_line_length,int
multiline_pipe,bool
multiline_script,bool
object_reference_attributes,bool
repeat_id,bool
repeat_id_severity,str
rubo_cop,bool
ruby_comments,bool
space_before_script,bool
space_inside_hash_attributes,bool
space_inside_hash_attributes_style,str
tag_name,bool
trailing_whitespace,bool
unnecessary_interpolation,bool
unnecessary_string_output,bool
view_length,bool
max_view_length,int
hamllint_config,str
create_arguments,"Callable[[_, _, _, str],_]"
hamllint_config,str
generate_config,"Callable[[_, _, bool, int],_]"
document_start,bool
max_line_length,int
create_arguments,"Callable[[_, _, _, str],_]"
yamllint_config,str
create_arguments,"Callable[[_, _, _, list, _, _],_]"
code_block_language_ignore,list
__init__,"Callable[[_, _, str, str, list, COMMIT_TYPE, list, list, list],_]"
raw_commit_message,str
commit_sha,str
parent_commits,list
commit_type,COMMIT_TYPE
modified_files,list
added_files,list
deleted_files,list
run,"Callable[[_, bool],_]"
allow_empty_commit_message,bool
check_shortlog,"Callable[[_, _, int, str, bool, bool, bool],_]"
shortlog_length,int
shortlog_regex,str
shortlog_trailing_period,bool
shortlog_imperative_check,bool
shortlog_wip_check,bool
check_body,"Callable[[_, _, int, bool, _, str],_]"
body_line_length,int
force_body,bool
body_regex,str
check_issue_reference,"Callable[[_, _, bool, bool, bool, bool],_]"
body_close_issue,bool
body_close_issue_full_url,bool
body_close_issue_on_last_line,bool
body_enforce_issue_reference,bool
run,"Callable[[_, _, bool, float],_]"
allow_git_revert_commit,bool
minimum_similarity_ratio,float
run,"Callable[[_, _, str],_]"
git_rebase_help_url,str
run,"Callable[[_, _, bool],_]"
appveyor_ci,bool
generate_config,"Callable[[_, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool],_]"
allow_setter_in_classes,bool
allow_boolean_parameter_in_functions,bool
allow_class_variables,bool
allow_control_parameters,bool
allow_data_clump,bool
allow_duplicate_method,bool
feature_envy,bool
missing_module_description,bool
long_param_list,bool
long_yield_list,bool
module_initialize,bool
nested_iterators,bool
nil_check,bool
prima_donna_method,bool
repeated_conditional,bool
too_many_instance_variables,bool
too_many_methods,bool
too_long_method,bool
bad_method_name,bool
bad_module_name,bool
bad_param_name,bool
bad_var_name,bool
allow_unused_variables,bool
allow_unused_private_methods,bool
utility_function,bool
create_arguments,"Callable[[_, _, _, str],_]"
rubocop_config,str
generate_config,"Callable[[_, _, str, str, str, str, str, str, str, tuple, int, int, str, str, str, int, bool, int, bool, int, int, bool, bool, int, bool, int, bool, bool, bool, bool, bool, str],_]"
access_modifier_indentation,str
preferred_alias,str
align_hash_rocket_by,str
align_colon_by,str
inspect_last_argument_hash,str
align_parameters,str
class_check,str
comment_keywords,tuple
min_if_unless_guard,int
indent_size,int
method_naming_convention,str
string_literals,str
variable_naming_convention,str
max_class_length,int
class_length_count_comments,bool
max_module_length,int
module_length_count_comments,bool
cyclomatic_complexity,int
max_line_length,int
line_length_allow_here_doc,bool
line_length_allow_uri,bool
max_method_length,int
method_length_count_comments,bool
max_parameters,int
count_keyword_args,bool
ignore_unused_block_args_if_empty,bool
allow_unused_block_keyword_arguments,bool
ignore_unused_method_args_if_empty,bool
allow_unused_method_keyword_args,bool
rubocop_config,str
generate_config,"Callable[[_, _, int, str, int, bool, bool, bool, bool, bool, bool, bool, bool, bool, int, bool],_]"
max_line_length,int
line_ending_character,str
indent_size,int
use_spaces,bool
allow_multiple_statements_per_line,bool
force_lower_case_keywords,bool
force_lower_case_constants,bool
blank_line_after_namespace_declaration,bool
check_use_blocks,bool
check_class_declaration,bool
check_property_declaration,bool
force_scope_modifier_on_method,bool
function_declaration_argument_spacing,int
allow_multiline_function_declaration,bool
create_arguments,"Callable[[_, _, _, path],_]"
cmakelint_config,path
run,"Callable[[_, _, _, dict, str, bool, int, str],_]"
dependency_results,dict
language,str
use_spaces,bool
indent_size,int
coalang_dir,str
run,"Callable[[_, _, _, str],_]"
author_name,str
run,"Callable[[_, _, _, bool, bool, int, bool],_]"
use_spaces,bool
allow_trailing_whitespace,bool
indent_size,int
enforce_newline_at_EOF,bool
run,"Callable[[_, language, int, bool, bool, bool, bool, bool],_]"
language,language
minimum_tokens,int
ignore_annotations,bool
ignore_identifiers,bool
ignore_literals,bool
ignore_usings,bool
skip_duplicate_files,bool
correct_single_line_str,"Callable[[_, _, _, _, _, bool],_]"
force_preferred_quotation,bool
run,"Callable[[_, _, _, _, str, bool],_]"
preferred_quotation,str
force_preferred_quotation,bool
generate_config,"Callable[[_, _, bool, bool, bool, bool, bool, int, int, _, bool, int, int, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, str, _, str],_]"
check_todos,bool
dont_start_with_duplicated_conjunction,bool
no_empty_section,bool
check_date_weekday_mismatch,bool
check_grammar,bool
max_lines_per_file,int
max_comma_per_sentence,int
period_in_list_item,bool
minimum_acronym_length,int
maximum_acronym_length,int
check_with_rousseau,bool
check_with_alex,bool
check_common_misspellings,bool
allow_passive_voice,bool
allow_so_beginning,bool
allow_adverbs,bool
allow_repeated_words,bool
allow_there_is,bool
allow_ambiguous_words,bool
allow_extra_words,bool
allow_cliche_phrases,bool
check_relative_links,bool
base_uri,str
textlint_config,str
create_arguments,"Callable[[_, _, _, str],_]"
textlint_config,str
run,"Callable[[_, _, _, list, str, dict],_]"
keywords,list
regex_keyword,str
dependency_results,dict
run,"Callable[[_, _, _, _, bool],_]"
follow_redirects,bool
__init__,"Callable[[_, _, _, str, _, LINK_CONTEXT],_]"
link,str
link_context,LINK_CONTEXT
run,"Callable[[_, _, _, language, int, int, _],_]"
language,language
max_line_length,int
indent_size,int
create_arguments,"Callable[[_, _, _, int, int],_]"
licensecheck_lines,int
licensecheck_tail,int
run,"Callable[[_, _, _, str, str],_]"
language,str
coalang_dir,str
run,"Callable[[_, _, _, _, bool],_]"
follow_redirects,bool
__init__,"Callable[[_, _, _, str, LINK_CONTEXT],_]"
link,str
link_context,LINK_CONTEXT
run,"Callable[[_, _, _, str, _],_]"
link_ignore_regex,str
run,"Callable[[_, _, _, int, int, bool],_]"
min_lines_per_file,int
max_lines_per_file,int
exclude_blank_lines,bool
run,"Callable[[_, _, _, int, str, bool, str, str],_]"
max_filename_length,int
file_naming_convention,str
ignore_uppercase_filenames,bool
filename_prefix,str
filename_suffix,str
create_arguments,"Callable[[_, _, _, path, path_or_url, path],_]"
xml_schema,path
xml_dtd,path_or_url
xml_relaxng,path
create_arguments,"Callable[[_, _, _, bool, _],_]"
use_spaces,bool
generate_config,"Callable[[_, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, str, bool, bool, bool, bool, bool, str],_]"
enforce_lowercase_tagname,bool
enforce_lowercase_attribute,bool
require_attribute_value_in_double_quotes,bool
prohibit_empty_value_for_attribute,bool
prohibit_attribute_duplication,bool
require_doctype_at_beginning,bool
enforce_tag_pair,bool
enforce_self_close_empty_tag,bool
require_escaped_special_characters,bool
require_unique_attribute_id,bool
require_title_tag,bool
prohibit_script_in_head,bool
require_alt_attribute,bool
enforce_id_class_naming_convention,str
prohibit_inline_style,bool
require_relative_links_in_href,bool
prohibit_unsafe_characters,bool
prohibit_inline_script,bool
prohibit_style_tag,bool
htmlhint_config,str
create_arguments,"Callable[[_, _, _, str],_]"
htmlhint_config,str
create_arguments,"Callable[[_, _, _, str, list],_]"
shell,str
shellcheck_ignore,list
create_arguments,"Callable[[_, _, _, str],_]"
golint_cli_options,str
create_arguments,"Callable[[_, _, _, _, _, bool, bool],_]"
asserts,bool
blank,bool
create_arguments,"Callable[[_, _, _, bool],_]"
simplify,bool
generate_config,"Callable[[_, _, int, bool, bool, bool, int, int, bool, bool, int, int, bool, bool, int, int, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, int, bool, str, bool, bool, bool, bool, bool],_]"
max_line_length,int
max_line_length_affect_comments,bool
space_before_and_after_arrow,bool
check_braces_spacing,bool
braces_spacing_width,int
spacing_in_empty_braces,int
class_naming_camelCase,bool
spaces_before_and_after_colon,bool
spaces_before_colon,int
spaces_after_colon,int
enforce_newline_at_EOF,bool
use_spaces,bool
indent_size,int
number_of_newlines_after_classes,int
prohibit_embedding_javascript_snippet,bool
force_braces,bool
allow_implicit_parentheses,bool
allow_interpolation_in_single_quotes,bool
allow_stand_alone_at_sign,bool
allow_throwing_strings,bool
allow_trailing_semicolons,bool
allow_trailing_whitespaces,bool
allow_unnecessary_double_quotes,bool
allow_bitwise_operators,bool
spaces_around_operators,bool
space_after_comma,bool
cyclomatic_complexity,int
prevent_duplicate_keys,bool
consistent_line_endings_style,str
allow_this_statements,bool
allow_increment,bool
allow_no_parameters,bool
allow_empty_functions,bool
enforce_parentheses_on_non_empty_constructors,bool
process_documentation,"Callable[[_, DocumentationComment, str, int, str, bool],_]"
doc_comment,DocumentationComment
allow_missing_func_desc,str
indent_size,int
expand_one_liners,str
use_spaces,bool
run,"Callable[[_, _, _, str, str, str, int, str, bool],_]"
language,str
docstyle,str
allow_missing_func_desc,str
indent_size,int
expand_one_liners,str
use_spaces,bool
run,"Callable[[_, _, _, str, str, str, _],_]"
language,str
docstyle,str
locale,str
generate_config,"Callable[[_, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool],_]"
allow_trailing_whitespace,bool
allow_dupe_feature_names,bool
allow_dupe_scenario_names,bool
allow_duplicate_tags,bool
allow_empty_file,bool
allow_files_without_scenarios,bool
allow_homogenous_tags,bool
allow_multiple_empty_lines,bool
allow_scenario_outlines_without_examples,bool
allow_superfluous_tags,bool
allow_unnamed_features,bool
allow_unnamed_scenarios,bool
one_space_between_tags,bool
use_and,bool
create_arguments,"Callable[[_, str],_]"
gherkin_config,str
create_arguments,"Callable[[_, _, _, str, bool, bool, str, str, bool, str, bool, str, bool, bool, bool, str, bool, int, int, bool, int, bool, str, bool, int, bool, int, bool, bool, bool, bool, str, str, bool, bool, bool, bool, bool, bool],_]"
bullets,str
closed_headings,bool
setext_headings,bool
emphasis,str
strong,str
encode_entities,bool
codefence,str
fences,bool
list_indent,str
loose_tables,bool
spaced_tables,bool
list_increment,bool
horizontal_rule,str
horizontal_rule_spaces,bool
horizontal_rule_repeat,int
max_line_length,int
check_links,bool
blockquote_indentation,int
enforce_checkbox_content_indentation,bool
code_block_style,str
enforce_labels_at_eof,bool
first_heading_level,int
enforce_heading_level_increment,bool
max_heading_length,int
prohibit_duplicate_definitions,bool
prohibit_duplicate_headings_in_section,bool
prohibit_duplicate_headings,bool
prohibit_empty_url,bool
prohibit_irregular_chars_filename,str
prohibit_punctuations_in_heading,str
prohibit_html,bool
prohibit_shortcut_reference_image,bool
prohibit_shortcut_reference_link,bool
use_spaces,bool
check_undefined_references,bool
check_unused_definition,bool
create_arguments,"Callable[[_, _, _, _, _, _, int],_]"
max_line_length,int
run,"Callable[[_, _, _, int, int, _, _, bool],_]"
max_line_length,int
indent_size,int
local_pep8_config,bool
create_arguments,"Callable[[_, _, _, _, _, str, str],_]"
pylint_cli_options,str
pylint_rcfile,str
create_arguments,"Callable[[_, _, _, _, language, str, bool, bool, bool, bool],_]"
language,language
python_version,str
allow_untyped_functions,bool
allow_untyped_calls,bool
check_untyped_function_bodies,bool
strict_optional,bool
run,"Callable[[_, _, _, int, int, _, _, bool],_]"
max_line_length,int
indent_size,int
local_pep8_config,bool
run,"Callable[[_, _, _, bool, bool, bool, bool, bool, bool, bool, int, bool, bool, str, str, str, str, str, str, bool, bool, bool, bool, int, _, int, _, _, _, int, _, bool],_]"
use_parentheses_in_import,bool
force_alphabetical_sort_in_import,bool
force_sort_within_import_sections,bool
from_first_in_import,bool
include_trailing_comma_in_import,bool
combine_star_imports,bool
combine_as_imports,bool
lines_after_imports,int
order_imports_by_type,bool
balanced_wrapping_in_imports,bool
import_heading_localfolder,str
import_heading_firstparty,str
import_heading_thirdparty,str
import_heading_stdlib,str
import_heading_future,str
default_import_section,str
force_grid_wrap_imports,bool
force_single_line_imports,bool
sort_imports_by_length,bool
use_spaces,bool
indent_size,int
isort_multi_line_output,int
max_line_length,int
treat_seperated_imports_independently,bool
run,"Callable[[_, _, _, int, _, _, _],_]"
cyclomatic_complexity,int
run,"Callable[[_, _, _, int, int, bool, bool, int, bool, bool, bool, bool, bool, int, bool, bool, bool, bool, bool, bool, bool, str, bool],_]"
max_line_length,int
indent_size,int
allow_multiline_lambdas,bool
blank_line_before_nested_class_or_def,bool
continuation_tab_width,int
dedent_closing_brackets,bool
indent_dictionary_value,bool
coalesce_brackets,bool
join_multiple_lines,bool
spaces_around_power_operator,bool
spaces_before_comment,int
space_between_ending_comma_and_closing_bracket,bool
split_arguments_when_comma_terminated,bool
split_before_bitwise_operator,bool
split_before_first_argument,bool
split_before_logical_operator,bool
split_before_named_assigns,bool
use_spaces,bool
based_on_style,str
prefer_line_break_after_opening_bracket,bool
run,"Callable[[_, _, _, bool, bool],_]"
remove_all_unused_imports,bool
remove_unused_variables,bool
run,"Callable[[_, _, _, bool],_]"
require_patch,bool
run,"Callable[[_, _, _, path, _],_]"
db_path,path
create_arguments,"Callable[[_, _, _, bool, int],_]"
use_spaces,bool
indent_size,int
create_arguments,"Callable[[_, _, _, path, path],_]"
tslint_config,path
rules_dir,path
run,"Callable[[_, _, _, int],_]"
indent_size,int
create_arguments,"Callable[[_, _, _, str],_]"
perlcritic_profile,str
create_arguments,"Callable[[_, _, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool],_]"
check_best_practices,bool
check_braces,bool
check_clone_implementation,bool
check_code_size,bool
check_comments,bool
check_controversial,bool
check_design,bool
check_imports,bool
check_naming,bool
check_optimizations,bool
check_strings,bool
allow_unnecessary_code,bool
allow_unused_code,bool
create_arguments,"Callable[[_, _, _, _, known_checkstyle_or_path, bool, int],_]"
checkstyle_configs,known_checkstyle_or_path
use_spaces,bool
indent_size,int
create_arguments,"Callable[[_, _, _, str],_]"
dockerfile_lint_rule_file,str
generate_config,"Callable[[_, _, bool, int, str, bool, bool, str, bool, int, int, int, int, int, int, int, int, int, int, bool, bool, bool, int, str],_]"
enforce_semicolon,bool
use_block_indentation,int
use_color_case,str
allow_color_shorthand,bool
allow_leading_zero_in_dimensions,bool
preferred_quotation,str
prohibit_empty_rulesets,bool
use_space_after_colon,int
use_space_before_colon,int
use_space_after_combinator,int
use_space_before_combinator,int
use_space_between_declarations,int
use_space_after_opening_brace,int
use_space_before_opening_brace,int
use_space_before_closing_brace,int
use_space_after_selector_delimiter,int
use_space_before_selector_delimiter,int
prohibit_trailing_whitespace,bool
prohibit_units_in_zero_valued_dimensions,bool
vendor_prefix_align,bool
use_lines_between_rulesets,int
csscomb_config,str
create_arguments,"Callable[[_, _, _, str],_]"
csscomb_config,str
generate_config,"Callable[[_, _, list, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, int, bool, bool, bool, str, str, str, str, int, bool, int, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, list, list, bool, int, str],_]"
space_around_bang,list
allow_chained_classes,bool
prefer_color_keywords,bool
use_color_variables,bool
allow_debug_statement,bool
check_declaration_order,bool
allow_duplicate_properties,bool
allow_consecutives_duplicate_property,bool
else_on_same_line,bool
force_empty_line_between_blocks,bool
allow_empty_rules,bool
use_short_hexadecimal_length_style,bool
use_lowercase_hexadecimal,bool
validate_hexadecimal,bool
allow_id_selector,bool
allow_important_rule_in_properties,bool
use_spaces,bool
indent_size,int
exclude_leading_zero,bool
allow_mergeable_selectors,bool
allow_leading_underscore,bool
function_naming_convention,str
mixin_naming_convention,str
variable_naming_convention,str
placeholder_naming_convention,str
max_nesting_depth,int
use_placeholder_selector_in_extend,bool
max_properties,int
allow_unit_on_zero_values,bool
check_url_format,bool
urls_in_quotes,bool
allow_unnecesseary_parent_reference,bool
allow_unnecessary_mantissa,bool
allow_trailing_whitespaces,bool
allow_trailing_semicolon,bool
check_imports_path,bool
allow_filename_leading_underscore,bool
allow_filename_extension,bool
use_length_variables,bool
check_properties_spelling,bool
extra_properties,list
disabled_properties,list
check_pseudo_elements,bool
spaces_between_parentheses,int
spaces_around_operators,str
create_arguments,"Callable[[_, _, _, str],_]"
sasslint_config,str
generate_config,"Callable[[_, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, _, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, str, int, str],_]"
prohibit_block_expansion,bool
prohibit_class_attribute_with_static_value,bool
prohibit_class_literals_before_attributes,bool
prohibit_class_literals_before_id_literals,bool
prohibit_class_literals,bool
prohibit_duplicate_attributes,bool
prohibit_html_text,bool
prohibit_id_attribute_with_static_value,bool
prohibit_id_literals_before_attributes,bool
prohibit_id_literals,bool
prohibit_legacy_mixin_call,bool
prohibit_multiple_line_breaks,bool
prohibit_spaces_inside_attribute_brackets,bool
prohibit_string_interpolation,bool
prohibit_tag_interpolation,bool
enforce_class_literals_before_attributes,bool
enforce_class_literals_before_id_literals,bool
enforce_id_literals_before_attributes,bool
enforce_lower_case_attributes,bool
enforce_lower_case_tags,bool
enforce_spaces_inside_attribute_brackets,bool
enforce_strict_equality_operators,bool
validate_div_tags,bool
validate_extensions,bool
validate_self_closing_tags,bool
preferred_quotation,str
max_lines_per_file,int
puglint_config,str
create_arguments,"Callable[[_, _, _, str],_]"
puglint_config,str
create_arguments,"Callable[[_, _, _, int, int, int, int, int, int, int, int, path],_]"
max_line_length,int
max_class_length,int
max_closure_length,int
max_file_length,int
max_function_length,int
max_name_length,int
max_struct_length,int
min_name_length,int
tailor_config,path
run,"Callable[[_, _, _, int],_]"
cyclomatic_complexity,int
create_arguments,"Callable[[_, _, _, int, bool, bool, bool, bool, bool, bool, bool, bool, int, bool, bool, int, int, bool, bool, bool, int, str],_]"
max_line_length,int
use_spaces,bool
blank_lines_after_declarations,bool
blank_lines_after_procedures,bool
blank_lines_after_commas,bool
braces_on_if_line,bool
braces_on_func_def_line,bool
cuddle_else,bool
while_and_brace_on_same_line,bool
case_indentation,int
space_before_semicolon_after_empty_loop,bool
delete_optional_blank_lines,bool
declaration_indent,int
brace_indent,int
gnu_style,bool
k_and_r_style,bool
linux_style,bool
indent_size,int
indent_cli_options,str
create_arguments,"Callable[[_, _, _, str, bool, int, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool],_]"
bracket_style,str
use_spaces,bool
indent_size,int
require_braces_at_namespace,bool
require_braces_at_class,bool
require_braces_at_inline,bool
require_braces_at_extern,bool
allow_indent_classes,bool
allow_indent_modifiers,bool
allow_indent_switches,bool
allow_indent_cases,bool
allow_indent_namespaces,bool
allow_indent_labels,bool
allow_indent_preproc_block,bool
allow_indent_preproc_definition,bool
allow_indent_preproc_conditionals,bool
allow_indent_column_one_comments,bool
allow_pad_header_blocks,bool
allow_pad_operators,bool
allow_pad_parenthesis,bool
allow_pad_parenthesis_out,bool
allow_pad_parenthesis_in,bool
prohibit_empty_lines_in_func,bool
break_closing_braces,bool
break_elseifs,bool
break_one_line_headers,bool
require_braces_at_one_line_conditionals,bool
prohibit_braces_from_one_line_conditionals,bool
prohibit_comment_prefix,bool
create_arguments,"Callable[[_, _, _, int, _, _],_]"
max_line_length,int
__init__,"Callable[[_, _, list, dict],_]"
differences,list
count_matrices,dict
run,"Callable[[_, counting_condition_dict, bool, bool, bool, path_list],_]"
counting_conditions,counting_condition_dict
average_calculation,bool
poly_postprocessing,bool
exp_postprocessing,bool
extra_include_paths,path_list
run,"Callable[[_, dict, float],_]"
dependency_results,dict
max_clone_difference,float
create_arguments,"Callable[[_, _, _, bool, bool, bool, bool, int, int],_]"
r_keep_comments,bool
r_keep_blank_lines,bool
r_braces_on_next_line,bool
r_use_arrows,bool
indent_size,int
r_max_expression_length,int
run,"Callable[[_, _, _, str, str, bool, bool, bool, int],_]"
keyword_case,str
identifier_case,str
strip_comments,bool
reindent,bool
indent_tabs,bool
indent_width,int
create_arguments,"Callable[[_, _, _, str],_]"
apertiumlint_config,str
generate_config,"Callable[[_, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool],_]"
redundant_pardef,bool
paradigm_names,bool
r_tag_data,bool
repeated_attributes_pardef,bool
repeated_entries_pardef,bool
repeated_entries_main_section,bool
repeated_tag_entries,bool
monodix_transfer_direction,bool
unused_paradigms,bool
blank_space_detection,bool
partially_in_lemma,bool
unwanted_tag,bool
bidix_transfer_direction,bool
unwanted_white_space,bool
compare_sdefs,bool
verify_invariable_part,bool
repeated_entries,bool
repeated_entries_cat_item,bool
repeated_entries_attr_item,bool
unused_def_cats,bool
check_valid_part_clip,bool
check_valid_equal_tag,bool
conflicting_cat_item,bool
check_valid_position,bool
enforce_break_tag,bool
xsd_validation,bool
enforce_side,bool
macro_names,bool
def_label_closed,bool
validate_label_sequence,bool
repeated_def_label,bool
install_bool,bool
repeated_program,bool
validate_program,bool
locate_file,bool
empty_program,bool
enforce_rules,bool
install_switch_no,bool
generate_config,"Callable[[_, _, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, str, int, bool, int, int, bool, str, bool, bool, bool, bool, bool, bool, bool, str, bool, bool, str, bool, int, str],_]"
block_keyword,bool
brackets,bool
colons_for_property_declaration,bool
color_variables_for_hex_values,bool
spaces_after_commas,bool
spaces_after_comments,bool
allow_trailing_whitespace,bool
no_css_literals,bool
max_selector_depth,bool
check_duplicates,bool
efficient_properties,bool
extend_preference,str
indent_size,int
leading_zero,bool
max_errors,int
max_warnings,int
mixed_spaces_and_tabs,bool
variable_naming_convention,str
strict_naming_convention,bool
none_keyword,bool
check_no_important_keyword,bool
spaces_inside_parentheses,bool
placeholder,bool
prefix_vars_with_dollar,bool
semicolons,bool
sort_order,str
stacked_properties,bool
check_property_validity,bool
preferred_quotation,str
zero_units,bool
z_index_normalize_base,int
stylint_config,str
create_arguments,"Callable[[_, _, _, str],_]"
stylint_config,str
run,"Callable[[_, _, _, str, _],_]"
natural_language,str
create_arguments,"Callable[[_, _, _, bool, bool, bool, bool, bool, bool, bool, bool],_]"
allow_passive_voice,bool
allow_so_beginning,bool
allow_adverbs,bool
allow_repeated_words,bool
allow_there_is,bool
allow_ambiguous_words,bool
allow_extra_words,bool
allow_cliche_phrases,bool
create_arguments,"Callable[[_, _, _, str],_]"
scalalint_config,str
__init__,"Callable[[_, str, str],None]"
archive_file,str
predictor_name,str
predictor,"Callable[[_],Predictor]"
lisp_to_nested_expression,"Callable[[str],List]"
lisp_string,str
stack,List
current_expression,List
nested_expression,List
__init__,"Callable[[_, World, int],None]"
world,World
max_path_length,int
self._completed_paths,List[List[str]]
self._terminal_path_index,"Dict[str, Set[int]]"
self._length_sorted_paths,List[List[str]]
_walk,"Callable[[_],None]"
_get_right_side_parts,"Callable[[str],List[str]]"
action,str
get_logical_forms_with_agenda,"Callable[[_, List[str], int],List[str]]"
max_num_logical_forms,int
get_all_logical_forms,"Callable[[_, int],List[str]]"
max_num_logical_forms,int
nltk_tree_to_logical_form,"Callable[[Tree],str]"
tree,Tree
__init__,"Callable[[_, Dict[str, BasicType], Dict[str, Type], Dict[str, str], int],None]"
num_nested_lambdas,int
self._right_side_indexed_actions,"Dict[str, List[Tuple[str, str]]]"
self._valid_actions,"Dict[str, List[str]]"
self._multi_match_mapping,"Dict[Type, List[Type]]"
is_terminal,"Callable[[_, str],bool]"
symbol,str
get_valid_actions,"Callable[[_],Dict[str, List[str]]]"
get_paths_to_root,"Callable[[_, str, int, int, int],List[List[str]]]"
action,str
max_path_length,int
beam_size,int
max_num_paths,int
lists_to_expand,"List[Tuple[str, List[str]]]"
get_multi_match_mapping,"Callable[[_],Dict[Type, List[Type]]]"
parse_logical_form,"Callable[[_, str, bool],Expression]"
logical_form,str
remove_var_function,bool
get_action_sequence,"Callable[[_, Expression],List[str]]"
expression,Expression
get_logical_form,"Callable[[_, List[str], bool],str]"
add_var_function,bool
_construct_node_from_actions,"Callable[[_, Tree, List[List[str]], bool],List[List[str]]]"
current_node,Tree
remaining_actions,List[List[str]]
add_var_function,bool
_infer_num_arguments,"Callable[[_, str],int]"
type_signature,str
_process_nested_expression,"Callable[[_, _],str]"
_map_name,"Callable[[_, str, bool],str]"
name,str
keep_mapping,bool
_add_name_mapping,"Callable[[_, str, str, Type],_]"
name,str
translated_name,str
name_type,Type
_get_transitions,"Callable[[_, Expression, List[str]],List[str]]"
expression,Expression
__init__,"Callable[[_, str, Cursor, bool, bool, bool],None]"
schema_path,str
cursor,Cursor
use_prelinked_entities,bool
variable_free,bool
use_untyped_entities,bool
get_action_sequence_and_all_actions,"Callable[[_, List[str], Dict[str, Dict[str, str]]],Tuple[List[str], List[str]]]"
prelinked_entities,"Dict[str, Dict[str, str]]"
_initialize_grammar_dictionary,"Callable[[_, Dict[str, List[str]]],Dict[str, List[str]]]"
grammar_dictionary,"Dict[str, List[str]]"
is_global_rule,"Callable[[_, str],bool]"
production_rule,str
__init__,"Callable[[_, TableQuestionContext],None]"
table_context,TableQuestionContext
self._valid_actions,"Dict[str, List[str]]"
is_instance_specific_entity,"Callable[[str],bool]"
entity_name,str
_translate_name_and_add_mapping,"Callable[[_, str],str]"
name,str
_map_name,"Callable[[_, str, bool],str]"
name,str
keep_mapping,bool
execute,"Callable[[_, str],Union[List[str], int]]"
logical_form,str
evaluate_logical_form,"Callable[[_, str, List[str]],bool]"
logical_form,str
__init__,"Callable[[_, TableQuestionKnowledgeGraph],None]"
table_graph,TableQuestionKnowledgeGraph
is_table_entity,"Callable[[_, str],bool]"
entity_name,str
get_valid_actions,"Callable[[_],Dict[str, List[str]]]"
_remove_action_from_type,"Callable[[Dict[str, List[str]], str, Callable[[str],bool]],None]"
valid_actions,"Dict[str, List[str]]"
type_,str
filter_function,"Callable[[str],bool]"
_map_name,"Callable[[_, str, bool],str]"
name,str
keep_mapping,bool
__init__,"Callable[[_, List[List[JsonDict]]],None]"
world_representation,List[List[JsonDict]]
_map_name,"Callable[[_, str, bool],str]"
name,str
keep_mapping,bool
get_agenda_for_sentence,"Callable[[_, str, bool],List[str]]"
sentence,str
add_paths_to_agenda,bool
_get_number_productions,"Callable[[str],List[str]]"
sentence,str
execute,"Callable[[_, str],bool]"
logical_form,str
get_strings_from_utterance,"Callable[[List[Token]],Dict[str, List[int]]]"
string_linking_scores,"Dict[str, List[int]]"
__init__,"Callable[[_, List[str], Tokenizer],None]"
tokenizer,Tokenizer
self.grammar,Grammar
_get_numeric_database_values,"Callable[[_, str],List[str]]"
nonterminal,str
_add_numeric_nonterminal_to_grammar,"Callable[[_, str, Grammar],None]"
nonterminal,str
new_grammar,Grammar
_update_expression_reference,"Callable[[_, Grammar, str, str],None]"
grammar,Grammar
parent_expression_nonterminal,str
child_expression_nonterminal,str
_get_sequence_with_spacing,"Callable[[_, _, List[Expression], str],Sequence]"
name,str
get_valid_actions,"Callable[[_],Dict[str, List[str]]]"
add_dates_to_number_linking_scores,"Callable[[_, Dict[str, Tuple[str, str, List[int]]], List[Token]],None]"
number_linking_scores,"Dict[str, Tuple[str, str, List[int]]]"
add_to_number_linking_scores,"Callable[[_, Set[str], Dict[str, Tuple[str, str, List[int]]], Callable[[str, List[Token]],Dict[str, List[int]]], List[Token], str],None]"
number_linking_scores,"Dict[str, Tuple[str, str, List[int]]]"
get_number_linking_dict,"Callable[[str, List[Token]],Dict[str, List[int]]]"
nonterminal,str
number_linking_dict,"Dict[str, List[int]]"
_get_linked_entities,"Callable[[_],Dict[str, Dict[str, Tuple[str, str, List[int]]]]]"
entity_linking_scores,"Dict[str, Dict[str, Tuple[str, str, List[int]]]]"
number_linking_scores,"Dict[str, Tuple[str, str, List[int]]]"
string_linking_scores,"Dict[str, Tuple[str, str, List[int]]]"
string_linking_dict,"Dict[str, List[int]]"
_ignore_dates,"Callable[[_, str],_]"
query,str
get_action_sequence,"Callable[[_, str],List[str]]"
query,str
_flatten_entities,"Callable[[_],Tuple[List[str], numpy.ndarray]]"
__init__,"Callable[[_, JsonDict, str],None]"
attributes,JsonDict
box_id,str
__init__,"Callable[[_, KnowledgeGraph, str, List[Dict[str, int]]],None]"
table_graph,KnowledgeGraph
syntax,str
qr_coeff_sets,"List[Dict[str, int]]"
self._entity_index_maps,"Dict[str, Dict[str, int]]"
is_table_entity,"Callable[[_, str],bool]"
entity_name,str
_entity_index,"Callable[[_, _],int]"
_map_name,"Callable[[_, str, bool],str]"
name,str
keep_mapping,bool
_check_compatible,"Callable[[_, List, List],bool]"
setup,List
answer,List
execute,"Callable[[_, str],int]"
lf_raw,str
__init__,"Callable[[_, List[JsonDict], int],None]"
box_id,int
__init__,"Callable[[_, Type, Type],None]"
first,Type
second,Type
resolve,"Callable[[_, Type],Union[Type, None]]"
other,Type
get_application_type,"Callable[[_, Type],Type]"
argument_type,Type
__init__,"Callable[[_, BasicType, BasicType],None]"
basic_type,BasicType
lambda_arg_type,BasicType
resolve,"Callable[[_, Type],Union[Type, None]]"
other,Type
get_application_type,"Callable[[_, Type],Type]"
argument_type,Type
__init__,"Callable[[_, Type],None]"
count_type,Type
resolve,"Callable[[_, Type],Type]"
other,Type
get_application_type,"Callable[[_, Type],Type]"
argument_type,Type
__init__,"Callable[[_, str],None]"
syntax,str
return_type,"Callable[[_],Type]"
__init__,"Callable[[_, int, Type, Type],None]"
num_arguments,int
first,Type
second,Type
return_type,"Callable[[_],Type]"
__init__,"Callable[[_, _],None]"
__init__,"Callable[[_, _, List[BasicType]],None]"
_signature,str
resolve,"Callable[[_, Type],Union[Type, None]]"
other,Type
get_application_type,"Callable[[_, Type],Type]"
argument_type,Type
__eq__,"Callable[[_, _],bool]"
matches,"Callable[[_, _],bool]"
__init__,"Callable[[_, BasicType, Set[BasicType], str],None]"
type_,BasicType
signature,str
get_application_type,"Callable[[_, Type],Type]"
argument_type,Type
__init__,"Callable[[_, BasicType, Set[BasicType], str],None]"
type_,BasicType
signature,str
resolve,"Callable[[_, Type],Union[Type, None]]"
other,Type
get_application_type,"Callable[[_, Type],Type]"
argument_type,Type
__init__,"Callable[[_, _, Type],None]"
default_type,Type
_set_type,"Callable[[_, _, _],None]"
__init__,"Callable[[_, Expression, Expression, Set[str]],None]"
function,Expression
argument,Expression
_set_type,"Callable[[_, Type, _],None]"
other_type,Type
__init__,"Callable[[_, bool, Dict[str, BasicType], Dict[str, Type]],None]"
type_check,bool
__init__,"Callable[[_, bool, str],None]"
language_has_lambda,bool
alias_prefix,str
map_name_with_signature,"Callable[[_, str, Type, str],None]"
name,str
signature,Type
alias,str
get_alias,"Callable[[_, str],str]"
name,str
get_signature,"Callable[[_, str],Type]"
name,str
substitute_any_type,"Callable[[Type, Set[BasicType]],List[Type]]"
type_,Type
_make_production_string,"Callable[[Type, Union[List[Type], Type]],str]"
source,Type
target,"Union[List[Type], Type]"
_get_complex_type_production,"Callable[[ComplexType, Dict[Type, List[Type]]],List[Tuple[Type, str]]]"
complex_type,ComplexType
multi_match_mapping,"Dict[Type, List[Type]]"
complex_type_productions,"List[Tuple[Type, str]]"
get_valid_actions,"Callable[[Dict[str, str], Dict[str, Type], Set[Type], Dict[Type, List[Type]], Set[Type], int],Dict[str, List[str]]]"
multi_match_mapping,"Dict[Type, List[Type]]"
num_nested_lambdas,int
valid_actions,"Dict[str, Set[str]]"
is_nonterminal,"Callable[[str],bool]"
production,str
format_grammar_string,"Callable[[Dict[str, List[str]]],str]"
grammar_dictionary,"Dict[str, List[str]]"
initialize_valid_actions,"Callable[[Grammar, List[str]],Dict[str, List[str]]]"
grammar,Grammar
valid_actions,"Dict[str, Set[str]]"
format_action,"Callable[[str, str, bool, bool, List[str]],str]"
nonterminal,str
right_hand_side,str
is_string,bool
is_number,bool
action_sequence_to_sql,"Callable[[List[str]],str]"
__init__,"Callable[[_, Grammar, List[str]],None]"
grammar,Grammar
self.grammar,Grammar
generic_visit,"Callable[[_, Node, List[None]],List[str]]"
node,Node
add_action,"Callable[[_, Node],None]"
node,Node
__init__,"Callable[[_, List[Dict[str, str]], Dict[str, str], List[Token]],None]"
table_data,"List[Dict[str, str]]"
cell_value_column_mapping,"Dict[str, List[str]]"
self._table_knowledge_graph,KnowledgeGraph
get_table_knowledge_graph,"Callable[[_],KnowledgeGraph]"
neighbors,"Dict[str, List[str]]"
read_from_lines,"Callable[[_, List[List[str]], List[Token]],TableQuestionContext]"
lines,List[List[str]]
table_data,"List[Dict[str, str]]"
table_data_with_column_types,"List[Dict[str, str]]"
read_from_file,"Callable[[_, str, List[Token]],TableQuestionContext]"
filename,str
get_entities_from_question,"Callable[[_],Tuple[List[Tuple[str, str]], List[Tuple[str, int]]]]"
_get_numbers_from_tokens,"Callable[[List[Token]],List[Tuple[str, int]]]"
_string_in_table,"Callable[[_, str],Union[str, None]]"
candidate,str
normalize_string,"Callable[[str],str]"
string,str
GLOBAL_DATASET_VALUES,"Dict[str, List[str]]"
update_grammar_with_tables,"Callable[[Dict[str, List[str]], Dict[str, List[TableColumn]]],None]"
grammar_dictionary,"Dict[str, List[str]]"
schema,"Dict[str, List[TableColumn]]"
update_grammar_with_table_values,"Callable[[Dict[str, List[str]], Dict[str, List[TableColumn]], Cursor],None]"
grammar_dictionary,"Dict[str, List[str]]"
schema,"Dict[str, List[TableColumn]]"
cursor,Cursor
update_grammar_with_global_values,"Callable[[Dict[str, List[str]], str],_]"
grammar_dictionary,"Dict[str, List[str]]"
dataset_name,str
update_grammar_to_be_variable_free,"Callable[[Dict[str, List[str]]],_]"
grammar_dictionary,"Dict[str, List[str]]"
update_grammar_with_untyped_entities,"Callable[[Dict[str, List[str]]],None]"
grammar_dictionary,"Dict[str, List[str]]"
update_grammar_values_with_variables,"Callable[[Dict[str, List[str]], Dict[str, Dict[str, str]]],None]"
grammar_dictionary,"Dict[str, List[str]]"
prelinked_entities,"Dict[str, Dict[str, str]]"
update_grammar_numbers_and_strings_with_variables,"Callable[[Dict[str, List[str]], Dict[str, Dict[str, str]], Dict[str, TableColumn]],None]"
grammar_dictionary,"Dict[str, List[str]]"
prelinked_entities,"Dict[str, Dict[str, str]]"
pm_map_match_to_query_value,"Callable[[str],_]"
match,str
am_map_match_to_query_value,"Callable[[str],_]"
match,str
get_times_from_utterance,"Callable[[str, Dict[int, int], Set[int]],Dict[str, List[int]]]"
utterance,str
times_linking_dict,"Dict[str, List[int]]"
get_date_from_utterance,"Callable[[List[Token], int],List[datetime]]"
year,int
get_numbers_from_utterance,"Callable[[str, List[Token]],Dict[str, List[int]]]"
utterance,str
number_linking_dict,"Dict[str, List[int]]"
get_time_range_start_from_utterance,"Callable[[str, List[Token]],Dict[str, List[int]]]"
utterance,str
time_range_start_linking_dict,"Dict[str, List[int]]"
get_time_range_end_from_utterance,"Callable[[str, List[Token]],Dict[str, List[int]]]"
utterance,str
time_range_end_linking_dict,"Dict[str, List[int]]"
get_costs_from_utterance,"Callable[[str, List[Token]],Dict[str, List[int]]]"
utterance,str
costs_linking_dict,"Dict[str, List[int]]"
get_flight_numbers_from_utterance,"Callable[[str, List[Token]],Dict[str, List[int]]]"
utterance,str
flight_numbers_linking_dict,"Dict[str, List[int]]"
digit_to_query_time,"Callable[[str],List[int]]"
digit,str
_time_regex_match,"Callable[[str, str, Dict[int, int], Callable[[str],List[int]], Set[int]],Dict[str, List[int]]]"
regex,str
utterance,str
map_match_to_query_value,"Callable[[str],List[int]]"
linking_scores_dict,"Dict[str, List[int]]"
get_trigger_dict,"Callable[[List[List[str]], List[Dict[str, List[str]]]],Dict[str, List[str]]]"
trigger_lists,List[List[str]]
trigger_dicts,"List[Dict[str, List[str]]]"
merged_trigger_dict,"Dict[str, List[str]]"
convert_to_string_list_value_dict,"Callable[[Dict[str, int]],Dict[str, List[str]]]"
NUMBER_TRIGGER_DICT,"Dict[str, List[str]]"
__init__,"Callable[[_, Dict[str, List[str]], Dict[str, List[str]], str],None]"
all_tables,"Dict[str, List[str]]"
tables_with_strings,"Dict[str, List[str]]"
database_file,str
self.grammar_dictionary,"Dict[str, List[str]]"
self.strings_list,"List[Tuple[str, str]]"
self.grammar_string,str
self.grammar,Grammar
self.valid_actions,"Dict[str, List[str]]"
get_grammar_dictionary,"Callable[[_],Dict[str, List[str]]]"
get_valid_actions,"Callable[[_],Dict[str, List[str]]]"
create_grammar_dict_and_strings,"Callable[[_],Tuple[Dict[str, List[str]], List[Tuple[str, str]]]]"
__init__,"Callable[[_, Set[str], Dict[str, List[str]], Dict[str, str]],None]"
neighbors,"Dict[str, List[str]]"
__init__,"Callable[[_, Set[str], Dict[str, List[str]], Dict[str, str], List[Token]],None]"
neighbors,"Dict[str, List[str]]"
self._entity_prefixes,"Dict[str, List[str]]"
read_from_file,"Callable[[_, str, List[Token]],TableQuestionKnowledgeGraph]"
filename,str
read_from_lines,"Callable[[_, List[str], List[Token]],TableQuestionKnowledgeGraph]"
read_from_json,"Callable[[_, Dict[str, Any]],TableQuestionKnowledgeGraph]"
neighbors,"DefaultDict[str, List[str]]"
column_cells,List[List[str]]
_normalize_string,"Callable[[str],str]"
string,str
_get_numbers_from_tokens,"Callable[[List[Token]],List[Tuple[str, str]]]"
_get_cell_parts,"Callable[[_, str],List[Tuple[str, str]]]"
cell_text,str
_should_split_column_cells,"Callable[[_, List[str]],bool]"
_should_split_cell,"Callable[[_, str],bool]"
cell_text,str
matches_starting_at,"Dict[int, List[str]]"
LEXICAL_CUES,"Dict[str, Dict[str, List[str]]]"
words_from_entity_string,"Callable[[str],str]"
entity,str
split_question,"Callable[[str],List[str]]"
question,str
nl_triple,"Callable[[List[str], JsonDict],str]"
nl_world,JsonDict
nl_arg,"Callable[[Any, JsonDict],Any]"
arg,Any
nl_world,JsonDict
nl_attr,"Callable[[str],str]"
attr,str
nl_dir,"Callable[[int],str]"
sign,int
nl_world_string,"Callable[[List[str]],str]"
strip_entity_type,"Callable[[str],str]"
entity,str
str_join,"Callable[[Union[str, List[str]], str, str, str],str]"
string_or_list,"Union[str, List[str]]"
joiner,str
prefixes,str
postfixes,str
get_explanation,"Callable[[str, JsonDict, int, QuarelWorld],List[JsonDict]]"
logical_form,str
world_extractions,JsonDict
answer_index,int
world,QuarelWorld
to_camel,"Callable[[str],str]"
string,str
from_qr_spec_string,"Callable[[str],List[Dict[str, int]]]"
qr_spec,str
to_qr_spec_string,"Callable[[List[Dict[str, int]]],str]"
qr_coeff_sets,"List[Dict[str, int]]"
from_entity_cues_string,"Callable[[str],Dict[str, List[str]]]"
cues_string,str
from_bio,"Callable[[List[str], str],List[Tuple[int, int]]]"
target,str
res,"List[Tuple[int, int]]"
delete_duplicates,"Callable[[List],List]"
expr,List
seen,Set
res,List
group_worlds,"Callable[[List[str], List[str]],Dict[str, List[str]]]"
substring_groups,"List[List[Tuple[str, int, int]]]"
get_world_entities,"Callable[[_, str, List[Token]],Dict[str, List[str]]]"
question,str
get_words,"Callable[[str],List[str]]"
string,str
get_stem_overlaps,"Callable[[str, List[str], NltkPorterStemmer],List[int]]"
query,str
stemmer,NltkPorterStemmer
align_entities,"Callable[[List[str], JsonDict, NltkPorterStemmer],List[str]]"
literals,JsonDict
stemmer,NltkPorterStemmer
__init__,"Callable[[_, str],None]"
table_directory,str
evaluate_logical_form,"Callable[[_, str, str],bool]"
logical_form,str
example_lisp_string,str
_create_sempre_executor,"Callable[[_],None]"
_stop_sempre_executor,"Callable[[_],None]"
__init__,"Callable[[_, Set[Box]],None]"
execute,"Callable[[_, str],bool]"
logical_form,str
_handle_expression,"Callable[[_, _],bool]"
_same,"Callable[[Set[str]],bool]"
_different,"Callable[[Set[str]],bool]"
_all_equals,"Callable[[Set[str], _],bool]"
_any_equals,"Callable[[Set[str], _],bool]"
_count,"Callable[[Union[Set[Box], Set[Object]]],int]"
entities_set,"Union[Set[Box], Set[Object]]"
_none_equals,"Callable[[Set[str], _],bool]"
_shape_count,"Callable[[_, Set[Object]],int]"
_color_count,"Callable[[_, Set[Object]],int]"
_execute_assertion,"Callable[[_, List],bool]"
sub_expression,List
_execute_constant,"Callable[[str],_]"
sub_expression,str
_filter_boxes,"Callable[[Set[Box], Callable[[Box],AttributeType], AttributeType, Callable[[AttributeType, AttributeType],bool]],Set[Box]]"
attribute_function,"Callable[[Box],AttributeType]"
target_attribute,AttributeType
comparison_op,"Callable[[AttributeType, AttributeType],bool]"
_get_objects_with_same_attribute,"Callable[[Set[Object], Callable[[Object],str]],Set[Object]]"
attribute_function,"Callable[[Object],str]"
objects_of_attribute,"Dict[str, Set[Object]]"
_objects_touch_each_other,"Callable[[_, Object, Object],bool]"
object1,Object
object2,Object
_separate_objects_by_boxes,"Callable[[_, Set[Object]],Dict[Box, List[Object]]]"
objects_per_box,"Dict[Box, List[Object]]"
__init__,"Callable[[_, int, int, int],None]"
year,int
month,int
day,int
__eq__,"Callable[[_, _],bool]"
__gt__,"Callable[[_, _],bool]"
__ge__,"Callable[[_, _],bool]"
__init__,"Callable[[_, List[Dict[str, str]]],None]"
table_data,"List[Dict[str, str]]"
execute,"Callable[[_, str],Any]"
logical_form,str
evaluate_logical_form,"Callable[[_, str, List[str]],bool]"
logical_form,str
_handle_constant,"Callable[[_, str],Union[List[Dict[str, str]], str, float]]"
constant,str
_get_number_row_pairs_to_filter,"Callable[[List[Dict[str, str]], str],List[Tuple[float, Dict[str, str]]]]"
row_list,"List[Dict[str, str]]"
column_name,str
_get_date_row_pairs_to_filter,"Callable[[_, List[Dict[str, str]], str],List[Tuple[Date, Dict[str, str]]]]"
row_list,"List[Dict[str, str]]"
column_name,str
_make_date,"Callable[[str],Date]"
cell_string,str
_value_looks_like_date,"Callable[[str],bool]"
cell_value,str
_get_row_index,"Callable[[_, Dict[str, str]],int]"
select,"Callable[[_, NestedList, str],List[str]]"
row_expression_list,NestedList
column_name,str
argmax,"Callable[[_, NestedList, str],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
argmin,"Callable[[_, NestedList, str],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
filter_number_greater,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_number_greater_equals,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_number_lesser,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_number_lesser_equals,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_number_equals,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_number_not_equals,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_date_greater,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_date_greater_equals,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_date_lesser,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_date_lesser_equals,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_date_equals,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_date_not_equals,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_in,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
filter_not_in,"Callable[[_, NestedList, str, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
value_expression,NestedList
first,"Callable[[_, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
row_list,"List[Dict[str, str]]"
last,"Callable[[_, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
row_list,"List[Dict[str, str]]"
previous,"Callable[[_, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
row_list,"List[Dict[str, str]]"
next,"Callable[[_, NestedList],List[Dict[str, str]]]"
row_expression_list,NestedList
row_list,"List[Dict[str, str]]"
count,"Callable[[_, NestedList],float]"
row_expression_list,NestedList
row_list,"List[Dict[str, str]]"
max,"Callable[[_, NestedList, str],float]"
row_expression_list,NestedList
column_name,str
row_list,"List[Dict[str, str]]"
min,"Callable[[_, NestedList, str],float]"
row_expression_list,NestedList
column_name,str
row_list,"List[Dict[str, str]]"
sum,"Callable[[_, NestedList, _],float]"
row_expression_list,NestedList
row_list,"List[Dict[str, str]]"
average,"Callable[[_, NestedList, str],float]"
row_expression_list,NestedList
column_name,str
row_list,"List[Dict[str, str]]"
mode,"Callable[[_, NestedList, str],List[str]]"
row_expression_list,NestedList
column_name,str
row_list,"List[Dict[str, str]]"
same_as,"Callable[[_, NestedList, str],List[Dict[str, str]]]"
row_expression_list,NestedList
column_name,str
row_list,"List[Dict[str, str]]"
diff,"Callable[[_, NestedList, NestedList, str],float]"
first_row_expression_list,NestedList
second_row_expression_list,NestedList
column_name,str
date,"Callable[[str, str, str],Date]"
year_string,str
month_string,str
day_string,str
__init__,"Callable[[_, str],None]"
database_file,str
evaluate_sql_query,"Callable[[_, str, List[str]],int]"
predicted_sql_query,str
_evaluate_sql_query_subprocess,"Callable[[_, str, List[str]],int]"
predicted_query,str
postprocess_query_sqlite,"Callable[[str],_]"
query,str
execute_notebook,"Callable[[str],_]"
notebook_path,str
is_terminal,"Callable[[_, str],bool]"
symbol,str
_get_world_with_question_tokens,"Callable[[_, List[Token]],WikiTablesWorld]"
_get_world_with_question_tokens,"Callable[[_, List[Token]],WikiTablesVariableFreeWorld]"
_get_alias,"Callable[[_, _],str]"
predict_json,"Callable[[_, JsonDict],JsonDict]"
inputs,JsonDict
load_line,"Callable[[_, str],JsonDict]"
line,str
dump_line,"Callable[[_, JsonDict],str]"
outputs,JsonDict
__init__,"Callable[[_],None]"
_read,"Callable[[_, str],Iterable[Instance]]"
file_path,str
forward,"Callable[[_],Dict[str, torch.Tensor]]"
_get_optimizer,"Callable[[_, float],_]"
lr,float
init_and_restore_scheduler,"Callable[[torch.optim.Optimizer, Dict[str, Any], Dict[str, Any]],_]"
optimizer,torch.optim.Optimizer
_get_optimizer,"Callable[[_, float],_]"
lr,float
slanted_triangular_cases,"List[Tuple[Dict[str, Any], List[Tuple[int, float]]]]"
get_vocab_and_both_elmo_indexed_ids,"Callable[[List[List[str]]],_]"
batch,List[List[str]]
create_small_test_fixture,"Callable[[str],None]"
output_dir,str
post_json,"Callable[[flask.testing.FlaskClient, str, JsonDict],flask.Response]"
client,flask.testing.FlaskClient
endpoint,str
data,JsonDict
sanitize,"Callable[[JsonDict],JsonDict]"
result,JsonDict
__init__,"Callable[[_, List[int], List[List[int]], List[torch.Tensor], List[int]],None]"
action_history,List[List[int]]
score,List[torch.Tensor]
is_finished,"Callable[[_],bool]"
combine_states,"Callable[[_, _],SimpleState]"
__init__,"Callable[[_, Set[int], bool],None]"
include_value_in_score,bool
take_step,"Callable[[_, SimpleState, int, List[Set]],List[SimpleState]]"
state,SimpleState
max_actions,int
indexed_next_states,"Dict[int, List[SimpleState]]"
is_nonterminal,"Callable[[str],bool]"
symbol,str
is_nonterminal,"Callable[[str],bool]"
symbol,str
set_up_glove,"Callable[[str, bytes, int],_]"
url,str
byt,bytes
change_etag_every,int
set_up_s3_bucket,"Callable[[str, List[Tuple[str, str]]],_]"
bucket_name,str
s3_objects,"List[Tuple[str, str]]"
__init__,"Callable[[_, str],None]"
c_file,str
from_params,"Callable[[_, Params],C]"
params,Params
__init__,"Callable[[_, str, _],None]"
filename,str
from_params,"Callable[[_, Params],B]"
params,Params
__init__,"Callable[[_, _],None]"
from_params,"Callable[[_, Params],A]"
params,Params
__init__,"Callable[[_, int, bool],None]"
my_int,int
my_bool,bool
bare_function,"Callable[[int],int]"
some_input,int
__init__,"Callable[[_, str],None]"
constructor_param,str
check_param,"Callable[[_, str],bool]"
check,str
set_total,"Callable[[_, int],None]"
new_total,int
__init__,"Callable[[_, int, str],None]"
size,int
name,str
__init__,"Callable[[_, int, str],None]"
size,int
name,str
from_params,"Callable[[_, Params, int],C]"
params,Params
size,int
__init__,"Callable[[_, int],None]"
size,int
__init__,"Callable[[_, Dict[str, A]],None]"
__init__,"Callable[[_, int],None]"
size,int
__init__,"Callable[[_, List[A]],None]"
__init__,"Callable[[_, int],None]"
size,int
__init__,"Callable[[_, str],None]"
name,str
__init__,"Callable[[_, Tuple[A, C]],None]"
__init__,"Callable[[_, str],None]"
name,str
__init__,"Callable[[_, Set[A]],None]"
take_step,"Callable[[torch.Tensor, Dict[str, torch.Tensor]],Tuple[torch.Tensor, Dict[str, torch.Tensor]]]"
state,"Dict[str, torch.Tensor]"
_check_results,"Callable[[_, int, np.array, np.array, BeamSearch, Dict[str, torch.Tensor]],None]"
batch_size,int
beam_search,BeamSearch
state,"Dict[str, torch.Tensor]"
test_block_is_orthogonal,"Callable[[_],None]"
__init__,"Callable[[_, List[Instance], bool],None]"
lazy,bool
_read,"Callable[[_, str],Iterable[Instance]]"
_,str
get_text,"Callable[[str, Instance],_]"
key,str
instance,Instance
fingerprint,"Callable[[Instance],_]"
instance,Instance
setUp,"Callable[[_],None]"
gold_mentions_with_ids,"List[Tuple[List[str], int]]"
gold_mentions_with_ids,"List[Tuple[List[str], int]]"
gold_mentions_with_ids,"List[Tuple[List[str], int]]"
gold_mentions_with_ids,"List[Tuple[List[str], int]]"
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[int]]]"
vocabulary,Vocabulary
index_name,str
get_padding_token,"Callable[[_],int]"
get_padding_lengths,"Callable[[_, int],Dict[str, int]]"
token,int
pad_token_sequence,"Callable[[_, Dict[str, List[int]], Dict[str, int], Dict[str, int]],Dict[str, List[int]]]"
tokens,"Dict[str, List[int]]"
get_keys,"Callable[[_, str],List[str]]"
index_name,str
main,"Callable[[str, Dict[str, Subcommand]],None]"
prog,str
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
dry_run_from_params,"Callable[[Params, str],None]"
params,Params
serialization_dir,str
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
_configure,"Callable[[argparse.Namespace],None]"
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
make_vocab_from_params,"Callable[[Params, str],_]"
params,Params
serialization_dir,str
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
__init__,"Callable[[_, str, str, int],None]"
options_file,str
weight_file,str
cuda_device,int
batch_to_embeddings,"Callable[[_, List[List[str]]],Tuple[torch.Tensor, torch.Tensor]]"
batch,List[List[str]]
embed_batch,"Callable[[_, List[List[str]]],List[numpy.ndarray]]"
batch,List[List[str]]
embed_sentences,"Callable[[_, Iterable[List[str]], int],Iterable[numpy.ndarray]]"
sentences,Iterable[List[str]]
batch_size,int
embed_file,"Callable[[_, IO, str, str, int, bool, bool],None]"
input_file,IO
output_file_path,str
output_format,str
batch_size,int
forget_sentences,bool
use_sentence_keys,bool
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
_get_predictor,"Callable[[argparse.Namespace],Predictor]"
__init__,"Callable[[_, Predictor, str, Union[str, None], int, bool, bool],None]"
predictor,Predictor
input_file,str
batch_size,int
print_to_console,bool
has_dataset_reader,bool
_maybe_print_to_console_and_file,"Callable[[_, str, str],None]"
prediction,str
model_input,str
run,"Callable[[_],None]"
_predict,"Callable[[argparse.Namespace],None]"
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
evaluate,"Callable[[Model, Iterable[Instance], DataIterator, int],Dict[str, Any]]"
model,Model
data_iterator,DataIterator
cuda_device,int
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
find_learning_rate_from_args,"Callable[[argparse.Namespace],None]"
find_learning_rate_model,"Callable[[Params, str, float, float, int, bool, float, bool],None]"
params,Params
serialization_dir,str
start_lr,float
end_lr,float
num_batches,int
linear_steps,bool
stopping_factor,float
force,bool
search_learning_rate,"Callable[[Trainer, float, float, int, bool, float],Tuple[List[float], List[float]]]"
trainer,Trainer
start_lr,float
end_lr,float
num_batches,int
linear_steps,bool
stopping_factor,float
_smooth,"Callable[[List[float], float],List[float]]"
beta,float
_save_plot,"Callable[[List[float], List[float], str],_]"
save_path,str
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
fine_tune_model_from_file_paths,"Callable[[str, str, str, str, bool, bool],Model]"
model_archive_path,str
config_file,str
serialization_dir,str
overrides,str
extend_vocab,bool
file_friendly_logging,bool
fine_tune_model,"Callable[[Model, Params, str, bool, bool],Model]"
model,Model
params,Params
serialization_dir,str
extend_vocab,bool
file_friendly_logging,bool
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
add_subparser,"Callable[[_, str, argparse._SubParsersAction],argparse.ArgumentParser]"
name,str
train_model_from_file,"Callable[[str, str, str, bool, bool, bool],Model]"
parameter_filename,str
serialization_dir,str
overrides,str
file_friendly_logging,bool
recover,bool
force,bool
datasets_from_params,"Callable[[Params],Dict[str, Iterable[Instance]]]"
params,Params
validation_and_test_dataset_reader,DatasetReader
datasets,"Dict[str, Iterable[Instance]]"
create_serialization_dir,"Callable[[Params, str, bool, bool],None]"
params,Params
serialization_dir,str
recover,bool
force,bool
train_model,"Callable[[Params, str, bool, bool, bool],Model]"
params,Params
serialization_dir,str
file_friendly_logging,bool
recover,bool
force,bool
from_params,"Callable[[_, List, Params],_]"
model_parameters,List
params,Params
parameter_groups,Any
__init__,"Callable[[_, _],None]"
step,"Callable[[_, float, Union[int, None]],_]"
metric,float
from_params,"Callable[[_, torch.optim.Optimizer, Params],_]"
optimizer,torch.optim.Optimizer
params,Params
__init__,"Callable[[_, torch.optim.lr_scheduler._LRScheduler],None]"
lr_scheduler,torch.optim.lr_scheduler._LRScheduler
step,"Callable[[_, float, Union[int, None]],_]"
metric,float
__init__,"Callable[[_, torch.optim.lr_scheduler.ReduceLROnPlateau],None]"
lr_scheduler,torch.optim.lr_scheduler.ReduceLROnPlateau
step,"Callable[[_, float, Union[int, None]],_]"
metric,float
__init__,"Callable[[_, torch.optim.Optimizer, int, int, float, int],None]"
optimizer,torch.optim.Optimizer
model_size,int
warmup_steps,int
factor,float
last_epoch,int
__init__,"Callable[[_, torch.optim.Optimizer, int, int, float, int, int, bool, bool, float],None]"
optimizer,torch.optim.Optimizer
num_epochs,int
num_steps_per_epoch,int
cut_frac,float
ratio,int
last_epoch,int
gradual_unfreezing,bool
discriminative_fine_tuning,bool
decay_factor,float
__init__,"Callable[[_, torch.optim.Optimizer, int, float, float, float, int],None]"
optimizer,torch.optim.Optimizer
t_initial,int
t_mul,float
eta_min,float
eta_mul,float
last_epoch,int
self._last_restart,int
self._cycle_counter,int
self._cycle_len,int
self._n_restarts,int
self._initialized,bool
sparse_clip_norm,"Callable[[_, _, _],float]"
__init__,"Callable[[_, SummaryWriter, SummaryWriter],None]"
train_log,SummaryWriter
validation_log,SummaryWriter
_item,"Callable[[Any],_]"
value,Any
add_train_scalar,"Callable[[_, str, float, int],None]"
name,str
value,float
global_step,int
add_train_histogram,"Callable[[_, str, torch.Tensor, int],None]"
name,str
global_step,int
add_validation_scalar,"Callable[[_, str, float, int],None]"
name,str
value,float
global_step,int
time_to_str,"Callable[[int],str]"
timestamp,int
str_to_time,"Callable[[str],datetime.datetime]"
time_str,str
pieces,Any
__init__,"Callable[[_, Model, torch.optim.Optimizer, DataIterator, Iterable[Instance], Union[Iterable[Instance], None], Union[int, None], str, DataIterator, bool, int, Union[str, None], int, int, float, Union[int, List], Union[float, None], Union[float, None], Union[LearningRateScheduler, None], int, int, bool, bool],None]"
model,Model
optimizer,torch.optim.Optimizer
iterator,DataIterator
validation_dataset,"Union[Iterable[Instance], None]"
validation_metric,str
validation_iterator,DataIterator
shuffle,bool
num_epochs,int
num_serialized_models_to_keep,int
keep_serialized_model_every_num_seconds,int
model_save_interval,float
summary_interval,int
histogram_interval,int
should_log_parameter_statistics,bool
should_log_learning_rate,bool
_enable_gradient_clipping,"Callable[[_],None]"
_enable_activation_logging,"Callable[[_],None]"
batch_loss,"Callable[[_, torch.Tensor, bool],torch.Tensor]"
for_training,bool
_get_metrics,"Callable[[_, float, int, bool],Dict[str, float]]"
total_loss,float
num_batches,int
reset,bool
_train_epoch,"Callable[[_, int],Dict[str, float]]"
epoch,int
_should_stop_early,"Callable[[_, List[float]],bool]"
_parameter_and_gradient_statistics_to_tensorboard,"Callable[[_, int, float],None]"
epoch,int
batch_grad_norm,float
_learning_rates_to_tensorboard,"Callable[[_, int],_]"
batch_num_total,int
_histograms_to_tensorboard,"Callable[[_, int, Set[str]],None]"
epoch,int
_metrics_to_tensorboard,"Callable[[_, int, dict, dict],None]"
epoch,int
train_metrics,dict
val_metrics,dict
_metrics_to_console,"Callable[[_, dict, dict],None]"
train_metrics,dict
val_metrics,dict
_is_best_so_far,"Callable[[_, float, List[float]],_]"
this_epoch_val_metric,float
_description_from_metrics,"Callable[[_, Dict[str, float]],str]"
_save_checkpoint,"Callable[[_, Union[int, str], List[float], Union[bool, None]],None]"
int_epochs,Any
_restore_checkpoint,"Callable[[_],Tuple[int, List[float]]]"
from_params,"Callable[[_, Model, str, DataIterator, Iterable[Instance], Union[Iterable[Instance], None], Params, DataIterator],Trainer]"
model,Model
serialization_dir,str
iterator,DataIterator
validation_data,"Union[Iterable[Instance], None]"
params,Params
validation_iterator,DataIterator
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, List[Dict[str, Any]]],_]"
batched_metadata,"List[Dict[str, Any]]"
gold_mentions,"Set[Tuple[int, int]]"
predicted_spans,"Set[Tuple[int, int]]"
get_metric,"Callable[[_, bool],float]"
reset,bool
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None], int],_]"
mask,"Union[torch.Tensor, None]"
end_index,int
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_, str, str],None]"
evalb_directory_path,str
evalb_param_filename,str
__call__,"Callable[[_, List[Tree], List[Tree]],None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
compile_evalb,"Callable[[str],_]"
evalb_directory_path,str
clean_evalb,"Callable[[str],_]"
evalb_directory_path,str
__init__,"Callable[[_, Iterable[float], Set[int]],None]"
reset,"Callable[[_],None]"
_ngrams,"Callable[[_, torch.LongTensor, int],_]"
ngram_size,int
_get_modified_precision_counts,"Callable[[_, torch.LongTensor, torch.LongTensor, int],Tuple[int, int]]"
ngram_size,int
_get_brevity_penalty,"Callable[[_],float]"
__call__,"Callable[[_, torch.LongTensor, torch.LongTensor],None]"
get_metric,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, int],None]"
positive_label,int
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_, List[int]],None]"
__call__,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_],None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_],None]"
get_metric,"Callable[[_, bool],Tuple[float, float]]"
reset,bool
__init__,"Callable[[_, int, bool],None]"
top_k,int
tie_break,bool
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, List[Dict[str, Any]]],_]"
metadata_list,"List[Dict[str, Any]]"
get_metric,"Callable[[_, bool],Tuple[float, float, float]]"
reset,bool
predicted_clusters_to_ids,"Dict[Tuple[int, int], int]"
clusters,"List[List[Tuple[int, int]]]"
predicted_cluster_id,int
__init__,"Callable[[_, Vocabulary, str, List[str], Union[str, None], Union[TAGS_TO_SPANS_FUNCTION_TYPE, None]],None]"
vocabulary,Vocabulary
tag_namespace,str
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None], Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
prediction_map,"Union[torch.Tensor, None]"
replacement_span,TypedStringSpan
get_metric,"Callable[[_, bool],_]"
reset,bool
_compute_metrics,"Callable[[int, int, int],_]"
true_positives,int
false_positives,int
false_negatives,int
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
reset,"Callable[[_],None]"
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
__init__,"Callable[[_],None]"
__call__,"Callable[[_, torch.Tensor, torch.Tensor, Union[torch.Tensor, None]],_]"
mask,"Union[torch.Tensor, None]"
get_metric,"Callable[[_, bool],_]"
reset,bool
allowed_transitions,"Callable[[str, Dict[int, str]],List[Tuple[int, int]]]"
constraint_type,str
is_transition_allowed,"Callable[[str, str, str, str, str],_]"
constraint_type,str
from_tag,str
from_entity,str
to_tag,str
to_entity,str
__init__,"Callable[[_, int, List[Tuple[int, int]], bool],None]"
num_tags,int
constraints,"List[Tuple[int, int]]"
include_start_end_transitions,bool
viterbi_tags,"Callable[[_, torch.Tensor, torch.Tensor],List[Tuple[List[int], float]]]"
SpanPruner,"Callable[[],Pruner]"
__init__,"Callable[[_, int, int, Union[int, Sequence[int]], Union[int, Sequence[int]], Union[float, Sequence[float]]],None]"
input_dim,int
num_layers,int
output_dims,"Union[int, Sequence[int]]"
pool_sizes,"Union[int, Sequence[int]]"
dropout,"Union[float, Sequence[float]]"
__init__,"Callable[[_, int, float],None]"
dimension,int
eps,float
__init__,"Callable[[_, int, bool, List[float], bool],None]"
mixture_size,int
do_layer_norm,bool
trainable,bool
forward,"Callable[[_, List[torch.Tensor], torch.Tensor],torch.Tensor]"
tensors,List[torch.Tensor]
__init__,"Callable[[_, str, str, int, bool, bool, float, List[str], bool, List[float], torch.nn.Module],None]"
options_file,str
weight_file,str
num_output_representations,int
requires_grad,bool
do_layer_norm,bool
dropout,float
keep_sentence_boundaries,bool
module,torch.nn.Module
self._scalar_mixes,Any
forward,"Callable[[_, torch.Tensor, torch.Tensor],Dict[str, Union[torch.Tensor, List[torch.Tensor]]]]"
from_params,"Callable[[_, Params],Elmo]"
params,Params
batch_to_ids,"Callable[[List[List[str]]],torch.Tensor]"
batch,List[List[str]]
__init__,"Callable[[_, str, str, bool],None]"
options_file,str
weight_file,str
requires_grad,bool
forward,"Callable[[_, torch.Tensor],Dict[str, torch.Tensor]]"
__init__,"Callable[[_, str, str, bool, List[str]],None]"
options_file,str
weight_file,str
requires_grad,bool
forward,"Callable[[_, torch.Tensor, torch.Tensor],Dict[str, Union[torch.Tensor, List[torch.Tensor]]]]"
create_cached_cnn_embeddings,"Callable[[_, List[str]],None]"
embedding_dim,int
num_heads,int
embedding_dropout_probability,float
attention_dropout_probability,float
residual_dropout_probability,float
activation_function,str
__init__,"Callable[[_, int, int, int],None]"
nf,int
rf,int
nx,int
__init__,"Callable[[_, int, int, TransformerConfig, bool],None]"
nx,int
n_ctx,int
config,TransformerConfig
scale,bool
split_heads,"Callable[[_, torch.Tensor, bool],_]"
k,bool
__init__,"Callable[[_, int, TransformerConfig],None]"
n_state,int
config,TransformerConfig
__init__,"Callable[[_, int, TransformerConfig, bool],None]"
n_ctx,int
config,TransformerConfig
scale,bool
__init__,"Callable[[_, int, int, int, int, int, float, float, float, str, str, bool, int],None]"
vocab_size,int
n_ctx,int
embedding_dim,int
num_heads,int
num_layers,int
embedding_dropout_probability,float
attention_dropout_probability,float
residual_dropout_probability,float
activation_function,str
model_path,str
requires_grad,bool
n_special,int
forward,"Callable[[_, torch.Tensor],List[torch.Tensor]]"
load_weights,"Callable[[_, str, int, int, int, int, List[str]],None]"
transformer_model_path,str
n_ctx,int
n_special,int
n_transfer,int
n_embd,int
init_params,List[np.ndarray]
dump_weights,"Callable[[_, str, int],None]"
output_dir,str
num_pieces,int
__init__,"Callable[[_, torch.nn.Module],None]"
scorer,torch.nn.Module
forward,"Callable[[_, torch.FloatTensor, torch.LongTensor, int],Tuple[torch.FloatTensor, torch.LongTensor, torch.LongTensor, torch.FloatTensor]]"
num_items_to_keep,int
__init__,"Callable[[_, int, int, int, float, bool],None]"
input_size,int
hidden_size,int
num_layers,int
recurrent_dropout_probability,float
use_highway,bool
forward,"Callable[[_, PackedSequence, Union[Tuple[torch.Tensor, torch.Tensor], None]],_]"
inputs,PackedSequence
initial_state,"Union[Tuple[torch.Tensor, torch.Tensor], None]"
__init__,"Callable[[_, bool],None]"
stateful,bool
sort_and_run_forward,"Callable[[_, Callable[[PackedSequence, Union[RnnState, None]],Tuple[Union[PackedSequence, torch.Tensor], RnnState]], torch.Tensor, torch.Tensor, Union[RnnState, None]],_]"
module,"Callable[[PackedSequence, Union[RnnState, None]],Tuple[Union[PackedSequence, torch.Tensor], RnnState]]"
_get_initial_states,"Callable[[_, int, int, torch.LongTensor],Union[RnnState, None]]"
batch_size,int
num_valid,int
_update_states,"Callable[[_, RnnStateStorage, torch.LongTensor],None]"
final_states,RnnStateStorage
_choice,"Callable[[int, int],Tuple[np.ndarray, int]]"
num_words,int
num_samples,int
__init__,"Callable[[_, int, int, int, bool, int, bool, bool],None]"
num_words,int
embedding_dim,int
num_samples,int
sparse,bool
unk_id,int
use_character_inputs,bool
use_fast_sampler,bool
multi_perspective_match,"Callable[[torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
multi_perspective_match_pairwise,"Callable[[torch.Tensor, torch.Tensor, torch.Tensor, float],torch.Tensor]"
eps,float
__init__,"Callable[[_, int, int, bool, bool, bool, bool, bool, bool],None]"
hidden_dim,int
num_perspectives,int
share_weights_between_directions,bool
is_forward,bool
with_full_match,bool
with_maxpool_match,bool
with_attentive_match,bool
with_max_attentive_match,bool
get_output_dim,"Callable[[_],int]"
forward,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor],Tuple[List[torch.Tensor], List[torch.Tensor]]]"
matching_vector_1,List[torch.Tensor]
matching_vector_2,List[torch.Tensor]
__init__,"Callable[[_, int, int, int, bool, float, Union[float, None], Union[float, None]],None]"
input_size,int
hidden_size,int
cell_size,int
go_forward,bool
recurrent_dropout_probability,float
forward,"Callable[[_, torch.FloatTensor, List[int], Union[Tuple[torch.Tensor, torch.Tensor], None]],_]"
initial_state,"Union[Tuple[torch.Tensor, torch.Tensor], None]"
__init__,"Callable[[_, int, int, bool, float, bool, bool],None]"
input_size,int
hidden_size,int
go_forward,bool
recurrent_dropout_probability,float
use_highway,bool
use_input_projection_bias,bool
forward,"Callable[[_, PackedSequence, Union[Tuple[torch.Tensor, torch.Tensor], None]],_]"
inputs,PackedSequence
initial_state,"Union[Tuple[torch.Tensor, torch.Tensor], None]"
__init__,"Callable[[_, int, int, int, bool],None]"
input_size,int
hidden_size,int
num_layers,int
train,bool
forward,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, None]]"
__init__,"Callable[[_, int, int, int, float],None]"
input_size,int
hidden_size,int
num_layers,int
recurrent_dropout_probability,float
reset_parameters,"Callable[[_],None]"
forward,"Callable[[_, PackedSequence, torch.Tensor],Tuple[PackedSequence, torch.Tensor]]"
inputs,PackedSequence
__init__,"Callable[[_, int, float, float],None]"
size,int
gamma0,float
eps,float
__init__,"Callable[[_, int, int, int, float, bool, bool],None]"
input_size,int
hidden_size,int
num_layers,int
recurrent_dropout_probability,float
use_highway,bool
use_input_projection_bias,bool
forward,"Callable[[_, PackedSequence, Union[Tuple[torch.Tensor, torch.Tensor], None]],_]"
inputs,PackedSequence
initial_state,"Union[Tuple[torch.Tensor, torch.Tensor], None]"
__init__,"Callable[[_, int, int, Union[int, Sequence[int]], Union[Activation, Sequence[Activation]], Union[float, Sequence[float]]],None]"
input_dim,int
num_layers,int
hidden_dims,"Union[int, Sequence[int]]"
activations,"Union[Activation, Sequence[Activation]]"
dropout,"Union[float, Sequence[float]]"
from_params,"Callable[[_, Params],_]"
params,Params
__init__,"Callable[[_, int, int, Callable[[torch.Tensor],torch.Tensor]],None]"
input_dim,int
num_layers,int
__init__,"Callable[[_, int, int, int, int, bool, float, Union[float, None], Union[float, None]],None]"
input_size,int
hidden_size,int
cell_size,int
num_layers,int
requires_grad,bool
recurrent_dropout_probability,float
_lstm_forward,"Callable[[_, PackedSequence, Union[Tuple[torch.Tensor, torch.Tensor], None]],Tuple[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]]]"
inputs,PackedSequence
initial_state,"Union[Tuple[torch.Tensor, torch.Tensor], None]"
hidden_states,"List[Union[Tuple[torch.Tensor, torch.Tensor], None]]"
final_state_tuple,"Tuple[torch.FloatTensor, torch.FloatTensor]"
load_weights,"Callable[[_, str],None]"
weight_file,str
__init__,"Callable[[_, int, int, int, int, int, int, bool, float, float, float],None]"
input_dim,int
hidden_dim,int
projection_dim,int
feedforward_hidden_dim,int
num_layers,int
num_attention_heads,int
use_positional_encoding,bool
dropout_prob,float
residual_dropout_prob,float
attention_dropout_prob,float
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, Type[torch.nn.modules.RNNBase]],None]"
module_class,Type[torch.nn.modules.RNNBase]
__call__,"Callable[[_],PytorchSeq2SeqWrapper]"
from_params,"Callable[[_, Params],PytorchSeq2SeqWrapper]"
params,Params
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
is_bidirectional,"Callable[[_],bool]"
__init__,"Callable[[_, int, Sequence[Sequence[int]], str, bool, float],None]"
input_dim,int
layers,Sequence[Sequence[int]]
direction,str
do_weight_norm,bool
dropout,float
__init__,"Callable[[_, int, Sequence[Sequence[Sequence[int]]], float, bool],None]"
input_dim,int
layers,Sequence[Sequence[Sequence[int]]]
dropout,float
return_all_layers,bool
layer_outputs,List[List[torch.Tensor]]
outputs,List[torch.Tensor]
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
is_bidirectional,"Callable[[_],bool]"
__init__,"Callable[[_, int, int, int, int, int, float],None]"
num_heads,int
input_dim,int
attention_dim,int
values_dim,int
output_projection_dim,int
attention_dropout_prob,float
__init__,"Callable[[_, int, int, SimilarityFunction, int, str, int],None]"
input_dim,int
projection_dim,int
similarity_function,SimilarityFunction
num_attention_heads,int
combination,str
output_dim,int
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, int],None]"
input_dim,int
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, torch.nn.Module, bool],None]"
module,torch.nn.Module
stateful,bool
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
is_bidirectional,"Callable[[_],bool]"
attention,"Callable[[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, Callable],Tuple[torch.Tensor, torch.Tensor]]"
dropout,Callable
subsequent_mask,"Callable[[int, str],torch.Tensor]"
size,int
device,str
__init__,"Callable[[_, int, int],None]"
input_dim,int
max_len,int
__init__,"Callable[[_, int, int, float],None]"
input_dim,int
ff_dim,int
dropout,float
__init__,"Callable[[_, torch.nn.Module, int, bool],None]"
layer,torch.nn.Module
num_layers,int
return_all_layers,bool
__init__,"Callable[[_, int, float],None]"
size,int
dropout,float
__init__,"Callable[[_, int, torch.nn.Module, torch.nn.Module, float],None]"
size,int
self_attn,torch.nn.Module
feed_forward,torch.nn.Module
dropout,float
__init__,"Callable[[_, int, int, float],None]"
num_heads,int
input_dim,int
dropout,float
make_model,"Callable[[int, int, int, int, float, bool],TransformerEncoder]"
num_layers,int
input_size,int
hidden_size,int
heads,int
dropout,float
return_all_layers,bool
__init__,"Callable[[_, int, int, int, float, float, bool],None]"
input_dim,int
hidden_dim,int
num_layers,int
dropout,float
input_dropout,float
return_all_layers,bool
get_attention_masks,"Callable[[_, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
is_bidirectional,"Callable[[_],bool]"
__init__,"Callable[[_, int, int, str, Activation],None]"
tensor_1_dim,int
tensor_2_dim,int
combination,str
activation,Activation
__init__,"Callable[[_, SimilarityFunction],None]"
similarity_function,SimilarityFunction
__init__,"Callable[[_, int, int, Activation, bool, int],None]"
matrix_1_dim,int
matrix_2_dim,int
activation,Activation
use_input_biases,bool
label_dim,int
__init__,"Callable[[_, Type[torch.nn.modules.RNNBase]],None]"
module_class,Type[torch.nn.modules.RNNBase]
__call__,"Callable[[_],PytorchSeq2VecWrapper]"
from_params,"Callable[[_, Params],PytorchSeq2VecWrapper]"
params,Params
__init__,"Callable[[_, torch.nn.modules.RNNBase],None]"
module,torch.nn.modules.RNNBase
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, int, int, _, Activation, Union[int, None]],None]"
embedding_dim,int
num_filters,int
conv_layer_activation,Activation
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, int, Sequence[Sequence[int]], int, int, str, str, bool],None]"
embedding_dim,int
filters,Sequence[Sequence[int]]
num_highway,int
projection_dim,int
activation,str
projection_location,str
do_layer_norm,bool
self._convolutions,List[torch.nn.Module]
self._layer_norm,Callable
forward,"Callable[[_, torch.Tensor, torch.Tensor],Dict[str, torch.Tensor]]"
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, int, bool],None]"
embedding_dim,int
averaged,bool
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, int, int, Activation, bool],None]"
vector_dim,int
matrix_dim,int
activation,Activation
normalize,bool
__init__,"Callable[[_, SimilarityFunction, bool],None]"
similarity_function,SimilarityFunction
normalize,bool
__init__,"Callable[[_, int, int, str, Activation, bool],None]"
tensor_1_dim,int
tensor_2_dim,int
combination,str
activation,Activation
normalize,bool
__init__,"Callable[[_, bool],None]"
normalize,bool
__init__,"Callable[[_, int, int, int, int, int, SimilarityFunction],None]"
num_heads,int
tensor_1_dim,int
tensor_1_projected_dim,int
tensor_2_dim,int
tensor_2_projected_dim,int
internal_similarity,SimilarityFunction
__init__,"Callable[[_, int, int, Activation],None]"
tensor_1_dim,int
tensor_2_dim,int
activation,Activation
__init__,"Callable[[_, bool],None]"
scale_output,bool
__init__,"Callable[[_, int, int, str, Activation],None]"
tensor_1_dim,int
tensor_2_dim,int
combination,str
activation,Activation
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, str, str, bool, float, bool, int, List[str], List[float]],None]"
options_file,str
weight_file,str
do_layer_norm,bool
dropout,float
requires_grad,bool
projection_dim,int
from_params,"Callable[[_, Vocabulary, Params],ElmoTokenEmbedder]"
vocab,Vocabulary
params,Params
__init__,"Callable[[_, BertModel, bool],None]"
bert_model,BertModel
top_layer_only,bool
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, str, bool, bool],None]"
pretrained_model,str
requires_grad,bool
top_layer_only,bool
__init__,"Callable[[_, Embedding, Seq2VecEncoder, float],None]"
embedding,Embedding
encoder,Seq2VecEncoder
dropout,float
get_output_dim,"Callable[[_],int]"
from_params,"Callable[[_, Vocabulary, Params],TokenCharactersEncoder]"
vocab,Vocabulary
params,Params
embedding_params,Params
encoder_params,Params
__init__,"Callable[[_, int, int, int, torch.FloatTensor, int, bool, float, float, bool, bool],None]"
num_embeddings,int
embedding_dim,int
projection_dim,int
padding_index,int
trainable,bool
max_norm,float
norm_type,float
scale_grad_by_freq,bool
sparse,bool
get_output_dim,"Callable[[_],int]"
from_params,"Callable[[_, Vocabulary, Params],Embedding]"
vocab,Vocabulary
params,Params
_read_pretrained_embeddings_file,"Callable[[str, int, Vocabulary, str],torch.FloatTensor]"
file_uri,str
embedding_dim,int
vocab,Vocabulary
namespace,str
_read_embeddings_from_text_file,"Callable[[str, int, Vocabulary, str],torch.FloatTensor]"
file_uri,str
embedding_dim,int
vocab,Vocabulary
namespace,str
_read_embeddings_from_hdf5,"Callable[[str, int, Vocabulary, str],torch.FloatTensor]"
embeddings_filename,str
embedding_dim,int
vocab,Vocabulary
namespace,str
format_embeddings_file_uri,"Callable[[str, Union[str, None]],str]"
main_file_path_or_url,str
main_file_uri,str
parse_embeddings_file_uri,"Callable[[str],EmbeddingsFileURI]"
uri,str
__init__,"Callable[[_, str, str, str],None]"
file_uri,str
encoding,str
cache_dir,str
self._archive_handle,Any
_open_inside_zip,"Callable[[_, str, Union[str, None]],None]"
archive_path,str
_open_inside_tar,"Callable[[_, str, Union[str, None]],None]"
archive_path,str
read,"Callable[[_],str]"
readline,"Callable[[_],str]"
close,"Callable[[_],None]"
__enter__,"Callable[[_],EmbeddingsTextFile]"
__exit__,"Callable[[_, _, _, _],None]"
__iter__,"Callable[[_],EmbeddingsTextFile]"
__next__,"Callable[[_],str]"
_get_the_only_file_in_the_archive,"Callable[[Sequence[str], str],str]"
archive_path,str
_get_num_tokens_from_first_line,"Callable[[str],Union[int, None]]"
line,str
__init__,"Callable[[_, OpenaiTransformer, bool],None]"
transformer,OpenaiTransformer
top_layer_only,bool
forward,"Callable[[_, Dict[str, torch.Tensor], int],torch.Tensor]"
text_field_input,"Dict[str, torch.Tensor]"
num_wrapping_dims,int
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, Dict[str, TokenEmbedder], Dict[str, List[str]], bool],None]"
embedder_to_indexer_map,"Dict[str, List[str]]"
allow_unmatched_keys,bool
get_output_dim,"Callable[[_],int]"
forward,"Callable[[_, Dict[str, torch.Tensor], int],torch.Tensor]"
text_field_input,"Dict[str, torch.Tensor]"
num_wrapping_dims,int
from_params,"Callable[[_, Vocabulary, Params],BasicTextFieldEmbedder]"
vocab,Vocabulary
params,Params
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, int],None]"
input_dim,int
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, int, str, str, int, int, bool, bool],None]"
input_dim,int
forward_combination,str
backward_combination,str
num_width_embeddings,int
span_width_embedding_dim,int
bucket_widths,bool
use_sentinels,bool
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
__init__,"Callable[[_, int, str, int, int, bool, bool],None]"
input_dim,int
combination,str
num_width_embeddings,int
span_width_embedding_dim,int
bucket_widths,bool
use_exclusive_start_indices,bool
get_input_dim,"Callable[[_],int]"
get_output_dim,"Callable[[_],int]"
forward,"Callable[[_, torch.FloatTensor, torch.LongTensor, torch.LongTensor, torch.LongTensor],None]"
make_app,"Callable[[Predictor, List[str], str, Callable[[JsonDict],JsonDict], str],Flask]"
predictor,Predictor
static_dir,str
sanitizer,"Callable[[JsonDict],JsonDict]"
title,str
handle_invalid_usage,"Callable[[ServerError],Response]"
error,ServerError
index,"Callable[[],Response]"
predict,"Callable[[],Response]"
predict_batch,"Callable[[],Response]"
static_proxy,"Callable[[str],Response]"
path,str
_get_predictor,"Callable[[argparse.Namespace],Predictor]"
_html,"Callable[[str, List[str]],str]"
title,str
make_app,"Callable[[Sequence[str]],Flask]"
handle_invalid_usage,"Callable[[ServerError],Response]"
error,ServerError
index,"Callable[[],Response]"
wizard,"Callable[[],Response]"
api,"Callable[[],Response]"
construct_prefix_tree,"Callable[[Union[torch.Tensor, List[List[List[int]]]], Union[torch.Tensor, None]],_]"
targets,"Union[torch.Tensor, List[List[List[int]]]]"
target_mask,"Union[torch.Tensor, None]"
__init__,"Callable[[_, int, int],None]"
beam_size,int
per_node_beam_size,int
search,"Callable[[_, int, StateType, TransitionFunction, bool],Mapping[int, Sequence[StateType]]]"
num_steps,int
initial_state,StateType
transition_function,TransitionFunction
keep_final_unfinished_states,bool
finished_states,"Dict[int, List[StateType]]"
next_states,"Dict[int, List[StateType]]"
best_states,"Dict[int, Sequence[StateType]]"
__init__,"Callable[[_, Union[int, None], torch.Tensor, torch.Tensor, int],None]"
per_node_beam_size,int
search,"Callable[[_, State, TransitionFunction],Dict[int, List[State]]]"
initial_state,State
transition_function,TransitionFunction
finished_states,"Dict[int, List[State]]"
next_states,"Dict[int, List[State]]"
best_states,"Dict[int, List[State]]"
__init__,"Callable[[_, int, int, Attention, Activation, bool, int, bool, float, int],None]"
encoder_output_dim,int
action_embedding_dim,int
input_attention,Attention
activation,Activation
predict_start_type_separately,bool
num_start_types,int
add_action_bias,bool
dropout,float
num_layers,int
take_step,"Callable[[_, GrammarBasedState, int, List[Set[int]]],List[GrammarBasedState]]"
state,GrammarBasedState
max_actions,int
allowed_actions,List[Set[int]]
_update_decoder_state,"Callable[[_, GrammarBasedState],Dict[str, torch.Tensor]]"
state,GrammarBasedState
_compute_action_probabilities,"Callable[[_, GrammarBasedState, torch.Tensor, torch.Tensor, torch.Tensor],Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]]"
state,GrammarBasedState
batch_results,"Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]"
_construct_next_states,"Callable[[_, GrammarBasedState, Dict[str, torch.Tensor], Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]], int, List[Set[int]]],_]"
state,GrammarBasedState
updated_rnn_state,"Dict[str, torch.Tensor]"
batch_action_probs,"Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]"
max_actions,int
allowed_actions,List[Set[int]]
make_state,"Callable[[int, int, torch.Tensor, torch.Tensor],GrammarBasedState]"
group_index,int
action,int
group_log_probs,List[torch.Tensor]
_take_first_step,"Callable[[_, GrammarBasedState, List[Set[int]]],List[GrammarBasedState]]"
state,GrammarBasedState
allowed_actions,List[Set[int]]
best_next_states,"Dict[int, List[Tuple[int, int, int]]]"
attend_on_question,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
__init__,"Callable[[_, int, int, Attention, Activation, bool, int, bool, FeedForward, float],None]"
encoder_output_dim,int
action_embedding_dim,int
input_attention,Attention
activation,Activation
predict_start_type_separately,bool
num_start_types,int
add_action_bias,bool
mixture_feedforward,FeedForward
dropout,float
_compute_action_probabilities,"Callable[[_, CoverageState, torch.Tensor, torch.Tensor, torch.Tensor],Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]]"
state,CoverageState
batch_results,"Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]"
_get_linked_logits_addition,"Callable[[ChecklistStatelet, List[int], torch.Tensor],torch.Tensor]"
checklist_state,ChecklistStatelet
__init__,"Callable[[_, int, int, Attention, Activation, bool, int, bool, float],None]"
encoder_output_dim,int
action_embedding_dim,int
input_attention,Attention
activation,Activation
predict_start_type_separately,bool
num_start_types,int
add_action_bias,bool
dropout,float
_compute_action_probabilities,"Callable[[_, CoverageState, torch.Tensor, torch.Tensor, torch.Tensor],Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]]"
state,CoverageState
batch_results,"Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]"
_get_predicted_embedding_addition,"Callable[[_, ChecklistStatelet, List[int], torch.Tensor],torch.Tensor]"
checklist_state,ChecklistStatelet
take_step,"Callable[[_, StateType, int, List[Set]],List[StateType]]"
state,StateType
max_actions,int
__init__,"Callable[[_, int, int, Attention, Activation, bool, int, bool, FeedForward, float, int],None]"
encoder_output_dim,int
action_embedding_dim,int
input_attention,Attention
activation,Activation
predict_start_type_separately,bool
num_start_types,int
add_action_bias,bool
mixture_feedforward,FeedForward
dropout,float
num_layers,int
_compute_action_probabilities,"Callable[[_, GrammarBasedState, torch.Tensor, torch.Tensor, torch.Tensor],Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]]"
state,GrammarBasedState
batch_results,"Dict[int, List[Tuple[int, Any, Any, Any, List[int]]]]"
__init__,"Callable[[_, int, bool, int, int, int],None]"
beam_size,int
normalize_by_length,bool
max_decoding_steps,int
max_num_decoded_sequences,int
max_num_finished_states,int
decode,"Callable[[_, State, TransitionFunction, Callable[[StateType],torch.Tensor]],Dict[str, torch.Tensor]]"
initial_state,State
transition_function,TransitionFunction
supervision,"Callable[[StateType],torch.Tensor]"
_get_finished_states,"Callable[[_, State, TransitionFunction],List[StateType]]"
initial_state,State
transition_function,TransitionFunction
_prune_beam,"Callable[[List[State], int, bool],List[State]]"
beam_size,int
sort_states,bool
states_by_batch_index,"Dict[int, List[State]]"
_get_model_scores_by_batch,"Callable[[_, List[StateType]],Dict[int, List[torch.Tensor]]]"
batch_scores,"Dict[int, List[torch.Tensor]]"
_get_costs_by_batch,"Callable[[List[StateType], Callable[[StateType],torch.Tensor]],Dict[int, List[torch.Tensor]]]"
cost_function,"Callable[[StateType],torch.Tensor]"
batch_costs,"Dict[int, List[torch.Tensor]]"
_get_best_final_states,"Callable[[_, List[StateType]],Dict[int, List[StateType]]]"
batch_states,"Dict[int, List[StateType]]"
best_states,"Dict[int, List[StateType]]"
__init__,"Callable[[_, int],None]"
beam_size,int
decode,"Callable[[_, State, TransitionFunction, Tuple[torch.Tensor, torch.Tensor]],Dict[str, torch.Tensor]]"
initial_state,State
transition_function,TransitionFunction
supervision,"Tuple[torch.Tensor, torch.Tensor]"
finished_states,"Dict[int, List[State]]"
decode,"Callable[[_, State, TransitionFunction, SupervisionType],Dict[str, torch.Tensor]]"
initial_state,State
transition_function,TransitionFunction
supervision,SupervisionType
__init__,"Callable[[_, List[str], Dict[str, ActionRepresentation], Callable[[str],bool], bool],None]"
is_nonterminal,"Callable[[str],bool]"
reverse_productions,bool
is_finished,"Callable[[_],bool]"
get_valid_actions,"Callable[[_],ActionRepresentation]"
take_action,"Callable[[_, str],GrammarStatelet]"
production_rule,str
_get_productions_from_string,"Callable[[str],List[str]]"
production_string,str
__init__,"Callable[[_, List[str], Dict[Tuple[str, str], List[str]], Dict[str, Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]], Dict[str, Tuple[torch.Tensor, torch.Tensor, int]], Callable[[str],bool]],None]"
lambda_stacks,"Dict[Tuple[str, str], List[str]]"
valid_actions,"Dict[str, Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]"
context_actions,"Dict[str, Tuple[torch.Tensor, torch.Tensor, int]]"
is_nonterminal,"Callable[[str],bool]"
is_finished,"Callable[[_],bool]"
get_valid_actions,"Callable[[_],Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]"
take_action,"Callable[[_, str],LambdaGrammarStatelet]"
production_rule,str
_get_productions_from_string,"Callable[[str],List[str]]"
production_string,str
__init__,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, Dict[int, int]],None]"
update,"Callable[[_, torch.Tensor],ChecklistStatelet]"
__init__,"Callable[[_, List[int], List[List[int]], List[torch.Tensor], List[RnnStatelet], List[GrammarStatelet], List[List[ProductionRule]], List[Any], List],None]"
action_history,List[List[int]]
score,List[torch.Tensor]
possible_actions,List[List[ProductionRule]]
debug_info,List
new_state_from_group_index,"Callable[[_, int, int, torch.Tensor, RnnStatelet, List[int], List[float], torch.Tensor],GrammarBasedState]"
group_index,int
action,int
new_rnn_state,RnnStatelet
print_action_history,"Callable[[_, int],None]"
group_index,int
get_valid_actions,"Callable[[_],List[Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]]"
is_finished,"Callable[[_],bool]"
combine_states,"Callable[[_, Sequence[GrammarBasedState]],GrammarBasedState]"
__init__,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, List[torch.Tensor], List[torch.Tensor]],None]"
encoder_outputs,List[torch.Tensor]
encoder_output_mask,List[torch.Tensor]
__init__,"Callable[[_, List[int], List[List[int]], List[torch.Tensor], List[RnnStatelet], List[GrammarStatelet], List[ChecklistStatelet], List[List[ProductionRule]], List[Any], List],None]"
action_history,List[List[int]]
score,List[torch.Tensor]
possible_actions,List[List[ProductionRule]]
debug_info,List
new_state_from_group_index,"Callable[[_, int, int, torch.Tensor, RnnStatelet, List[int], List[float], torch.Tensor],CoverageState]"
group_index,int
action,int
new_rnn_state,RnnStatelet
combine_states,"Callable[[_, Sequence[CoverageState]],CoverageState]"
__init__,"Callable[[_, List[int], List[List[int]], List[torch.Tensor]],None]"
action_history,List[List[int]]
score,List[torch.Tensor]
is_finished,"Callable[[_],bool]"
combine_states,"Callable[[_, List[T]],T]"
evaluate_file,"Callable[[str],str]"
filename,str
evaluate_snippet,"Callable[[str, str],str]"
_filename,str
expr,str
parse_overrides,"Callable[[str],Dict[str, Any]]"
serialized_overrides,str
__init__,"Callable[[_, Dict[str, Any], str, bool, Dict[str, str]],None]"
history,str
loading_from_archive,bool
add_file_to_archive,"Callable[[_, str],None]"
name,str
pop,"Callable[[_, str, Any],Any]"
key,str
default,Any
pop_int,"Callable[[_, str, Any],int]"
key,str
default,Any
pop_float,"Callable[[_, str, Any],float]"
key,str
default,Any
pop_bool,"Callable[[_, str, Any],bool]"
key,str
default,Any
get,"Callable[[_, str, Any],_]"
key,str
default,Any
pop_choice,"Callable[[_, str, List[Any], bool],Any]"
key,str
default_to_first_choice,bool
duplicate,"Callable[[_],Params]"
assert_empty,"Callable[[_, str],_]"
class_name,str
from_file,"Callable[[str, str, dict],Params]"
params_file,str
params_overrides,str
ext_vars,dict
to_file,"Callable[[_, str, List[List[str]]],None]"
params_file,str
preference_orders,List[List[str]]
as_ordered_dict,"Callable[[_, List[List[str]]],OrderedDict]"
preference_orders,List[List[str]]
pop_choice,"Callable[[Dict[str, Any], str, List[Any], bool, str],Any]"
key,str
default_to_first_choice,bool
history,str
_registry,"Dict[Type, Dict[str, Type]]"
default_implementation,str
register,"Callable[[Type[T], str],_]"
name,str
by_name,"Callable[[Type[T], str],Type[T]]"
name,str
_remove_prefix,"Callable[[str],str]"
class_name,str
full_name,"Callable[[Union[type, None]],str]"
name,str
annotation,type
comment,str
to_json,"Callable[[_],JsonDict]"
__init__,"Callable[[_, List[ConfigItem], str],None]"
typ3,str
__repr__,"Callable[[_],str]"
to_json,"Callable[[_],JsonDict]"
blob,JsonDict
_get_config_type,"Callable[[type],Union[str, None]]"
cla55,type
render_config,"Callable[[Config, str],str]"
config,Config
indent,str
_remove_optional,"Callable[[type],type]"
typ3,type
is_configurable,"Callable[[type],bool]"
typ3,type
_render,"Callable[[ConfigItem, str],str]"
item,ConfigItem
indent,str
BASE_CONFIG,Config
_valid_choices,"Callable[[type],Dict[str, str]]"
cla55,type
configure,"Callable[[str],Union[Config, List[str]]]"
full_path,str
takes_arg,"Callable[[_, str],bool]"
arg,str
remove_optional,"Callable[[type],_]"
annotation,type
create_kwargs,"Callable[[Type[T], Params],Dict[str, Any]]"
params,Params
from_params,"Callable[[Type[T], Params],T]"
params,Params
sanitize,"Callable[[Any],Any]"
x,Any
group_by_count,"Callable[[List[Any], int, Any],List[List[Any]]]"
count,int
default_value,Any
lazy_groups_of,"Callable[[Iterator[A], int],Iterator[List[A]]]"
group_size,int
pad_sequence_to_length,"Callable[[List, int, Callable[[],Any], bool],List]"
sequence,List
desired_length,int
default_value,"Callable[[],Any]"
padding_on_right,bool
add_noise_to_dict_values,"Callable[[Dict[A, float], float],Dict[A, float]]"
noise_param,float
namespace_match,"Callable[[str, str],_]"
pattern,str
namespace,str
prepare_environment,"Callable[[Params],_]"
params,Params
prepare_global_logging,"Callable[[str, bool],None]"
serialization_dir,str
file_friendly_logging,bool
LOADED_SPACY_MODELS,"Dict[Tuple[str, bool, bool, bool], SpacyModelType]"
get_spacy_model,"Callable[[str, bool, bool, bool],SpacyModelType]"
spacy_model_name,str
pos_tags,bool
parse,bool
ner,bool
import_submodules,"Callable[[str],None]"
package_name,str
peak_memory_mb,"Callable[[],float]"
is_lazy,"Callable[[Iterable[A]],bool]"
parse_cuda_device,"Callable[[Union[str, int, List[int]]],Union[int, List[int]]]"
cuda_device,"Union[str, int, List[int]]"
from_pointer_tensor,"Callable[[_, torch.LongTensor],list]"
get_frozen_and_tunable_parameter_names,"Callable[[torch.nn.Module],List]"
model,torch.nn.Module
dump_metrics,"Callable[[str, Dict[str, Any], bool],None]"
file_path,str
log,bool
replace_cr_with_newline,"Callable[[str],_]"
message,str
__init__,"Callable[[_, str, TextIO, bool],None]"
filename,str
terminal,TextIO
file_friendly_terminal_output,bool
url_to_filename,"Callable[[str, str],str]"
url,str
etag,str
filename_to_url,"Callable[[str, str],Tuple[str, str]]"
filename,str
cache_dir,str
cached_path,"Callable[[Union[str, Path], str],str]"
cache_dir,str
split_s3_path,"Callable[[str],Tuple[str, str]]"
url,str
s3_request,"Callable[[Callable],_]"
func,Callable
wrapper,"Callable[[str],_]"
url,str
s3_etag,"Callable[[str],Union[str, None]]"
url,str
s3_get,"Callable[[str, IO],None]"
url,str
temp_file,IO
http_get,"Callable[[str, IO],None]"
url,str
temp_file,IO
get_from_cache,"Callable[[str, str],str]"
url,str
cache_dir,str
read_set_from_file,"Callable[[str],Set[str]]"
filename,str
get_file_extension,"Callable[[str, _, bool],_]"
path,str
lower,bool
default_mininterval,float
set_default_mininterval,"Callable[[float],None]"
value,float
set_slower_interval,"Callable[[bool],None]"
use_slower_interval,bool
check_dimensions_match,"Callable[[int, int, str, str],None]"
dimension_1,int
dimension_2,int
dim_1_name,str
dim_2_name,str
check_for_gpu,"Callable[[int],_]"
device_id,int
check_for_java,"Callable[[],bool]"
ensure_model_can_train_save_and_load,"Callable[[_, str, float, int, Set[str], str],_]"
param_file,str
tolerance,float
cuda_device,int
overrides,str
assert_fields_equal,"Callable[[_, _, _, str, float],None]"
name,str
tolerance,float
check_model_computes_gradients_correctly,"Callable[[Model, Dict[str, Union[Any, Dict[str, Any]]], Set[str]],_]"
model,Model
model_batch,"Dict[str, Union[Any, Dict[str, Any]]]"
__call__,"Callable[[_, torch.Tensor],None]"
from_params,"Callable[[_, Params],Initializer]"
params,Params
uniform_unit_scaling,"Callable[[torch.Tensor, str],_]"
nonlinearity,str
block_orthogonal,"Callable[[torch.Tensor, List[int], float],None]"
gain,float
zero,"Callable[[torch.Tensor],None]"
lstm_hidden_bias,"Callable[[torch.Tensor],None]"
__call__,"Callable[[_, torch.Tensor],None]"
from_params,"Callable[[_, Params],_]"
params,Params
__init__,"Callable[[_, List[Tuple[str, Initializer]], List[str]],None]"
initializers,"List[Tuple[str, Initializer]]"
__call__,"Callable[[_, torch.nn.Module],None]"
module,torch.nn.Module
from_params,"Callable[[_, Iterable[Tuple[str, Params]]],InitializerApplicator]"
params,"Iterable[Tuple[str, Params]]"
decode_mst,"Callable[[numpy.ndarray, int, bool],Tuple[numpy.ndarray, numpy.ndarray]]"
length,int
has_labels,bool
representatives,List[Set[int]]
chu_liu_edmonds,"Callable[[int, numpy.ndarray, List[bool], Dict[int, int], numpy.ndarray, numpy.ndarray, List[Set[int]]],_]"
length,int
representatives,List[Set[int]]
considered_representatives,List[Set[int]]
_find_cycle,"Callable[[List[int], int, List[bool]],Tuple[bool, List[int]]]"
length,int
has_tensor,"Callable[[_],bool]"
move_to_device,"Callable[[_, int],_]"
cuda_device,int
batch_tensor_dicts,"Callable[[List[Dict[str, torch.Tensor]], bool],Dict[str, torch.Tensor]]"
tensor_dicts,"List[Dict[str, torch.Tensor]]"
remove_trailing_dimension,bool
key_to_tensors,"Dict[str, List[torch.Tensor]]"
get_mask_from_sequence_lengths,"Callable[[torch.Tensor, int],torch.Tensor]"
max_length,int
get_final_encoder_states,"Callable[[torch.Tensor, torch.Tensor, bool],torch.Tensor]"
bidirectional,bool
get_dropout_mask,"Callable[[float, torch.Tensor],_]"
dropout_probability,float
masked_softmax,"Callable[[torch.Tensor, torch.Tensor, int],torch.Tensor]"
dim,int
masked_log_softmax,"Callable[[torch.Tensor, torch.Tensor, int],torch.Tensor]"
dim,int
masked_max,"Callable[[torch.Tensor, torch.Tensor, int, bool, float],torch.Tensor]"
dim,int
keepdim,bool
min_val,float
masked_mean,"Callable[[torch.Tensor, torch.Tensor, int, bool, float],torch.Tensor]"
dim,int
keepdim,bool
eps,float
viterbi_decode,"Callable[[torch.Tensor, torch.Tensor, Union[List[int], None]],_]"
tag_observations,"Union[List[int], None]"
get_text_field_mask,"Callable[[Dict[str, torch.Tensor], int],torch.LongTensor]"
text_field_tensors,"Dict[str, torch.Tensor]"
num_wrapping_dims,int
last_dim_softmax,"Callable[[torch.Tensor, Union[torch.Tensor, None]],torch.Tensor]"
mask,"Union[torch.Tensor, None]"
last_dim_log_softmax,"Callable[[torch.Tensor, Union[torch.Tensor, None]],torch.Tensor]"
mask,"Union[torch.Tensor, None]"
sequence_cross_entropy_with_logits,"Callable[[torch.FloatTensor, torch.LongTensor, torch.FloatTensor, bool, str, float],torch.FloatTensor]"
batch_average,bool
average,str
label_smoothing,float
replace_masked_values,"Callable[[torch.Tensor, torch.Tensor, float],torch.Tensor]"
replace_with,float
tensors_equal,"Callable[[torch.Tensor, torch.Tensor, float],bool]"
tolerance,float
device_mapping,"Callable[[int],_]"
cuda_device,int
combine_tensors,"Callable[[str, List[torch.Tensor]],torch.Tensor]"
combination,str
tensors,List[torch.Tensor]
_rindex,"Callable[[Sequence[T], T],int]"
obj,T
_get_combination,"Callable[[str, List[torch.Tensor]],torch.Tensor]"
combination,str
tensors,List[torch.Tensor]
combine_tensors_and_multiply,"Callable[[str, List[torch.Tensor], torch.nn.Parameter],torch.Tensor]"
combination,str
tensors,List[torch.Tensor]
weights,torch.nn.Parameter
_get_combination_and_multiply,"Callable[[str, List[torch.Tensor], torch.nn.Parameter],torch.Tensor]"
combination,str
tensors,List[torch.Tensor]
weight,torch.nn.Parameter
get_combined_dim,"Callable[[str, List[int]],int]"
combination,str
_get_combination_dim,"Callable[[str, List[int]],int]"
combination,str
logsumexp,"Callable[[torch.Tensor, int, bool],torch.Tensor]"
dim,int
keepdim,bool
get_device_of,"Callable[[torch.Tensor],int]"
flatten_and_batch_shift_indices,"Callable[[torch.Tensor, int],torch.Tensor]"
sequence_length,int
batched_index_select,"Callable[[torch.Tensor, torch.LongTensor, Union[torch.LongTensor, None]],torch.Tensor]"
flattened_indices,"Union[torch.LongTensor, None]"
get_range_vector,"Callable[[int, int],torch.Tensor]"
size,int
device,int
bucket_values,"Callable[[torch.Tensor, int, int],torch.Tensor]"
num_identity_buckets,int
num_total_buckets,int
add_sentence_boundary_token_ids,"Callable[[torch.Tensor, torch.Tensor, Any, Any],Tuple[torch.Tensor, torch.Tensor]]"
sentence_begin_token,Any
sentence_end_token,Any
remove_sentence_boundaries,"Callable[[torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
add_positional_features,"Callable[[torch.Tensor, float, float],_]"
min_timescale,float
max_timescale,float
clone,"Callable[[torch.nn.Module, int],torch.nn.ModuleList]"
module,torch.nn.Module
num_copies,int
__init__,"Callable[[_, int, int, int, int],None]"
end_index,int
max_steps,int
beam_size,int
per_node_beam_size,int
search,"Callable[[_, torch.Tensor, StateType, StepFunctionType],Tuple[torch.Tensor, torch.Tensor]]"
start_state,StateType
step,StepFunctionType
predictions,List[torch.Tensor]
backpointers,List[torch.Tensor]
__init__,"Callable[[_, Sequence[Tuple[str, Regularizer]]],None]"
regularizers,"Sequence[Tuple[str, Regularizer]]"
__call__,"Callable[[_, torch.nn.Module],torch.Tensor]"
module,torch.nn.Module
from_params,"Callable[[_, Iterable[Tuple[str, Params]]],Union[RegularizerApplicator, None]]"
params,"Iterable[Tuple[str, Params]]"
__init__,"Callable[[_, float],None]"
alpha,float
__init__,"Callable[[_, float],None]"
alpha,float
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, str, Union[FeedForward, None], Union[str, None], Union[str, None], bool, bool, bool, Union[float, None], bool, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
encoder,Seq2SeqEncoder
label_namespace,str
include_start_end_transitions,bool
constrain_crf_decoding,bool
calculate_span_f1,bool
verbose_metrics,bool
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], torch.LongTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
tokens,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, int, int],None]"
num_words,int
embedding_dim,int
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, Union[MaskedLayerNorm, None], float, Union[float, str], bool, int, bool],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
contextualizer,Seq2SeqEncoder
dropout,float
remove_bos_eos,bool
num_samples,int
sparse_embeddings,bool
_get_target_token_embedding,"Callable[[_, torch.Tensor, torch.Tensor, int],torch.Tensor]"
direction,int
_compute_loss,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
losses,List[torch.Tensor]
forward,"Callable[[_, Dict[str, torch.LongTensor]],Dict[str, torch.Tensor]]"
source,"Dict[str, torch.LongTensor]"
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
encoder,Seq2SeqEncoder
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], torch.LongTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
tokens,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, int, int, FeedForward, FeedForward, Embedding, float, float, float, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
encoder,Seq2SeqEncoder
tag_representation_dim,int
arc_representation_dim,int
tag_feedforward,FeedForward
arc_feedforward,FeedForward
pos_tag_embedding,Embedding
dropout,float
input_dropout,float
edge_prediction_threshold,float
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], torch.LongTensor, List[Dict[str, Any]], torch.LongTensor],Dict[str, torch.Tensor]]"
tokens,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
_construct_loss,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
_greedy_decode,"Callable[[torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, float, Seq2VecEncoder, int, int, List[str], str, int],None]"
vocab,Vocabulary
source_embedder,TextFieldEmbedder
embedding_dropout,float
encoder,Seq2VecEncoder
max_decoding_steps,int
beam_size,int
target_namespace,str
target_embedding_dim,int
_update_recall,"Callable[[_, torch.Tensor, Dict[str, torch.LongTensor], UnigramRecall],None]"
target_tokens,"Dict[str, torch.LongTensor]"
target_recall,UnigramRecall
_get_num_decoding_steps,"Callable[[_, Union[Dict[str, torch.LongTensor], None]],int]"
target_tokens,"Union[Dict[str, torch.LongTensor], None]"
forward,"Callable[[_, Dict[str, torch.LongTensor]],Dict[str, torch.Tensor]]"
source,"Dict[str, torch.LongTensor]"
target_tokens,"Dict[str, Dict[str, torch.LongTensor]]"
greedy_search,"Callable[[_, torch.LongTensor, Dict[str, torch.LongTensor], Embedding, GRUCell, Linear],torch.FloatTensor]"
target_tokens,"Dict[str, torch.LongTensor]"
target_embedder,Embedding
decoder_cell,GRUCell
output_projection_layer,Linear
greedy_predict,"Callable[[_, torch.LongTensor, Embedding, GRUCell, Linear],torch.Tensor]"
target_embedder,Embedding
decoder_cell,GRUCell
output_projection_layer,Linear
decode_all,"Callable[[_, torch.Tensor],List[List[str]]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, List[List[str]]]]"
output_dict,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, int, int, int],None]"
num_classes,int
input_dim,int
output_dim,int
take_step,"Callable[[_, torch.Tensor, Dict[str, torch.Tensor]],Tuple[torch.Tensor, Dict[str, torch.Tensor]]]"
state,"Dict[str, torch.Tensor]"
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, float, FeedForward, Seq2SeqEncoder, Seq2SeqEncoder, float, Union[FeedForward, Maxout], Elmo, bool, bool, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
embedding_dropout,float
pre_encode_feedforward,FeedForward
encoder,Seq2SeqEncoder
integrator,Seq2SeqEncoder
integrator_dropout,float
elmo,Elmo
use_input_elmo,bool
use_integrator_output_elmo,bool
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], torch.LongTensor],Dict[str, torch.Tensor]]"
tokens,"Dict[str, torch.LongTensor]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
from_params,"Callable[[_, Vocabulary, Params],BiattentiveClassificationNetwork]"
vocab,Vocabulary
params,Params
start,int
end,int
label_prob,float
no_label_prob,float
label_index,int
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, SpanExtractor, Seq2SeqEncoder, FeedForward, Embedding, InitializerApplicator, Union[RegularizerApplicator, None], str],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
span_extractor,SpanExtractor
encoder,Seq2SeqEncoder
feedforward,FeedForward
pos_tag_embedding,Embedding
initializer,InitializerApplicator
evalb_directory_path,str
forward,"Callable[[_, Dict[str, torch.LongTensor], torch.LongTensor, List[Dict[str, Any]], Dict[str, torch.LongTensor], torch.LongTensor],Dict[str, torch.Tensor]]"
tokens,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
pos_tags,"Dict[str, torch.LongTensor]"
gold_pos_tags,List[List[str]]
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
construct_trees,"Callable[[_, torch.FloatTensor, torch.LongTensor, torch.LongTensor, List[List[str]], List[List[str]]],List[Tree]]"
sentences,List[List[str]]
pos_tags,List[List[str]]
construct_tree_from_spans,"Callable[[Dict[Tuple[int, int], str], List[str], List[str]],Tree]"
spans_to_labels,"Dict[Tuple[int, int], str]"
assemble_subtree,"Callable[[int, int],_]"
start,int
end,int
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, BiMpmMatching, Seq2SeqEncoder, BiMpmMatching, BiMpmMatching, Seq2SeqEncoder, BiMpmMatching, BiMpmMatching, Seq2VecEncoder, FeedForward, float, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
matcher_word,BiMpmMatching
encoder1,Seq2SeqEncoder
matcher_forward1,BiMpmMatching
matcher_backward1,BiMpmMatching
encoder2,Seq2SeqEncoder
matcher_forward2,BiMpmMatching
matcher_backward2,BiMpmMatching
aggregator,Seq2VecEncoder
classifier_feedforward,FeedForward
dropout,float
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], torch.LongTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
premise,"Dict[str, torch.LongTensor]"
hypothesis,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
matching_vector_premise,List[torch.Tensor]
matching_vector_hypothesis,List[torch.Tensor]
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, RegularizerApplicator],None]"
vocab,Vocabulary
regularizer,RegularizerApplicator
get_regularization_penalty,"Callable[[_],Union[float, torch.Tensor]]"
forward,"Callable[[_],Dict[str, torch.Tensor]]"
forward_on_instance,"Callable[[_, Instance],Dict[str, numpy.ndarray]]"
instance,Instance
forward_on_instances,"Callable[[_, List[Instance]],List[Dict[str, numpy.ndarray]]]"
instance_separated_output,"List[Dict[str, numpy.ndarray]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
_get_prediction_device,"Callable[[_],int]"
_maybe_warn_for_unseparable_batches,"Callable[[_, str],_]"
output_key,str
_load,"Callable[[_, Params, str, str, int],Model]"
config,Params
serialization_dir,str
weights_file,str
cuda_device,int
load,"Callable[[_, Params, str, str, int],Model]"
config,Params
serialization_dir,str
weights_file,str
cuda_device,int
remove_pretrained_embedding_params,"Callable[[Params],_]"
params,Params
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, int, int, FeedForward, FeedForward, Embedding, bool, float, float, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
encoder,Seq2SeqEncoder
tag_representation_dim,int
arc_representation_dim,int
tag_feedforward,FeedForward
arc_feedforward,FeedForward
pos_tag_embedding,Embedding
use_mst_decoding_for_validation,bool
dropout,float
input_dropout,float
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], torch.LongTensor, List[Dict[str, Any]], torch.LongTensor, torch.LongTensor],Dict[str, torch.Tensor]]"
words,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
_construct_loss,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
_greedy_decode,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
_mst_decode,"Callable[[_, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
_run_mst_decoding,"Callable[[torch.Tensor, torch.Tensor],Tuple[torch.Tensor, torch.Tensor]]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, List[Model]],None]"
_load,"Callable[[_, Params, str, str, int],Model]"
config,Params
serialization_dir,str
weights_file,str
cuda_device,int
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, SimilarityFunction, FeedForward, Seq2SeqEncoder, FeedForward, FeedForward, float, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
encoder,Seq2SeqEncoder
similarity_function,SimilarityFunction
projection_feedforward,FeedForward
inference_encoder,Seq2SeqEncoder
output_feedforward,FeedForward
output_logit,FeedForward
dropout,float
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], torch.IntTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
premise,"Dict[str, torch.LongTensor]"
hypothesis,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, FeedForward, SimilarityFunction, FeedForward, FeedForward, Union[Seq2SeqEncoder, None], Union[Seq2SeqEncoder, None], InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
attend_feedforward,FeedForward
similarity_function,SimilarityFunction
compare_feedforward,FeedForward
aggregate_feedforward,FeedForward
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], torch.IntTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
premise,"Dict[str, torch.LongTensor]"
hypothesis,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, int, float, InitializerApplicator, Union[RegularizerApplicator, None], float, bool],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
encoder,Seq2SeqEncoder
binary_feature_dim,int
embedding_dropout,float
initializer,InitializerApplicator
label_smoothing,float
ignore_span_metric,bool
forward,"Callable[[_, Dict[str, torch.LongTensor], torch.LongTensor, torch.LongTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
tokens,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],_]"
reset,bool
write_to_conll_eval_file,"Callable[[TextIO, TextIO, Union[int, None], List[str], List[str], List[str]],_]"
prediction_file,TextIO
gold_file,TextIO
archive_model,"Callable[[str, str, Dict[str, str]],None]"
serialization_dir,str
weights,str
load_archive,"Callable[[str, int, str, str],Archive]"
archive_file,str
cuda_device,int
overrides,str
weights_file,str
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, FeedForward, FeedForward, int, int, float, int, float, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
context_layer,Seq2SeqEncoder
mention_feedforward,FeedForward
antecedent_feedforward,FeedForward
feature_size,int
max_span_width,int
spans_per_word,float
max_antecedents,int
lexical_dropout,float
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], torch.IntTensor, torch.IntTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
text,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],_]"
output_dict,"Dict[str, torch.Tensor]"
batch_clusters,"List[List[List[Tuple[int, int]]]]"
spans_to_cluster_ids,"Dict[Tuple[int, int], int]"
clusters,"List[List[Tuple[int, int]]]"
predicted_cluster_id,int
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
_generate_valid_antecedents,"Callable[[int, int, int],Tuple[torch.IntTensor, torch.IntTensor, torch.FloatTensor]]"
num_spans_to_keep,int
max_antecedents,int
device,int
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, BeamSearch, int, Attention, bool, float, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
utterance_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
decoder_beam_search,BeamSearch
max_decoding_steps,int
input_attention,Attention
add_action_bias,bool
dropout,float
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], List[List[ProductionRule]], torch.LongTensor],Dict[str, torch.Tensor]]"
tokens,"Dict[str, torch.LongTensor]"
valid_actions,List[List[ProductionRule]]
_get_initial_state,"Callable[[_, torch.Tensor, torch.Tensor, List[List[ProductionRule]]],GrammarBasedState]"
actions,List[List[ProductionRule]]
_action_history_match,"Callable[[List[int], torch.LongTensor],int]"
is_nonterminal,"Callable[[str],_]"
token,str
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
_create_grammar_state,"Callable[[_, List[ProductionRule]],GrammarStatelet]"
translated_valid_actions,"Dict[str, Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]"
actions_grouped_by_nonterminal,"Dict[str, List[Tuple[ProductionRule, int]]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, float, str],None]"
vocab,Vocabulary
sentence_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
dropout,float
rule_namespace,str
_get_initial_rnn_state,"Callable[[_, Dict[str, torch.LongTensor]],_]"
sentence,"Dict[str, torch.LongTensor]"
label_strings,List[List[str]]
_get_action_strings,"Callable[[_, List[List[ProductionRule]], Dict[int, List[List[int]]]],List[List[List[str]]]]"
possible_actions,List[List[ProductionRule]]
action_indices,"Dict[int, List[List[int]]]"
all_action_strings,List[List[List[str]]]
_get_denotations,"Callable[[List[List[List[str]]], List[List[NlvrWorld]]],List[List[List[str]]]]"
action_strings,List[List[List[str]]]
worlds,List[List[NlvrWorld]]
all_denotations,List[List[List[str]]]
denotations,List[List[str]]
_create_grammar_state,"Callable[[_, NlvrWorld, List[ProductionRule]],GrammarStatelet]"
world,NlvrWorld
translated_valid_actions,"Dict[str, Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
_check_state_denotations,"Callable[[_, GrammarBasedState, List[NlvrWorld]],List[bool]]"
state,GrammarBasedState
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, Attention, int, int, int, float, bool, float, Dict[str, Union[int, float]], bool, str],None]"
vocab,Vocabulary
sentence_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
attention,Attention
beam_size,int
max_decoding_steps,int
max_num_finished_states,int
dropout,float
normalize_beam_score_by_length,bool
checklist_cost_weight,float
dynamic_cost_weight,"Dict[str, Union[int, float]]"
penalize_non_agenda_actions,bool
initial_mml_model_file,str
self._decoder_trainer,"DecoderTrainer[Callable[[CoverageState],torch.Tensor]]"
self._last_epoch_in_forward,int
_initialize_weights_from_archive,"Callable[[_, Archive],None]"
archive,Archive
_get_vocab_index_mapping,"Callable[[_, Vocabulary],List[Tuple[int, int]]]"
archived_vocab,Vocabulary
vocab_index_mapping,"List[Tuple[int, int]]"
forward,"Callable[[_, Dict[str, torch.LongTensor], List[List[NlvrWorld]], List[List[ProductionRule]], torch.LongTensor, List[str], torch.LongTensor, List[int]],Dict[str, torch.Tensor]]"
sentence,"Dict[str, torch.LongTensor]"
worlds,List[List[NlvrWorld]]
actions,List[List[ProductionRule]]
_get_checklist_info,"Callable[[_, torch.LongTensor, List[ProductionRule]],Tuple[torch.Tensor, torch.Tensor, torch.Tensor]]"
_update_metrics,"Callable[[_, List[List[List[str]]], List[List[NlvrWorld]], List[List[str]], List[List[ProductionRule]], List[List[int]]],None]"
action_strings,List[List[List[str]]]
worlds,List[List[NlvrWorld]]
label_strings,List[List[str]]
possible_actions,List[List[ProductionRule]]
agenda_data,List[List[int]]
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
_get_state_cost,"Callable[[_, List[List[NlvrWorld]], CoverageState],torch.Tensor]"
batch_worlds,List[List[NlvrWorld]]
state,CoverageState
_get_state_info,"Callable[[_, CoverageState, List[List[NlvrWorld]]],Dict[str, List]]"
state,CoverageState
batch_worlds,List[List[NlvrWorld]]
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, Attention, BeamSearch, int, float],None]"
vocab,Vocabulary
sentence_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
attention,Attention
decoder_beam_search,BeamSearch
max_decoding_steps,int
dropout,float
forward,"Callable[[_, Dict[str, torch.LongTensor], List[List[NlvrWorld]], List[List[ProductionRule]], List[str], torch.LongTensor, torch.LongTensor],Dict[str, torch.Tensor]]"
sentence,"Dict[str, torch.LongTensor]"
worlds,List[List[NlvrWorld]]
actions,List[List[ProductionRule]]
outputs,"Dict[str, torch.Tensor]"
best_action_sequences,"Dict[int, List[List[int]]]"
_update_metrics,"Callable[[_, List[List[List[str]]], List[List[NlvrWorld]], List[List[str]]],None]"
action_strings,List[List[List[str]]]
worlds,List[List[NlvrWorld]]
label_strings,List[List[str]]
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, Seq2VecEncoder, Attention, int, int, int, FeedForward, bool, bool, float, bool, float, int, str, str, str],None]"
vocab,Vocabulary
question_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
entity_encoder,Seq2VecEncoder
attention,Attention
decoder_beam_size,int
decoder_num_finished_states,int
max_decoding_steps,int
mixture_feedforward,FeedForward
add_action_bias,bool
normalize_beam_score_by_length,bool
checklist_cost_weight,float
use_neighbor_similarity_for_linking,bool
dropout,float
num_linking_features,int
rule_namespace,str
tables_directory,str
mml_model_file,str
self._decoder_trainer,ExpectedRiskMinimization
_initialize_weights_from_archive,"Callable[[_, Archive],None]"
archive,Archive
_get_vocab_index_mapping,"Callable[[_, Vocabulary],List[Tuple[int, int]]]"
archived_vocab,Vocabulary
vocab_index_mapping,"List[Tuple[int, int]]"
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], List[WikiTablesWorld], List[List[ProductionRule]], torch.LongTensor, List[str], List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
question,"Dict[str, torch.LongTensor]"
table,"Dict[str, torch.LongTensor]"
actions,List[List[ProductionRule]]
metadata,"List[Dict[str, Any]]"
_get_checklist_info,"Callable[[torch.LongTensor, List[ProductionRule], Set[str], int],Tuple[torch.Tensor, torch.Tensor, torch.Tensor]]"
max_num_terminals,int
_get_state_cost,"Callable[[_, List[WikiTablesWorld], CoverageState],torch.Tensor]"
state,CoverageState
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, Seq2VecEncoder, BeamSearch, int, Attention, FeedForward, bool, int, bool, float, int, str, str],None]"
vocab,Vocabulary
question_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
entity_encoder,Seq2VecEncoder
decoder_beam_search,BeamSearch
max_decoding_steps,int
attention,Attention
mixture_feedforward,FeedForward
add_action_bias,bool
training_beam_size,int
use_neighbor_similarity_for_linking,bool
dropout,float
num_linking_features,int
rule_namespace,str
tables_directory,str
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], List[WikiTablesWorld], List[List[ProductionRule]], List[str], torch.LongTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
question,"Dict[str, torch.LongTensor]"
table,"Dict[str, torch.LongTensor]"
actions,List[List[ProductionRule]]
metadata,"List[Dict[str, Any]]"
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, Seq2VecEncoder, int, bool, bool, float, int, str, str],None]"
vocab,Vocabulary
question_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
entity_encoder,Seq2VecEncoder
max_decoding_steps,int
add_action_bias,bool
use_neighbor_similarity_for_linking,bool
dropout,float
num_linking_features,int
rule_namespace,str
tables_directory,str
_get_initial_rnn_and_grammar_state,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], List[WikiTablesWorld], List[List[ProductionRule]], Dict[str, Any]],Tuple[List[RnnStatelet], List[LambdaGrammarStatelet]]]"
question,"Dict[str, torch.LongTensor]"
table,"Dict[str, torch.LongTensor]"
actions,List[List[ProductionRule]]
_get_neighbor_indices,"Callable[[List[WikiTablesWorld], int, torch.Tensor],torch.LongTensor]"
num_entities,int
_get_type_vector,"Callable[[List[WikiTablesWorld], int, torch.Tensor],Tuple[torch.LongTensor, Dict[int, int]]]"
num_entities,int
_action_history_match,"Callable[[List[int], torch.LongTensor],int]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
_create_grammar_state,"Callable[[_, WikiTablesWorld, List[ProductionRule], torch.Tensor, torch.Tensor],LambdaGrammarStatelet]"
world,WikiTablesWorld
translated_valid_actions,"Dict[str, Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]"
_compute_validation_outputs,"Callable[[_, List[List[ProductionRule]], Mapping[int, Sequence[GrammarBasedState]], List[WikiTablesWorld], List[str], List[Dict[str, Any]], Dict[str, Any]],None]"
actions,List[List[ProductionRule]]
best_final_states,"Mapping[int, Sequence[GrammarBasedState]]"
metadata,"List[Dict[str, Any]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, BeamSearch, int, Attention, bool, int, int, float, str, _],None]"
vocab,Vocabulary
utterance_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
decoder_beam_search,BeamSearch
max_decoding_steps,int
input_attention,Attention
add_action_bias,bool
training_beam_size,int
decoder_num_layers,int
dropout,float
rule_namespace,str
forward,"Callable[[_, Dict[str, torch.LongTensor], List[AtisWorld], List[List[ProductionRule]], torch.Tensor, torch.LongTensor, List[List[str]]],Dict[str, torch.Tensor]]"
utterance,"Dict[str, torch.LongTensor]"
actions,List[List[ProductionRule]]
sql_queries,List[List[str]]
_get_initial_state,"Callable[[_, Dict[str, torch.LongTensor], List[AtisWorld], List[List[ProductionRule]], torch.Tensor],GrammarBasedState]"
utterance,"Dict[str, torch.LongTensor]"
actions,List[List[ProductionRule]]
_get_type_vector,"Callable[[List[AtisWorld], int, torch.Tensor],Tuple[torch.LongTensor, Dict[int, int]]]"
num_entities,int
_action_history_match,"Callable[[List[int], torch.LongTensor],int]"
is_nonterminal,"Callable[[str],_]"
token,str
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
_create_grammar_state,"Callable[[_, AtisWorld, List[ProductionRule], torch.Tensor, torch.Tensor],GrammarStatelet]"
world,AtisWorld
translated_valid_actions,"Dict[str, Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, BeamSearch, int, Attention, FeedForward, bool, float, int, int, bool, bool, bool, Seq2VecEncoder, str, str],None]"
vocab,Vocabulary
question_embedder,TextFieldEmbedder
action_embedding_dim,int
encoder,Seq2SeqEncoder
decoder_beam_search,BeamSearch
max_decoding_steps,int
attention,Attention
mixture_feedforward,FeedForward
add_action_bias,bool
dropout,float
num_linking_features,int
num_entity_bits,int
entity_bits_output,bool
use_entities,bool
denotation_only,bool
entity_encoder,Seq2VecEncoder
entity_similarity_mode,str
rule_namespace,str
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], List[QuarelWorld], List[List[ProductionRule]], torch.Tensor, torch.Tensor, torch.LongTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
question,"Dict[str, torch.LongTensor]"
table,"Dict[str, torch.LongTensor]"
actions,List[List[ProductionRule]]
metadata,"List[Dict[str, Any]]"
_get_type_vector,"Callable[[List[QuarelWorld], int, torch.Tensor],Tuple[torch.LongTensor, Dict[int, int]]]"
num_entities,int
_action_history_match,"Callable[[List[int], torch.LongTensor],int]"
_denotation_match,"Callable[[_, int, int],float]"
predicted_answer_index,int
target_answer_index,int
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
_create_grammar_state,"Callable[[_, QuarelWorld, List[ProductionRule], torch.Tensor, torch.Tensor],GrammarStatelet]"
world,QuarelWorld
translated_valid_actions,"Dict[str, Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, int, Attention, SimilarityFunction, int, str, int, float, bool],None]"
vocab,Vocabulary
source_embedder,TextFieldEmbedder
encoder,Seq2SeqEncoder
max_decoding_steps,int
attention,Attention
attention_function,SimilarityFunction
beam_size,int
target_namespace,str
target_embedding_dim,int
scheduled_sampling_ratio,float
use_bleu,bool
take_step,"Callable[[_, torch.Tensor, Dict[str, torch.Tensor]],Tuple[torch.Tensor, Dict[str, torch.Tensor]]]"
state,"Dict[str, torch.Tensor]"
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor]],Dict[str, torch.Tensor]]"
source_tokens,"Dict[str, torch.LongTensor]"
target_tokens,"Dict[str, torch.LongTensor]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
output_dict,"Dict[str, torch.Tensor]"
_encode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
source_tokens,"Dict[str, torch.Tensor]"
_init_decoder_state,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
state,"Dict[str, torch.Tensor]"
_forward_loop,"Callable[[_, Dict[str, torch.Tensor], Dict[str, torch.LongTensor]],Dict[str, torch.Tensor]]"
state,"Dict[str, torch.Tensor]"
target_tokens,"Dict[str, torch.LongTensor]"
step_logits,List[torch.Tensor]
step_predictions,List[torch.Tensor]
_forward_beam_search,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, torch.Tensor]]"
state,"Dict[str, torch.Tensor]"
_prepare_output_projections,"Callable[[_, torch.Tensor, Dict[str, torch.Tensor]],Tuple[torch.Tensor, Dict[str, torch.Tensor]]]"
state,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, int, Seq2SeqEncoder, SimilarityFunction, Seq2SeqEncoder, Seq2SeqEncoder, float, bool, InitializerApplicator, Union[RegularizerApplicator, None]],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
num_highway_layers,int
phrase_layer,Seq2SeqEncoder
similarity_function,SimilarityFunction
modeling_layer,Seq2SeqEncoder
span_end_encoder,Seq2SeqEncoder
dropout,float
mask_lstms,bool
initializer,InitializerApplicator
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], torch.IntTensor, torch.IntTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
question,"Dict[str, torch.LongTensor]"
passage,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
__init__,"Callable[[_, Vocabulary, TextFieldEmbedder, Seq2SeqEncoder, Seq2SeqEncoder, Seq2SeqEncoder, Seq2SeqEncoder, InitializerApplicator, float, int, int, int],None]"
vocab,Vocabulary
text_field_embedder,TextFieldEmbedder
phrase_layer,Seq2SeqEncoder
residual_encoder,Seq2SeqEncoder
span_start_encoder,Seq2SeqEncoder
span_end_encoder,Seq2SeqEncoder
initializer,InitializerApplicator
dropout,float
num_context_answers,int
marker_embedding_dim,int
max_span_length,int
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], torch.IntTensor, torch.IntTensor, torch.IntTensor, torch.IntTensor, torch.IntTensor, torch.IntTensor, torch.IntTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
question,"Dict[str, torch.LongTensor]"
passage,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
decode,"Callable[[_, Dict[str, torch.Tensor]],Dict[str, Any]]"
output_dict,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
_get_best_span_yesno_followup,"Callable[[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, int],torch.Tensor]"
max_span_length,int
__init__,"Callable[[_, List[BidirectionalAttentionFlow]],None]"
forward,"Callable[[_, Dict[str, torch.LongTensor], Dict[str, torch.LongTensor], torch.IntTensor, torch.IntTensor, List[Dict[str, Any]]],Dict[str, torch.Tensor]]"
question,"Dict[str, torch.LongTensor]"
passage,"Dict[str, torch.LongTensor]"
metadata,"List[Dict[str, Any]]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
from_params,"Callable[[_, Vocabulary, Params],BidafEnsemble]"
vocab,Vocabulary
params,Params
ensemble,"Callable[[List[Dict[str, torch.Tensor]]],torch.Tensor]"
subresults,"List[Dict[str, torch.Tensor]]"
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
dump_line,"Callable[[_, JsonDict],str]"
outputs,JsonDict
_my_json_to_instance,"Callable[[_, JsonDict],Tuple[Instance, JsonDict]]"
json_dict,JsonDict
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
predict_json,"Callable[[_, JsonDict],JsonDict]"
inputs,JsonDict
predict,"Callable[[_, str, str],JsonDict]"
question,str
passage,str
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
predict,"Callable[[_, str],JsonDict]"
jsonline,str
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
predict,"Callable[[_, str],JsonDict]"
source,str
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
load_line,"Callable[[_, str],JsonDict]"
line,str
dump_line,"Callable[[_, JsonDict],str]"
outputs,JsonDict
predict_json,"Callable[[_, JsonDict],JsonDict]"
inputs,JsonDict
predict_instance,"Callable[[_, Instance],JsonDict]"
instance,Instance
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
from_path,"Callable[[_, str, str],Predictor]"
archive_path,str
predictor_name,str
from_archive,"Callable[[_, Archive, str],Predictor]"
archive,Archive
predictor_name,str
make_oie_string,"Callable[[List[Token], List[str]],str]"
get_predicate_text,"Callable[[List[Token], List[str]],str]"
predicates_overlap,"Callable[[List[str], List[str]],bool]"
get_coherent_next_tag,"Callable[[str, str],str]"
prev_label,str
cur_label,str
consolidate_predictions,"Callable[[List[List[str]], List[Token]],Dict[str, List[str]]]"
outputs,List[List[str]]
pred_dict,"Dict[str, List[str]]"
sanitize_label,"Callable[[str],str]"
label,str
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
predict_json,"Callable[[_, JsonDict],JsonDict]"
inputs,JsonDict
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
predict,"Callable[[_, str],JsonDict]"
document,str
predict_tokenized,"Callable[[_, List[str]],JsonDict]"
_words_list_to_instance,"Callable[[_, List[str]],Instance]"
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
predict,"Callable[[_, str],JsonDict]"
source,str
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
predict,"Callable[[_, str],JsonDict]"
sentence,str
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
predict_instance,"Callable[[_, Instance],JsonDict]"
instance,Instance
_build_hierplane_tree,"Callable[[_, Tree, int, bool],JsonDict]"
tree,Tree
index,int
is_root,bool
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
predict,"Callable[[_, str],JsonDict]"
sentence,str
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
predict_instance,"Callable[[_, Instance],JsonDict]"
instance,Instance
word_index_to_cumulative_indices,"Dict[int, Tuple[int, int]]"
node_constuctor,"Callable[[int],_]"
index,int
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
predict,"Callable[[_, str],JsonDict]"
sentence,str
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
predict,"Callable[[_, str, str],JsonDict]"
premise,str
hypothesis,str
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
predict,"Callable[[_, str],JsonDict]"
sentence,str
predict_tokenized,"Callable[[_, List[str]],JsonDict]"
make_srl_string,"Callable[[List[str], List[str]],str]"
_json_to_instance,"Callable[[_, JsonDict],_]"
json_dict,JsonDict
_sentence_to_srl_instances,"Callable[[_, JsonDict],List[Instance]]"
json_dict,JsonDict
predict_instances,"Callable[[_, List[Instance]],JsonDict]"
predict_json,"Callable[[_, JsonDict],JsonDict]"
inputs,JsonDict
__init__,"Callable[[_, Model, DatasetReader],None]"
model,Model
dataset_reader,DatasetReader
_json_to_instance,"Callable[[_, JsonDict],Instance]"
json_dict,JsonDict
predict_instance,"Callable[[_, Instance],JsonDict]"
instance,Instance
_execute_logical_form_on_table,"Callable[[str, str],_]"
logical_form,str
table,str
__init__,"Callable[[_, Iterable[str], Callable[[],Any], Callable[[],Any]],None]"
padded_function,"Callable[[],Any]"
non_padded_function,"Callable[[],Any]"
__missing__,"Callable[[_, str],_]"
key,str
__init__,"Callable[[_, Set[str], str, str],None]"
padding_token,str
oov_token,str
__init__,"Callable[[_, Set[str], str, str],None]"
padding_token,str
oov_token,str
_read_pretrained_tokens,"Callable[[str],List[str]]"
embeddings_file_uri,str
pop_max_vocab_size,"Callable[[Params],Union[int, Dict[str, int]]]"
params,Params
__init__,"Callable[[_, Dict[str, Dict[str, int]], Dict[str, int], Union[int, Dict[str, int]], Iterable[str], Union[Dict[str, str], None], bool, Dict[str, List[str]], Dict[str, int]],None]"
counter,"Dict[str, Dict[str, int]]"
max_vocab_size,"Union[int, Dict[str, int]]"
pretrained_files,"Union[Dict[str, str], None]"
only_include_pretrained_words,bool
tokens_to_add,"Dict[str, List[str]]"
self._retained_counter,"Union[Dict[str, Dict[str, int]], None]"
save_to_files,"Callable[[_, str],None]"
directory,str
from_files,"Callable[[_, str],Vocabulary]"
directory,str
set_from_file,"Callable[[_, str, bool, str, str],_]"
filename,str
is_padded,bool
oov_token,str
namespace,str
from_instances,"Callable[[_, Iterable[adi.Instance], Dict[str, int], Union[int, Dict[str, int]], Iterable[str], Union[Dict[str, str], None], bool, Dict[str, List[str]], Dict[str, int]],Vocabulary]"
instances,Iterable[adi.Instance]
max_vocab_size,"Union[int, Dict[str, int]]"
pretrained_files,"Union[Dict[str, str], None]"
only_include_pretrained_words,bool
tokens_to_add,"Dict[str, List[str]]"
namespace_token_counts,"Dict[str, Dict[str, int]]"
from_params,"Callable[[_, Params, Iterable[adi.Instance]],_]"
params,Params
instances,Iterable[adi.Instance]
_extend,"Callable[[_, Dict[str, Dict[str, int]], Dict[str, int], Union[int, Dict[str, int]], Iterable[str], Union[Dict[str, str], None], bool, Dict[str, List[str]], Dict[str, int]],None]"
counter,"Dict[str, Dict[str, int]]"
max_vocab_size,"Union[int, Dict[str, int]]"
pretrained_files,"Union[Dict[str, str], None]"
only_include_pretrained_words,bool
tokens_to_add,"Dict[str, List[str]]"
extend_from_instances,"Callable[[_, Params, Iterable[adi.Instance]],None]"
params,Params
instances,Iterable[adi.Instance]
namespace_token_counts,"Dict[str, Dict[str, int]]"
is_padded,"Callable[[_, str],bool]"
namespace,str
add_token_to_namespace,"Callable[[_, str, str],int]"
token,str
namespace,str
get_index_to_token_vocabulary,"Callable[[_, str],Dict[int, str]]"
namespace,str
get_token_to_index_vocabulary,"Callable[[_, str],Dict[str, int]]"
namespace,str
get_token_index,"Callable[[_, str, str],int]"
token,str
namespace,str
get_token_from_index,"Callable[[_, int, str],str]"
index,int
namespace,str
get_vocab_size,"Callable[[_, str],int]"
namespace,str
__str__,"Callable[[_],str]"
print_statistics,"Callable[[_],None]"
__init__,"Callable[[_, MutableMapping[str, Field]],None]"
__getitem__,"Callable[[_, str],Field]"
key,str
__len__,"Callable[[_],int]"
add_field,"Callable[[_, str, Field, Vocabulary],None]"
field_name,str
field,Field
vocab,Vocabulary
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index_fields,"Callable[[_, Vocabulary],None]"
vocab,Vocabulary
get_padding_lengths,"Callable[[_],Dict[str, Dict[str, int]]]"
as_tensor_dict,"Callable[[_, Dict[str, Dict[str, int]]],Dict[str, DataArray]]"
padding_lengths,"Dict[str, Dict[str, int]]"
__str__,"Callable[[_],str]"
__init__,"Callable[[_, Iterable[Instance]],None]"
_check_types,"Callable[[_],None]"
all_instance_fields_and_types,"List[Dict[str, str]]"
get_padding_lengths,"Callable[[_],Dict[str, Dict[str, int]]]"
padding_lengths,"Dict[str, Dict[str, int]]"
all_instance_lengths,"List[Dict[str, Dict[str, int]]]"
all_field_lengths,"Dict[str, List[Dict[str, int]]]"
as_tensor_dict,"Callable[[_, Dict[str, Dict[str, int]], bool],Dict[str, Union[torch.Tensor, Dict[str, torch.Tensor]]]]"
padding_lengths,"Dict[str, Dict[str, int]]"
verbose,bool
lengths_to_use,"Dict[str, Dict[str, int]]"
index_instances,"Callable[[_, Vocabulary],None]"
vocab,Vocabulary
print_statistics,"Callable[[_],None]"
__init__,"Callable[[_, str, CharacterTokenizer, List[str], List[str], int],None]"
namespace,str
character_tokenizer,CharacterTokenizer
min_padding_length,int
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[List[int]]]]"
vocabulary,Vocabulary
index_name,str
indices,List[List[int]]
pad_token_sequence,"Callable[[_, Dict[str, List[List[int]]], Dict[str, int], Dict[str, int]],Dict[str, List[List[int]]]]"
tokens,"Dict[str, List[List[int]]]"
_make_bos_eos,"Callable[[int, int, int, int, int],_]"
character,int
padding_character,int
beginning_of_word_character,int
end_of_word_character,int
max_word_length,int
convert_word_to_char_ids,"Callable[[str],List[int]]"
word,str
__init__,"Callable[[_, str],None]"
namespace,str
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[List[int]]]]"
vocabulary,Vocabulary
index_name,str
pad_token_sequence,"Callable[[_, Dict[str, List[List[int]]], Dict[str, int], Dict[str, int]],Dict[str, List[List[int]]]]"
tokens,"Dict[str, List[List[int]]]"
__init__,"Callable[[_, Dict[str, int], List[Tuple[str, str]], int, str, str, List[str]],None]"
byte_pairs,"List[Tuple[str, str]]"
n_ctx,int
model_path,str
namespace,str
self.cache,"Dict[str, List[str]]"
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
byte_pair_encode,"Callable[[_, Token, bool],List[str]]"
token,Token
lowercase,bool
_add_encoding_to_vocabulary,"Callable[[_, Vocabulary],None]"
vocabulary,Vocabulary
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[int]]]"
vocabulary,Vocabulary
index_name,str
get_padding_token,"Callable[[_],int]"
get_padding_lengths,"Callable[[_, int],Dict[str, int]]"
token,int
pad_token_sequence,"Callable[[_, Dict[str, List[int]], Dict[str, int], Dict[str, int]],Dict[str, List[int]]]"
tokens,"Dict[str, List[int]]"
__init__,"Callable[[_, str, bool],None]"
namespace,str
coarse_tags,bool
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[int]]]"
vocabulary,Vocabulary
index_name,str
get_padding_token,"Callable[[_],int]"
get_padding_lengths,"Callable[[_, int],Dict[str, int]]"
token,int
pad_token_sequence,"Callable[[_, Dict[str, List[int]], Dict[str, int], Dict[str, int]],Dict[str, List[int]]]"
tokens,"Dict[str, List[int]]"
__init__,"Callable[[_, str],None]"
namespace,str
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[int]]]"
vocabulary,Vocabulary
index_name,str
get_padding_token,"Callable[[_],int]"
get_padding_lengths,"Callable[[_, int],Dict[str, int]]"
token,int
pad_token_sequence,"Callable[[_, Dict[str, List[int]], Dict[str, int], Dict[str, int]],Dict[str, List[int]]]"
tokens,"Dict[str, List[int]]"
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[TokenType]]]"
vocabulary,Vocabulary
index_name,str
get_padding_token,"Callable[[_],TokenType]"
get_padding_lengths,"Callable[[_, TokenType],Dict[str, int]]"
token,TokenType
pad_token_sequence,"Callable[[_, Dict[str, List[TokenType]], Dict[str, int], Dict[str, int]],Dict[str, List[TokenType]]]"
tokens,"Dict[str, List[TokenType]]"
get_keys,"Callable[[_, str],List[str]]"
index_name,str
__init__,"Callable[[_, str],None]"
namespace,str
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[int]]]"
vocabulary,Vocabulary
index_name,str
get_padding_token,"Callable[[_],int]"
get_padding_lengths,"Callable[[_, int],Dict[str, int]]"
token,int
pad_token_sequence,"Callable[[_, Dict[str, List[int]], Dict[str, int], Dict[str, int]],Dict[str, List[int]]]"
tokens,"Dict[str, List[int]]"
__init__,"Callable[[_, Dict[str, int], Callable[[str],List[str]], str, bool, int],None]"
wordpiece_tokenizer,"Callable[[str],List[str]]"
namespace,str
use_starting_offsets,bool
max_pieces,int
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
_add_encoding_to_vocabulary,"Callable[[_, Vocabulary],None]"
vocabulary,Vocabulary
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[int]]]"
vocabulary,Vocabulary
index_name,str
get_padding_token,"Callable[[_],int]"
get_padding_lengths,"Callable[[_, int],Dict[str, int]]"
token,int
pad_token_sequence,"Callable[[_, Dict[str, List[int]], Dict[str, int], Dict[str, int]],Dict[str, List[int]]]"
tokens,"Dict[str, List[int]]"
get_keys,"Callable[[_, str],List[str]]"
index_name,str
__init__,"Callable[[_, str, bool, bool, int],None]"
pretrained_model,str
use_starting_offsets,bool
do_lowercase,bool
max_pieces,int
__init__,"Callable[[_, str, bool, List[str], List[str]],None]"
namespace,str
lowercase_tokens,bool
count_vocab_items,"Callable[[_, Token, Dict[str, Dict[str, int]]],_]"
token,Token
counter,"Dict[str, Dict[str, int]]"
tokens_to_indices,"Callable[[_, List[Token], Vocabulary, str],Dict[str, List[int]]]"
vocabulary,Vocabulary
index_name,str
get_padding_token,"Callable[[_],int]"
get_padding_lengths,"Callable[[_, int],Dict[str, int]]"
token,int
pad_token_sequence,"Callable[[_, Dict[str, List[int]], Dict[str, int], Dict[str, int]],Dict[str, List[int]]]"
tokens,"Dict[str, List[int]]"
__init__,"Callable[[_, Dict[str, TokenIndexer], str, bool],None]"
domain_identifier,str
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
_ontonotes_subset,"Callable[[Ontonotes, str, str],Iterable[OntonotesSentence]]"
ontonotes_reader,Ontonotes
file_path,str
domain_identifier,str
text_to_instance,"Callable[[_, List[Token], List[int], List[str]],Instance]"
__init__,"Callable[[_, Dict[str, TokenIndexer], str, Sequence[str], str, bool],None]"
tag_label,str
label_namespace,str
lazy,bool
text_to_instance,"Callable[[_, List[str], List[str], List[str], List[str], List[str]],Instance]"
lazy_parse,"Callable[[str, Tuple],_]"
text,str
fields,Tuple
__init__,"Callable[[_, Dict[str, TokenIndexer], bool, bool],None]"
use_language_specific_pos,bool
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, List[str], List[str], List[Tuple[str, int]]],Instance]"
dependencies,"List[Tuple[str, int]]"
__init__,"Callable[[_, Callable[[],Iterator[Instance]]],None]"
__init__,"Callable[[_, bool],None]"
lazy,bool
read,"Callable[[_, str],Iterable[Instance]]"
file_path,str
_read,"Callable[[_, str],Iterable[Instance]]"
file_path,str
text_to_instance,"Callable[[_],Instance]"
__init__,"Callable[[_, bool, Tokenizer, Dict[str, TokenIndexer]],None]"
lazy,bool
tokenizer,Tokenizer
text_to_instance,"Callable[[_, str, str, str],Instance]"
premise,str
hypothesis,str
label,str
__init__,"Callable[[_, int, Tokenizer, Dict[str, TokenIndexer], bool],None]"
tokens_per_instance,int
tokenizer,Tokenizer
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, str],Instance]"
sentence,str
__init__,"Callable[[_, Dict[str, TokenIndexer], bool, str, bool],None]"
use_subtrees,bool
granularity,str
lazy,bool
text_to_instance,"Callable[[_, List[str], str],Instance]"
sentiment,str
_worker,"Callable[[DatasetReader, Queue, Queue, int],None]"
reader,DatasetReader
input_queue,Queue
output_queue,Queue
index,int
__init__,"Callable[[_, DatasetReader, int, int, int],None]"
base_reader,DatasetReader
num_workers,int
epochs_per_read,int
output_queue_size,int
text_to_instance,"Callable[[_],Instance]"
_read,"Callable[[_, str],Iterable[Instance]]"
file_path,str
read,"Callable[[_, str],Iterable[Instance]]"
file_path,str
__init__,"Callable[[_],None]"
_instances,"Callable[[_, str, Manager, Queue],Iterator[Instance]]"
file_path,str
manager,Manager
output_queue,Queue
__init__,"Callable[[_, Tokenizer, Tokenizer, Dict[str, TokenIndexer], Dict[str, TokenIndexer], bool, bool],None]"
source_tokenizer,Tokenizer
target_tokenizer,Tokenizer
source_add_start_token,bool
lazy,bool
text_to_instance,"Callable[[_, str, str],Instance]"
source_string,str
target_string,str
_is_divider,"Callable[[str],bool]"
line,str
__init__,"Callable[[_, Dict[str, TokenIndexer], str, Sequence[str], bool, str, str],None]"
tag_label,str
lazy,bool
coding_scheme,str
label_namespace,str
_read,"Callable[[_, str],Iterable[Instance]]"
file_path,str
text_to_instance,"Callable[[_, List[Token], List[str], List[str]],Instance]"
_is_divider,"Callable[[str],bool]"
line,str
__init__,"Callable[[_, Dict[str, TokenIndexer], str, Sequence[str], bool, str, str],None]"
tag_label,str
lazy,bool
coding_scheme,str
label_namespace,str
_read,"Callable[[_, str],Iterable[Instance]]"
file_path,str
text_to_instance,"Callable[[_, List[Token], List[str], List[str], List[str]],Instance]"
__init__,"Callable[[_, Tokenizer, Dict[str, TokenIndexer], int],None]"
tokenizer,Tokenizer
max_sequence_length,int
text_to_instance,"Callable[[_, str],Instance]"
sentence,str
_read,"Callable[[_, str],Iterable[Instance]]"
file_path,str
parse_sentence,"Callable[[str],Tuple[List[Dict[str, str]], List[Tuple[int, int]], List[str]]]"
sentence_blob,str
lazy_parse,"Callable[[str],_]"
text,str
__init__,"Callable[[_, Dict[str, TokenIndexer], bool],None]"
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, List[str], List[str], List[Tuple[int, int]], List[str]],Instance]"
arc_indices,"List[Tuple[int, int]]"
__init__,"Callable[[_, Tokenizer, Tokenizer, Dict[str, TokenIndexer], Dict[str, TokenIndexer], bool, bool, bool],None]"
source_tokenizer,Tokenizer
target_tokenizer,Tokenizer
source_add_start_token,bool
dummy_instances_for_vocab_generation,bool
lazy,bool
_preprocess_string,"Callable[[_, str],str]"
string,str
_build_target_field,"Callable[[_, str],TextField]"
target_string,str
text_to_instance,"Callable[[_, str, str, str, str],Instance]"
source_string,str
xintent_string,str
xreact_string,str
oreact_string,str
__init__,"Callable[[_, Tokenizer, Dict[str, TokenIndexer], bool],None]"
tokenizer,Tokenizer
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, str, str, str],Instance]"
premise,str
hypothesis,str
label,str
__init__,"Callable[[_, str, str, Dict[str, TokenIndexer], bool],None]"
word_tag_delimiter,str
token_delimiter,str
lazy,bool
text_to_instance,"Callable[[_, List[Token], List[str]],Instance]"
__init__,"Callable[[_, Dict[str, TokenIndexer], bool, bool, str, str],None]"
use_pos_tags,bool
lazy,bool
label_namespace_prefix,str
pos_label_namespace,str
text_to_instance,"Callable[[_, List[str], List[str], Tree],Instance]"
gold_tree,Tree
gold_spans,"Dict[Tuple[int, int], str]"
span_list_field,ListField
_strip_functional_tags,"Callable[[_, Tree],None]"
tree,Tree
_get_gold_spans,"Callable[[_, Tree, int, Dict[Tuple[int, int], str]],int]"
tree,Tree
index,int
typed_spans,"Dict[Tuple[int, int], str]"
_normalize_word,"Callable[[str],_]"
word,str
__init__,"Callable[[_, Dict[str, TokenIndexer], str, str, bool],None]"
domain_identifier,str
coding_scheme,str
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
_ontonotes_subset,"Callable[[Ontonotes, str, str],Iterable[OntonotesSentence]]"
ontonotes_reader,Ontonotes
file_path,str
domain_identifier,str
text_to_instance,"Callable[[_, List[Token], List[str]],Instance]"
__init__,"Callable[[_, int, Dict[str, TokenIndexer], bool],None]"
max_span_width,int
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
clusters,"DefaultDict[int, List[Tuple[int, int]]]"
text_to_instance,"Callable[[_, List[Token], Union[List[List[Tuple[int, int]]], None]],Instance]"
gold_clusters,"Union[List[List[Tuple[int, int]]], None]"
span_labels,"Union[List[int], None]"
canonicalize_clusters,"Callable[[DefaultDict[int, List[Tuple[int, int]]]],List[List[Tuple[int, int]]]]"
clusters,"DefaultDict[int, List[Tuple[int, int]]]"
merged_clusters,"List[Set[Tuple[int, int]]]"
__init__,"Callable[[_, int, Dict[str, TokenIndexer], bool],None]"
max_span_width,int
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
clusters,"DefaultDict[int, List[Tuple[int, int]]]"
text_to_instance,"Callable[[_, List[List[str]], Union[List[List[Tuple[int, int]]], None]],Instance]"
sentences,List[List[str]]
gold_clusters,"Union[List[List[Tuple[int, int]]], None]"
span_labels,"Union[List[int], None]"
__init__,"Callable[[_, bool, Dict[str, TokenIndexer], int, bool],None]"
use_all_sql,bool
cross_validation_split_to_exclude,int
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, List[str], List[str], str],Instance]"
sql_template,str
__init__,"Callable[[_, bool, Tokenizer, Dict[str, TokenIndexer], Dict[str, TokenIndexer], Dict[str, TokenIndexer], bool],None]"
lazy,bool
tokenizer,Tokenizer
output_agendas,bool
_read,"Callable[[_, str],_]"
file_path,str
target_sequences,List[List[str]]
text_to_instance,"Callable[[_, str, List[List[List[JsonDict]]], List[str], List[List[str]], str],Instance]"
sentence,str
structured_representations,List[List[List[JsonDict]]]
target_sequences,List[List[str]]
identifier,str
__init__,"Callable[[_, str, str, bool, bool, bool, bool, Dict[str, TokenIndexer], int, bool, bool],None]"
schema_path,str
database_file,str
use_all_sql,bool
remove_unneeded_aliases,bool
use_prelinked_entities,bool
use_untyped_entities,bool
cross_validation_split_to_exclude,int
keep_if_unparseable,bool
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, List[str], Dict[str, Dict[str, str]], List[str]],Instance]"
prelinked_entities,"Dict[str, Dict[str, str]]"
_lazy_parse,"Callable[[str],_]"
text,str
__init__,"Callable[[_, Dict[str, TokenIndexer], bool, bool, Tokenizer, str, int],None]"
keep_if_unparseable,bool
lazy,bool
tokenizer,Tokenizer
database_file,str
num_turns_to_concatenate,int
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, List[str], List[str]],Instance]"
_is_global_rule,"Callable[[str],bool]"
nonterminal,str
__init__,"Callable[[_, bool, int, str, bool, bool, bool, bool, bool, Union[str, None], Union[str, None], Union[str, None], Union[List[str], None], List[str], Tokenizer, Dict[str, TokenIndexer]],None]"
lazy,bool
sample,int
lf_syntax,str
replace_world_entities,bool
align_world_extractions,bool
gold_world_extractions,bool
tagger_only,bool
denotation_only,bool
entity_types,"Union[List[str], None]"
tokenizer,Tokenizer
neighbors,"Dict[str, List[str]]"
preprocess,"Callable[[_, JsonDict, bool],List[JsonDict]]"
question_data,JsonDict
predict,bool
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, str, List[str], Dict[str, Any], Dict[str, Union[str, List[str]]], Dict[str, Union[str, List[str]]], List[Token], int, List[Dict[str, int]], Dict[str, str]],Instance]"
question,str
world_extractions,"Dict[str, Union[str, List[str]]]"
entity_literals,"Dict[str, Union[str, List[str]]]"
debug_counter,int
qr_spec_override,"List[Dict[str, int]]"
neighbors,"Dict[str, List[str]]"
_compatible_question,"Callable[[_, JsonDict],bool]"
question_data,JsonDict
_fix_question,"Callable[[str],str]"
question,str
_get_first,"Callable[[Any],Any]"
maybe_list,Any
_check_world_flip,"Callable[[_, JsonDict],bool]"
question_data,JsonDict
_get_entity_tags,"Callable[[_, List[str], KnowledgeGraphField, JsonDict, List[Token]],List[int]]"
table_field,KnowledgeGraphField
entity_literals,JsonDict
_get_entity_literals,"Callable[[_, JsonDict],JsonDict]"
question_data,JsonDict
res,JsonDict
_stem_phrase,"Callable[[_, str],str]"
phrase,str
_replace_stemmed_entities,"Callable[[_, JsonDict],JsonDict]"
question_data,JsonDict
entity_pairs,"List[Tuple[str, str]]"
substitute,"Callable[[str],str]"
string,str
__init__,"Callable[[_, bool, str, str, int, bool, int, bool, Tokenizer, Dict[str, TokenIndexer], Dict[str, TokenIndexer], bool, List[str], bool, int, bool],None]"
lazy,bool
tables_directory,str
dpd_output_directory,str
max_dpd_logical_forms,int
sort_dpd_logical_forms,bool
max_dpd_tries,int
keep_if_no_dpd,bool
tokenizer,Tokenizer
use_table_for_vocab,bool
include_table_metadata,bool
max_table_tokens,int
output_agendas,bool
_read,"Callable[[_, str],_]"
file_path,str
_read_examples_file,"Callable[[_, str],_]"
file_path,str
_read_preprocessed_file,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, str, List[str], str, List[str], List[Token]],Instance]"
question,str
example_lisp_string,str
_json_blob_to_instance,"Callable[[_, JsonDict],Instance]"
json_obj,JsonDict
_should_keep_logical_form,"Callable[[str],bool]"
logical_form,str
parse_example_line,"Callable[[str],Dict]"
lisp_string,str
enumerate_spans,"Callable[[List[T], int, int, int, Callable[[List[T]],bool]],List[Tuple[int, int]]]"
offset,int
max_span_width,int
min_span_width,int
filter_function,"Callable[[List[T]],bool]"
spans,"List[Tuple[int, int]]"
spans,"Set[Tuple[str, Tuple[int, int]]]"
spans,"Set[Tuple[str, Tuple[int, int]]]"
_iob1_start_of_chunk,"Callable[[Union[str, None], Union[str, None], str, str],bool]"
curr_bio_tag,str
curr_conll_tag,str
to_bioul,"Callable[[List[str], str],List[str]]"
encoding,str
spans,"List[Tuple[str, List[int]]]"
__init__,"Callable[[_, str, int, List[str], List[str], Union[Tree, None], List[Union[str, None]], List[Union[str, None]], List[Union[float, None]], List[Union[str, None]], List[str], List[Tuple[str, List[str]]], Set[TypedSpan]],None]"
document_id,str
sentence_id,int
predicate_lemmas,"List[Union[str, None]]"
predicate_framenet_ids,"List[Union[str, None]]"
word_senses,"List[Union[float, None]]"
speakers,"List[Union[str, None]]"
srl_frames,"List[Tuple[str, List[str]]]"
dataset_iterator,"Callable[[_, str],Iterator[OntonotesSentence]]"
file_path,str
dataset_path_iterator,"Callable[[str],Iterator[str]]"
file_path,str
dataset_document_iterator,"Callable[[_, str],Iterator[List[OntonotesSentence]]]"
file_path,str
sentence_iterator,"Callable[[_, str],Iterator[OntonotesSentence]]"
file_path,str
_conll_rows_to_sentence,"Callable[[_, List[str]],OntonotesSentence]"
document_id,str
sentence_id,int
span_labels,List[List[str]]
clusters,"DefaultDict[int, List[Tuple[int, int]]]"
coref_stacks,"DefaultDict[int, List[int]]"
_process_coref_span_annotations_for_word,"Callable[[str, int, DefaultDict[int, List[Tuple[int, int]]], DefaultDict[int, List[int]]],None]"
label,str
word_index,int
clusters,"DefaultDict[int, List[Tuple[int, int]]]"
coref_stacks,"DefaultDict[int, List[int]]"
_process_span_annotations_for_word,"Callable[[List[str], List[List[str]], List[Union[str, None]]],None]"
span_labels,List[List[str]]
current_span_labels,"List[Union[str, None]]"
sql_variables,"Dict[str, Dict[str, str]]"
name,str
column_type,str
is_primary_key,bool
column_has_string_type,"Callable[[TableColumn],bool]"
column,TableColumn
column_has_numeric_type,"Callable[[TableColumn],bool]"
column,TableColumn
replace_variables,"Callable[[List[str], Dict[str, str]],Tuple[List[str], List[str]]]"
split_table_and_column_names,"Callable[[str],Iterable[str]]"
table,str
clean_and_split_sql,"Callable[[str],List[str]]"
sql,str
resolve_primary_keys_in_schema,"Callable[[List[str], Dict[str, List[TableColumn]]],List[str]]"
schema,"Dict[str, List[TableColumn]]"
read_dataset_schema,"Callable[[str],Dict[str, List[TableColumn]]]"
schema_path,str
schema,"Dict[str, List[TableColumn]]"
process_sql_data,"Callable[[List[JsonDict], bool, bool, bool, Dict[str, List[TableColumn]]],Iterable[SqlData]]"
use_all_sql,bool
use_all_queries,bool
remove_unneeded_aliases,bool
schema,"Dict[str, List[TableColumn]]"
__init__,"Callable[[_, Tokenizer, Dict[str, TokenIndexer], bool],None]"
tokenizer,Tokenizer
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, str, str, List[Tuple[int, int]], List[str], List[Token]],Instance]"
question_text,str
passage_text,str
char_spans,"List[Tuple[int, int]]"
token_spans,"List[Tuple[int, int]]"
normalize_text,"Callable[[str],str]"
text,str
char_span_to_token_span,"Callable[[List[Tuple[int, int]], Tuple[int, int]],Tuple[Tuple[int, int], bool]]"
token_offsets,"List[Tuple[int, int]]"
find_valid_answer_spans,"Callable[[List[Token], List[str]],List[Tuple[int, int]]]"
word_positions,"Dict[str, List[int]]"
make_reading_comprehension_instance,"Callable[[List[Token], List[Token], Dict[str, TokenIndexer], str, List[Tuple[int, int]], List[str], Dict[str, Any]],Instance]"
passage_text,str
token_spans,"List[Tuple[int, int]]"
candidate_answers,Counter
make_reading_comprehension_instance_quac,"Callable[[List[List[Token]], List[Token], Dict[str, TokenIndexer], str, List[List[Tuple[int, int]]], List[int], List[int], Dict[str, Any], int],Instance]"
question_list_tokens,List[List[Token]]
passage_text,str
token_span_lists,"List[List[Tuple[int, int]]]"
num_context_answers,int
__init__,"Callable[[_, str, str, Tokenizer, Dict[str, TokenIndexer], bool],None]"
base_tarball_path,str
unfiltered_tarball_path,str
tokenizer,Tokenizer
lazy,bool
_read,"Callable[[_, str],_]"
file_path,str
evidence_files,List[List[str]]
pick_paragraphs,"Callable[[_, List[List[str]], str, List[str]],List[str]]"
evidence_files,List[List[str]]
question,str
text_to_instance,"Callable[[_, str, str, List[Tuple[int, int]], List[str], List[Token], List[Token]],Instance]"
question_text,str
passage_text,str
token_spans,"List[Tuple[int, int]]"
__init__,"Callable[[_, Tokenizer, Dict[str, TokenIndexer], bool, int],None]"
tokenizer,Tokenizer
lazy,bool
num_context_answers,int
_read,"Callable[[_, str],_]"
file_path,str
text_to_instance,"Callable[[_, List[str], str, List[List[int]], List[List[int]], List[Token], List[int], List[int], Dict[str, Any]],Instance]"
passage_text,str
start_span_list,List[List[int]]
end_span_list,List[List[int]]
token_spans,"List[Tuple[int, int]]"
__init__,"Callable[[_, int, int, SequenceField],None]"
span_start,int
span_end,int
sequence_field,SequenceField
__str__,"Callable[[_],str]"
__eq__,"Callable[[_, _],bool]"
__init__,"Callable[[_, Union[str, int], str, bool],None]"
label_namespace,str
skip_indexing,bool
_maybe_warn_for_namespace,"Callable[[_, str],None]"
label_namespace,str
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
__str__,"Callable[[_],str]"
__init__,"Callable[[_, Union[List[str], List[int]], SequenceField, str],None]"
labels,"Union[List[str], List[int]]"
sequence_field,SequenceField
label_namespace,str
_maybe_warn_for_namespace,"Callable[[_, str],None]"
label_namespace,str
__iter__,"Callable[[_],Iterator[Union[str, int]]]"
__getitem__,"Callable[[_, int],Union[str, int]]"
idx,int
__len__,"Callable[[_],int]"
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
empty_field,"Callable[[_],SequenceLabelField]"
__str__,"Callable[[_],str]"
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
as_tensor,"Callable[[_, Dict[str, int]],DataArray]"
empty_field,"Callable[[_],Field]"
batch_tensors,"Callable[[_, List[DataArray]],DataArray]"
__init__,"Callable[[_, List[Field]],None]"
__getitem__,"Callable[[_, int],Field]"
idx,int
__len__,"Callable[[_],int]"
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
sequence_length,"Callable[[_],int]"
as_tensor,"Callable[[_, Dict[str, int]],DataArray]"
batch_tensors,"Callable[[_, List[DataArray]],DataArray]"
__str__,"Callable[[_],str]"
__init__,"Callable[[_, List[Tuple[int, int]], SequenceField, List[str], str, int],None]"
indices,"List[Tuple[int, int]]"
sequence_field,SequenceField
label_namespace,str
padding_value,int
_maybe_warn_for_namespace,"Callable[[_, str],None]"
label_namespace,str
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
empty_field,"Callable[[_],AdjacencyField]"
empty_list,"List[Tuple[int, int]]"
__str__,"Callable[[_],str]"
rule,str
is_global_rule,bool
rule_id,"Union[torch.LongTensor, None]"
__init__,"Callable[[_, str, bool, str, str],None]"
rule,str
is_global_rule,bool
vocab_namespace,str
nonterminal,str
self._rule_id,int
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
as_tensor,"Callable[[_, Dict[str, int]],ProductionRule]"
batch_tensors,"Callable[[_, List[ProductionRule]],ScatterableList]"
__str__,"Callable[[_],str]"
sequence_length,"Callable[[_],int]"
empty_field,"Callable[[_],SequenceField]"
__init__,"Callable[[_, Any],None]"
metadata,Any
__getitem__,"Callable[[_, str],Any]"
key,str
as_tensor,"Callable[[_, Dict[str, int]],DataArray]"
empty_field,"Callable[[_],MetadataField]"
batch_tensors,"Callable[[_, List[DataArray]],ScatterableList]"
__str__,"Callable[[_],str]"
__init__,"Callable[[_, int, SequenceField],None]"
index,int
sequence_field,SequenceField
__str__,"Callable[[_],str]"
__eq__,"Callable[[_, _],bool]"
__init__,"Callable[[_, List[Token], Dict[str, TokenIndexer]],None]"
self._indexed_tokens,"Union[Dict[str, TokenList], None]"
self._indexer_name_to_indexed_token,"Union[Dict[str, List[str]], None]"
__getitem__,"Callable[[_, int],Token]"
idx,int
__len__,"Callable[[_],int]"
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
indexer_name_to_indexed_token,"Dict[str, List[str]]"
sequence_length,"Callable[[_],int]"
as_tensor,"Callable[[_, Dict[str, int]],Dict[str, torch.Tensor]]"
batch_tensors,"Callable[[_, List[Dict[str, torch.Tensor]]],Dict[str, torch.Tensor]]"
tensor_list,"List[Dict[str, torch.Tensor]]"
__str__,"Callable[[_],str]"
__init__,"Callable[[_, Sequence[Union[str, int]], str, bool, Union[int, None]],None]"
labels,"Sequence[Union[str, int]]"
label_namespace,str
skip_indexing,bool
_maybe_warn_for_namespace,"Callable[[_, str],None]"
label_namespace,str
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
__str__,"Callable[[_],str]"
__init__,"Callable[[_, numpy.ndarray, int],None]"
padding_value,int
__str__,"Callable[[_],str]"
__init__,"Callable[[_, KnowledgeGraph, List[Token], Dict[str, TokenIndexer], Tokenizer, List[str], List[List[Token]], List[List[List[float]]], bool, int],None]"
knowledge_graph,KnowledgeGraph
tokenizer,Tokenizer
entity_tokens,List[List[Token]]
linking_features,List[List[List[float]]]
include_in_vocab,bool
max_table_tokens,int
self._feature_extractors,"List[Callable[[str, List[Token], Token, int, List[Token]],float]]"
self._entity_text_map,"Dict[str, List[Token]]"
self._entity_text_exact_text,"Dict[str, Set[str]]"
self._entity_text_lemmas,"Dict[str, Set[str]]"
count_vocab_items,"Callable[[_, Dict[str, Dict[str, int]]],_]"
counter,"Dict[str, Dict[str, int]]"
index,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
as_tensor,"Callable[[_, Dict[str, int]],Dict[str, torch.Tensor]]"
_compute_linking_features,"Callable[[_],List[List[List[float]]]]"
empty_field,"Callable[[_],KnowledgeGraphField]"
batch_tensors,"Callable[[_, List[Dict[str, torch.Tensor]]],Dict[str, torch.Tensor]]"
tensor_list,"List[Dict[str, torch.Tensor]]"
_number_token_match,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_exact_token_match,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_contains_exact_token_match,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_lemma_match,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_contains_lemma_match,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_edit_distance,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_related_column,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_related_column_lemma,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_span_overlap_fraction,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
_span_lemma_overlap_fraction,"Callable[[_, str, List[Token], Token, int, List[Token]],float]"
entity,str
token,Token
token_index,int
__init__,"Callable[[_, List[str]],None]"
__init__,"Callable[[_, str, List[str]],None]"
stopword_file,str
batch_tokenize,"Callable[[_, List[str]],List[List[Token]]]"
tokenize,"Callable[[_, str],List[Token]]"
text,str
__init__,"Callable[[_, str, bool, List[str], List[str]],None]"
byte_encoding,str
lowercase_characters,bool
batch_tokenize,"Callable[[_, List[str]],List[List[Token]]]"
tokenize,"Callable[[_, str],List[Token]]"
text,str
__init__,"Callable[[_, str, int, str, str, str, str, str, int],None]"
text,str
idx,int
lemma,str
pos,str
tag,str
dep,str
ent_type,str
text_id,int
show_token,"Callable[[Token],str]"
token,Token
split_sentences,"Callable[[_, str],List[str]]"
text,str
batch_split_sentences,"Callable[[_, List[str]],List[List[str]]]"
__init__,"Callable[[_, str, bool],None]"
language,str
rule_based,bool
split_sentences,"Callable[[_, str],List[str]]"
text,str
batch_split_sentences,"Callable[[_, List[str]],List[List[str]]]"
stem_word,"Callable[[_, Token],Token]"
word,Token
stem_word,"Callable[[_, Token],Token]"
word,Token
stem_word,"Callable[[_, Token],Token]"
word,Token
__init__,"Callable[[_, WordSplitter, WordFilter, WordStemmer, List[str], List[str]],None]"
word_splitter,WordSplitter
word_filter,WordFilter
word_stemmer,WordStemmer
tokenize,"Callable[[_, str],List[Token]]"
text,str
batch_tokenize,"Callable[[_, List[str]],List[List[Token]]]"
batch_split_words,"Callable[[_, List[str]],List[List[Token]]]"
split_words,"Callable[[_, str],List[Token]]"
sentence,str
split_words,"Callable[[_, str],List[Token]]"
sentence,str
_can_split,"Callable[[_, str],_]"
token,str
split_words,"Callable[[_, str],List[Token]]"
sentence,str
split_words,"Callable[[_, str],List[Token]]"
sentence,str
_remove_spaces,"Callable[[List[spacy.tokens.Token]],List[spacy.tokens.Token]]"
tokens,List[spacy.tokens.Token]
__init__,"Callable[[_, str, bool, bool, bool],None]"
language,str
pos_tags,bool
parse,bool
ner,bool
batch_split_words,"Callable[[_, List[str]],List[List[Token]]]"
split_words,"Callable[[_, str],List[Token]]"
sentence,str
batch_split_words,"Callable[[_, List[str]],List[List[Token]]]"
split_words,"Callable[[_, str],List[Token]]"
sentence,str
__init__,"Callable[[_, bool],None]"
do_lower_case,bool
split_words,"Callable[[_, str],List[Token]]"
sentence,str
_create_tensor_dicts,"Callable[[Queue, Queue, DataIterator, bool, int],None]"
input_queue,Queue
output_queue,Queue
iterator,DataIterator
shuffle,bool
index,int
_queuer,"Callable[[Iterable[Instance], Queue, int, Union[int, None]],None]"
input_queue,Queue
num_workers,int
__init__,"Callable[[_, DataIterator, int, int],None]"
base_iterator,DataIterator
num_workers,int
output_queue_size,int
_create_batches,"Callable[[_, Iterable[Instance], bool],Iterable[Batch]]"
shuffle,bool
index_with,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
__call__,"Callable[[_, Iterable[Instance], int, bool],Iterator[TensorDict]]"
num_epochs,int
shuffle,bool
sort_by_padding,"Callable[[List[Instance], List[Tuple[str, str]], Vocabulary, float],List[Instance]]"
sorting_keys,"List[Tuple[str, str]]"
vocab,Vocabulary
padding_noise,float
__init__,"Callable[[_, List[Tuple[str, str]], float, bool, int, int, int, bool, bool, Tuple[str, int]],None]"
sorting_keys,"List[Tuple[str, str]]"
padding_noise,float
biggest_batch_first,bool
batch_size,int
instances_per_epoch,int
max_instances_in_memory,int
cache_instances,bool
track_epoch,bool
_create_batches,"Callable[[_, Iterable[Instance], bool],Iterable[Batch]]"
shuffle,bool
add_epoch_number,"Callable[[Batch, int],Batch]"
batch,Batch
epoch,int
__init__,"Callable[[_, int, int, int, bool, bool, Tuple[str, int]],None]"
batch_size,int
instances_per_epoch,int
max_instances_in_memory,int
cache_instances,bool
track_epoch,bool
self.vocab,Vocabulary
self._cache,"Dict[int, List[TensorDict]]"
self._cursors,"Dict[int, Iterator[Instance]]"
__call__,"Callable[[_, Iterable[Instance], int, bool],Iterator[TensorDict]]"
num_epochs,int
shuffle,bool
_memory_sized_lists,"Callable[[_, Iterable[Instance]],Iterable[List[Instance]]]"
_ensure_batch_is_sufficiently_small,"Callable[[_, Iterable[Instance]],List[List[Instance]]]"
get_num_batches,"Callable[[_, Iterable[Instance]],int]"
_create_batches,"Callable[[_, Iterable[Instance], bool],Iterable[Batch]]"
shuffle,bool
index_with,"Callable[[_, Vocabulary],_]"
vocab,Vocabulary
__init__,"Callable[[_, List[Tuple[str, str]], float, bool, int, int, int, bool],None]"
sorting_keys,"List[Tuple[str, str]]"
padding_noise,float
biggest_batch_first,bool
batch_size,int
instances_per_epoch,int
max_instances_in_memory,int
cache_instances,bool
_create_batches,"Callable[[_, Iterable[Instance], bool],Iterable[Batch]]"
shuffle,bool
parse_dataset,"Callable[[str, str, bool],_]"
filename,str
filter_by,str
verbose,bool
main,"Callable[[int, str, str, bool],None]"
data_directory,int
dataset,str
filter_by,str
verbose,bool
process_dataset,"Callable[[JsonDict, str],Iterable[Tuple[str, JsonDict]]]"
data,JsonDict
split_type,str
main,"Callable[[int, str],None]"
output_directory,int
data,str
train_fixture,"Callable[[str],None]"
config_prefix,str
train_fixture_gpu,"Callable[[str],None]"
config_prefix,str
source,str
name,str
link,str
url_ok,"Callable[[MatchTuple],bool]"
match_tuple,MatchTuple
path_ok,"Callable[[MatchTuple],bool]"
match_tuple,MatchTuple
link_ok,"Callable[[MatchTuple],Tuple[MatchTuple, bool]]"
match_tuple,MatchTuple
main,"Callable[[str, str, str],None]"
inp_fn,str
domain,str
out_fn,str
char_to_word_index,"Callable[[int, str],int]"
char_ind,int
sent,str
element_from_span,"Callable[[List[int], str],Element]"
span_type,str
split_predicate,"Callable[[Extraction],Extraction]"
ex,Extraction
extraction_to_conll,"Callable[[Extraction],List[str]]"
ex,Extraction
interpret_span,"Callable[[str],List[int]]"
text_spans,str
interpret_element,"Callable[[str, str, str],Element]"
element_type,str
text,str
span,str
parse_element,"Callable[[str],List[Element]]"
raw_element,str
read,"Callable[[str],List[Extraction]]"
fn,str
convert_sent_dict_to_conll,"Callable[[_, _],str]"
main,"Callable[[int, int, str, str, str],_]"
serialization_directory,int
device,int
data,str
prefix,str
domain,str
generate_archive,"Callable[[str, str, str, str, bool],None]"
config_file,str
serialization_dir,str
weights_file,str
archive_name,str
exist_ok,bool
documented_modules,"Callable[[str, str],Set[str]]"
docs_dir,str
module_regex,str
existing_modules,"Callable[[str],Set[str]]"
module_glob,str
parse_section_name,"Callable[[str],str]"
line,str
parse_package,"Callable[[str],Tuple[str, Union[str, None]]]"
line,str
parse_requirements,"Callable[[],Tuple[PackagesType, PackagesType, Set[str]]]"
essential_packages,PackagesType
other_packages,PackagesType
section,str
parse_setup,"Callable[[],Tuple[PackagesType, PackagesType, Set[str], Set[str]]]"
essential_packages,PackagesType
test_packages,PackagesType
main,"Callable[[],int]"
main,"Callable[[str, str, str, str, int, int, bool],_]"
vocab_path,str
elmo_config_path,str
elmo_weights_path,str
output_dir,str
batch_size,int
device,int
use_custom_oov_token,bool
read_json_line,"Callable[[str],Tuple[str, str, List[JsonDict], List[str]]]"
line,str
process_data,"Callable[[str, str, int, int, bool, bool],None]"
input_file,str
output_file,str
max_path_length,int
max_num_logical_forms,int
ignore_agenda,bool
write_sequences,bool
processed_data,JsonDict
make_data,"Callable[[str, str, str, int],None]"
input_file,str
output_file,str
archived_model_file,str
max_num_decoded_sequences,int
group_dataset,"Callable[[str, str],None]"
input_file,str
output_file,str
make_data,"Callable[[str, str, str, str, int],None]"
input_examples_file,str
tables_directory,str
archived_model_file,str
output_dir,str
num_logical_forms,int
main,"Callable[[Params, str],_]"
params,Params
outdir,str
to_json_line,"Callable[[Instance],_]"
instance,Instance
search,"Callable[[str, str, str, int, int, bool, bool],None]"
tables_directory,str
input_examples_file,str
output_path,str
max_path_length,int
max_num_logical_forms,int
use_agenda,bool
output_separate_files,bool
main,"Callable[[str, argparse.Namespace],_]"
param_file,str
__init__,"Callable[[_, Dict[str, TokenIndexer]],None]"
text_to_instance,"Callable[[_, List[Token], List[str]],Instance]"
_read,"Callable[[_, str],Iterator[Instance]]"
file_path,str
__init__,"Callable[[_, TextFieldEmbedder, Seq2SeqEncoder, Vocabulary],None]"
word_embeddings,TextFieldEmbedder
encoder,Seq2SeqEncoder
vocab,Vocabulary
forward,"Callable[[_, Dict[str, torch.Tensor], torch.Tensor],torch.Tensor]"
sentence,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
load_data,"Callable[[str],Tuple[List[str], List[str]]]"
file_path,str
__init__,"Callable[[_, int, int, int, int],None]"
embedding_dim,int
hidden_dim,int
vocab_size,int
tagset_size,int
init_hidden,"Callable[[_],Tuple[torch.Tensor, torch.Tensor]]"
__init__,"Callable[[_, Dict[str, TokenIndexer]],None]"
text_to_instance,"Callable[[_, List[Token], List[str]],Instance]"
_read,"Callable[[_, str],Iterator[Instance]]"
file_path,str
__init__,"Callable[[_, TextFieldEmbedder, Seq2SeqEncoder, Vocabulary],None]"
word_embeddings,TextFieldEmbedder
encoder,Seq2SeqEncoder
vocab,Vocabulary
forward,"Callable[[_, Dict[str, torch.Tensor], torch.Tensor],torch.Tensor]"
sentence,"Dict[str, torch.Tensor]"
get_metrics,"Callable[[_, bool],Dict[str, float]]"
reset,bool
translated,AtFormal
rtype,ReturnType
is_file_on_local_server,"Callable[[_, _],Tuple[Union[Path, None], Union[int, None], Union[int, None]]]"
__init__,"Callable[[_, Backend, str, int, str, int, int, int, int, bool, int, str, int, int, int],_]"
backend,Backend
dataset_name,str
task_type,int
metric,str
limit,int
ensemble_size,int
ensemble_nbest,int
seed,int
shared_mode,bool
max_iterations,int
precision,str
sleep_duration,int
memory_limit,int
read_at_most,int
get_valid_test_preds,"Callable[[_, list],_]"
selected_keys,list
fit_ensemble,"Callable[[_, list],_]"
selected_keys,list
predict,"Callable[[_, str, AbstractEnsemble, list, int, int],_]"
set_,str
ensemble,AbstractEnsemble
selected_keys,list
n_preds,int
index_run,int
start,"Callable[[_, Configuration, Union[str, None], float, int, Union[str, None], bool],_]"
config,Configuration
cutoff,float
seed,int
capped,bool
_asyncify,"Callable[[str],str]"
code,str
_async_parse_cell,"Callable[[str],ast.AST]"
cell,str
_should_be_async,"Callable[[str],bool]"
cell,str
find_end_of_continued_line,"Callable[[_, int],_]"
start_line,int
assemble_continued_line,"Callable[[_, Tuple[int, int], int],_]"
end_line,int
show_linewise_tokens,"Callable[[str],_]"
s,str
transform_cell,"Callable[[_, str],str]"
cell,str
check_complete,"Callable[[_, str],_]"
cell,str
try_import,"Callable[[str, _],List[str]]"
mod,str
_should_be_async,"Callable[[str],bool]"
cell,str
_ast_asyncify,"Callable[[str, str],ast.Module]"
cell,str
wrapper_name,str
_run_cell,"Callable[[_, str, bool, bool, bool],_]"
raw_cell,str
store_history,bool
silent,bool
shell_futures,bool
should_run_async,"Callable[[_, str],bool]"
raw_cell,str
run_cell_async,"Callable[[_, str, _, _, _],ExecutionResult]"
raw_cell,str
run_ast_nodes,"Callable[[_, ListType[AST], str, _, _, _],_]"
cell_name,str
_async_exec,"Callable[[_, types.CodeType, dict],_]"
user_ns,dict
check_complete,"Callable[[_, str],Tuple[str, str]]"
code,str
expand_user,"Callable[[str],Tuple[str, bool, str]]"
path,str
compress_user,"Callable[[str, bool, str],str]"
path,str
tilde_expand,bool
tilde_val,str
__init__,"Callable[[_, int, int, str],None]"
start,int
end,int
text,str
type,str
__eq__,"Callable[[_, _],Bool]"
_deduplicate_completions,"Callable[[str, _IC],_IC]"
text,str
completions,_IC
rectify_completions,"Callable[[str, _IC],_IC]"
text,str
completions,_IC
match_dict_keys,"Callable[[List[str], str, str],_]"
prefix,str
delims,str
cursor_to_position,"Callable[[str, int, int],int]"
text,str
line,int
column,int
position_to_cursor,"Callable[[str, int],Tuple[int, int]]"
text,str
offset,int
back_latex_name_matches,"Callable[[str],_]"
text,str
_formatparamchildren,"Callable[[_],str]"
_make_signature,"Callable[[_],str]"
magic_config_matches,"Callable[[_, str],List[str]]"
text,str
magic_color_matches,"Callable[[_, str],List[str]]"
text,str
_jedi_matches,"Callable[[_, int, int, str],_]"
cursor_column,int
cursor_line,int
text,str
completions,"Callable[[_, str, int],Iterator[Completion]]"
text,str
offset,int
_completions,"Callable[[_, str, int],Iterator[Completion]]"
full_text,str
offset,int
_complete,"Callable[[_],Tuple[str, List[str], List[str], Iterable[_FakeJediCompletion]]]"
_info,"Callable[[_, _, _, _, _],dict]"
SYM,str
KWARG,str
MODE,str
QUOTE_LEVEL,int
attribute_names,"Union[Dict[str, str], Dict[str, int]]"
_stdout,IO
main,"Callable[[_, int, int],_]"
myint,int
myint2,int
mylist,int
main,"Callable[[_, int, int],None]"
myint,int
myint2,int
mylist,int
__int__,"Callable[[_],int]"
__float__,"Callable[[_],float]"
__complex__,"Callable[[_],complex]"
__bytes__,"Callable[[_],bytes]"
__abs__,"Callable[[_],T_co]"
__round__,"Callable[[_, int],T_co]"
ndigits,int
mode,"Callable[[_],str]"
name,"Callable[[_],str]"
close,"Callable[[_],None]"
closed,"Callable[[_],bool]"
fileno,"Callable[[_],int]"
flush,"Callable[[_],None]"
isatty,"Callable[[_],bool]"
read,"Callable[[_, int],AnyStr]"
n,int
readable,"Callable[[_],bool]"
readline,"Callable[[_, int],AnyStr]"
limit,int
readlines,"Callable[[_, int],List[AnyStr]]"
hint,int
seek,"Callable[[_, int, int],int]"
offset,int
whence,int
seekable,"Callable[[_],bool]"
tell,"Callable[[_],int]"
truncate,"Callable[[_, int],int]"
size,int
writable,"Callable[[_],bool]"
write,"Callable[[_, AnyStr],int]"
s,AnyStr
writelines,"Callable[[_, List[AnyStr]],None]"
__exit__,"Callable[[_, _, _, _],None]"
write,"Callable[[_, Union[bytes, bytearray]],int]"
__enter__,"Callable[[_],BinaryIO]"
buffer,"Callable[[_],BinaryIO]"
encoding,"Callable[[_],str]"
line_buffering,"Callable[[_],bool]"
newlines,"Callable[[_],Any]"
__enter__,"Callable[[_],TextIO]"
f,"Callable[[_],list]"
f,"Callable[[int],_]"
x,int
x,str
x,float
f,"Callable[[_],list]"
f,"Callable[[],int]"
x,int
NO_MEANING,str
cv0,typing.ClassVar[int]
cv2,T_CV2
cv3,T_CV3
not_cv4,T_CV4
iv0,dataclasses.InitVar[int]
iv2,T_IV2
iv3,T_IV3
not_iv4,T_IV4
cv1,ClassVar
cv2,T_CV2
cv3,T_CV3
not_cv4,T_CV4
iv1,InitVar
iv2,T_IV2
iv3,T_IV3
not_iv4,T_IV4
test,"Callable[[spam],ham]"
a,spam
test,"Callable[[_, foo],_]"
b,foo
test,"Callable[[],int]"
a,float
b,str
test,"Callable[[_, foo],_]"
b,foo
args,bar
spam,baz
kwargs,int
wrapper,"Callable[[],int]"
wrapper_like,"Callable[[],int]"
m1,"Callable[[_, _, _],int]"
m1,"Callable[[_, _, _],int]"
test,"Callable[[_, _, int],_]"
c,int
test,"Callable[[_, _],spam]"
test,"Callable[[anno, _],_]"
self,anno
wrapper,"Callable[[],int]"
wrapper,"Callable[[],int]"
foo,"Callable[[_],float]"
b,int
bar,"Callable[[_],float]"
b,int
bar,"Callable[[_],int]"
b,int
b,int
bar,"Callable[[_],float]"
b,int
bar,"Callable[[_],float]"
bar,"Callable[[_, int],float]"
b,int
spam,"Callable[[int, _],float]"
b,int
kwargs,int
kwargs,int
foo,"Callable[[int],_]"
a,int
foo,"Callable[[int],_]"
a,int
annotated,"Callable[[list],_]"
arg1,list
foo,"Callable[[typing.List[typing.Any], int],typing.Iterator[typing.Tuple[int, typing.Any]]]"
x,int
x,int
y,str
o,type
pars,bool
j,str
k,str
z,int
x,str
y,str
foo,"Callable[[int],_]"
x,int
x,str
i,int
j,int
x,float
__init__,"Callable[[_, int],None]"
x,int
c.new_attr,int
meth,"Callable[[_, complex],None]"
param,complex
cv1,ClassVar
cv2,T_CV2
cv3,T_CV3
not_cv4,T_CV4
iv1,InitVar
iv2,T_IV2
iv3,T_IV3
not_iv4,T_IV4
__init__,"Callable[[_, int],None]"
x,int
self.x,no_such_name
__init__,"Callable[[_, int],None]"
x,int
sfel.y,int
no_such_name.attr,int
cv0,typing.ClassVar[int]
cv2,T_CV2
cv3,T_CV3
not_cv4,T_CV4
iv0,dataclasses.InitVar[int]
iv2,T_IV2
iv3,T_IV3
not_iv4,T_IV4
annotation,"Callable[[int],_]"
x,int
method_annotation,"Callable[[_, bytes],_]"
x,bytes
x,int
x,int
x,int
y,int
x,int
y,int
x,int
y,int
x,int
y,int
x,int
x,int
x,int
x,int
x,int
x,Any
y,int
z,int
x,int
self,str
selfx,str
object,str
object,str
x,int
x,int
x,int
x,int
y,int
x,int
y,int
x,int
y,int
i,int
x,int
x,object
x,int
x,int
y,int
x,int
y,int
x,int
x,int
x,int
y,int
z,int
t,int
x,int
y,str
z,str
a,str
b,str
c,str
b,str
c,str
a,str
d,str
x,int
y,int
z,object
t,int
x,typ
y,typ
z,typ
x,Mutable
x,int
x,int
y,int
x,int
y,int
x,int
y,int
z,int
year,int
month,int
day,int
x,int
y,int
z,int
i,int
j,str
k,F
l,float
z,complex
i,int
j,str
k,F
l,float
z,complex
x,int
x,int
x,int
x,int
i,int
foo,"Callable[[_],int]"
bar,"Callable[[_],int]"
i,int
x,int
x,int
x,int
y,int
x,int
y,int
x,int
y,int
s,ClassVar
x,int
y,int
x,int
x,int
y,int
x,int
y,list
x,int
y,list
x,list
x,list
x,list
x,list
x,list
x,int
x,dict
y,int
x,int
y,int
z,int
t,int
x,int
d,C
e,int
x,int
y,float
x,int
y,int
x,int
y,int
x,int
token,int
group,int
name,str
id,UserId
name,str
id,int
id,int
id,int
id,int
d,object
child,Child
x,int
y,int
x,str
y,T
f,dict
f,T
x,int
y,int
x,int
y,int
x,int
token,int
group,int
name,str
id,UserId
name,str
id,int
id,int
id,int
id,int
d,object
child,Child
x,int
y,int
x,str
y,T
a,int
b,int
c,list
d,list
e,int
f,int
a,int
b,list
c,list
d,int
e,int
x,int
i,int
i,int
i,int
i,int
i,int
content,T
label,str
x,T
y,S
new_field,str
x,T
x,int
y,int
x,int
y,int
x,int
f,int
f,int
x,int
x,int
x,int
y,int
x,int
y,int
z,str
x,int
x,deque
x,deque
x,int
x,int
i,int
i,int
x,int
x,int
x,int
x,int
y,int
x,int
i,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
x,int
y,str
i,int
i,int
i,int
x,int
x,int
i,int
i,int
i,int
i,int
i,int
i,int
j,int
i,int
i,int
i,int
x,int
y,int
x,int
x,int
x,int
x,Any
x,Any
x,Any
x,int
y,int
c,int
c,int
c,int
i,int
i,int
x,typestr
x,typestr
x,typestr
x,typestr
x,int
x,int
y,int
x,int
y,int
z,int
t,int
x,int
y,int
x,int
y,int
x,int
y,int
x,int
x,int
f,C
f,C
g,C
f,D
f,C
f,D
f,E
f,C
f,C
g,C
f,C
g,int
_get_package,"Callable[[_],ModuleType]"
_normalize_path,"Callable[[_],str]"
_get_resource_reader,"Callable[[ModuleType],Union[resources_abc.ResourceReader, None]]"
package,ModuleType
open_binary,"Callable[[Package, Resource],BinaryIO]"
package,Package
resource,Resource
open_text,"Callable[[Package, Resource, str, str],TextIO]"
package,Package
resource,Resource
encoding,str
errors,str
read_binary,"Callable[[Package, Resource],bytes]"
package,Package
resource,Resource
read_text,"Callable[[Package, Resource, str, str],str]"
package,Package
resource,Resource
encoding,str
errors,str
path,"Callable[[Package, Resource],Iterator[Path]]"
package,Package
resource,Resource
is_resource,"Callable[[Package, str],bool]"
package,Package
name,str
contents,"Callable[[Package],Iterable[str]]"
package,Package
split_camelcase,"Callable[[str],List[str]]"
camel_case_identifier,str
split_identifier_into_parts,"Callable[[str],List[str]]"
identifier,str
__init__,"Callable[[_, List[str], List[Set[int]]],None]"
parent_relations,List[Set[int]]
parents,"Callable[[_, str],List[str]]"
element,str
load,"Callable[[str],CSharpLattice]"
filename,str
__init__,"Callable[[_, List[str], List[Set[int]]],None]"
parent_relations,List[Set[int]]
__contains__,"Callable[[_, str],_]"
element,str
parents,"Callable[[_, str],List[str]]"
element,str
to_dot,"Callable[[_, str],None]"
filename,str
save_as_json,"Callable[[_, str],None]"
filename,str
merge,"Callable[[_, _],None]"
load,"Callable[[str],Lattice]"
filename,str
__init__,"Callable[[_, Lattice],None]"
lattice,Lattice
is_unk,"Callable[[_, str],bool]"
token,str
get_id_or_unk,"Callable[[_, str, Union[Lattice, None]],List[int]]"
token,str
get_id_or_none,"Callable[[_, str, Union[Lattice, None]],List[Union[int, None]]]"
token,str
add_batch_tokens,"Callable[[_, Iterable[str], Lattice, int],None]"
lattice,Lattice
count_threshold,int
get_feature_dictionary_for,"Callable[[Iterable[str], Lattice, int],LatticeVocabulary]"
lattice,Lattice
count_threshold,int
get_vocabulary_for,"Callable[[Union[Iterable[str], Counter], Lattice, int, int],LatticeVocabulary]"
tokens,"Union[Iterable[str], Counter]"
lattice,Lattice
count_threshold,int
max_size,int
load_file,"Callable[[str],List[str]]"
name,str
get_language_keywords,"Callable[[str],List[str]]"
language,str
__init__,"Callable[[_, Union[int, None], bool, bool],_]"
lower_case_all,bool
include_space,bool
num_chars_in_vocabulary,"Callable[[_],int]"
__get_char_idx,"Callable[[_, str],int]"
character,str
get_word_from_ids,"Callable[[_, np.ndarray],str]"
tensorize_str,"Callable[[_, str],np.ndarray]"
input,str
__init__,"Callable[[_, bool, bool],None]"
add_unk,bool
add_pad,bool
is_equal_to,"Callable[[_, _],bool]"
add_or_get_id,"Callable[[_, str],int]"
token,str
is_unk,"Callable[[_, str],bool]"
token,str
get_id_or_unk,"Callable[[_, str],int]"
token,str
get_id_or_unk_multiple,"Callable[[_, List[str], Union[int, None], int],List[int]]"
padding_element,int
get_name_for_id,"Callable[[_, int],str]"
token_id,int
__len__,"Callable[[_],int]"
__batch_add_from_counter,"Callable[[_, Counter, int, int],None]"
token_counter,Counter
count_threshold,int
max_size,int
get_unk,"Callable[[],str]"
get_pad,"Callable[[],str]"
create_vocabulary,"Callable[[Union[Iterable[str], Counter], int, int, bool, bool],Vocabulary]"
tokens,"Union[Iterable[str], Counter]"
max_size,int
count_threshold,int
add_unk,bool
add_pad,bool
update,"Callable[[_, Counter, int, int],_]"
token_counter,Counter
max_size,int
count_threshold,int
get_empirical_distribution,"Callable[[_, Iterable[str], float],np.ndarray]"
dirichlet_alpha,float
__init__,"Callable[[_, Iterator[T], int, bool],_]"
max_queue_size,int
enabled,bool
__worker,"Callable[[queue.Queue, Iterator[T]],None]"
__next__,"Callable[[_],T]"
__init__,"Callable[[_, Iterator[Iterable], Callable, int, int, bool],_]"
worker_callable,Callable
max_queue_size,int
num_workers,int
use_threads,bool
__init__,"Callable[[_, Iterator[T], int, bool],_]"
max_queue_size,int
enabled,bool
__worker,"Callable[[_, Iterator[T]],None]"
__init__,"Callable[[_, Iterable[T], int, int],_]"
max_queue_size_inner,int
max_queue_size_outer,int
__worker_inner,"Callable[[_, Iterable[T]],None]"
__worker_outer,"Callable[[_],None]"
__init__,"Callable[[_, str],_]"
path,str
path,"Callable[[_],str]"
create,"Callable[[str, Union[str, None]],_]"
path,str
replace_by_env_var,"Callable[[_],str]"
is_dir,"Callable[[_],bool]"
is_file,"Callable[[_],bool]"
make_as_dir,"Callable[[_],None]"
read_as_binary,"Callable[[_],bytes]"
save_as_compressed_file,"Callable[[_, Any],None]"
data,Any
read_as_text,"Callable[[_],str]"
read_as_json,"Callable[[_],Any]"
read_as_jsonl,"Callable[[_, Union[Callable[[str, Exception],None], None]],Iterable[Any]]"
error_handling,"Union[Callable[[str, Exception],None], None]"
read_as_pickle,"Callable[[_],Any]"
read_by_file_suffix,"Callable[[_],Any]"
get_filtered_files_in_dir,"Callable[[_, str],List[RichPath]]"
file_pattern,str
iterate_filtered_files_in_dir,"Callable[[_, str],Iterable[RichPath]]"
file_pattern,str
join,"Callable[[_, str],RichPath]"
filename,str
basename,"Callable[[_],str]"
get_size,"Callable[[_],int]"
exists,"Callable[[_],bool]"
to_local_path,"Callable[[_],LocalPath]"
relpath,"Callable[[_, RichPath],str]"
base,RichPath
copy_from,"Callable[[_, RichPath, bool],None]"
source_path,RichPath
overwrite_ok,bool
_copy_from_file,"Callable[[_, RichPath],None]"
from_file,RichPath
_copy_from_local_file,"Callable[[_, LocalPath],None]"
local_file,LocalPath
__init__,"Callable[[_, str],_]"
path,str
is_dir,"Callable[[_],bool]"
is_file,"Callable[[_],bool]"
relpath,"Callable[[_, LocalPath],str]"
base,LocalPath
read_as_binary,"Callable[[_],bytes]"
read_as_pickle,"Callable[[_],Any]"
__is_gzipped,"Callable[[str],bool]"
filename,str
save_as_compressed_file,"Callable[[_, Any],None]"
data,Any
iterate_filtered_files_in_dir,"Callable[[_, str],Iterable[LocalPath]]"
file_pattern,str
join,"Callable[[_, str],LocalPath]"
filename,str
basename,"Callable[[_],str]"
get_size,"Callable[[_],int]"
exists,"Callable[[_],bool]"
to_local_path,"Callable[[_],LocalPath]"
_copy_from_local_file,"Callable[[_, LocalPath],None]"
local_file,LocalPath
__init__,"Callable[[_, str, str, BlockBlobService, Union[str, None]],_]"
path,str
azure_container_name,str
azure_blob_service,BlockBlobService
is_dir,"Callable[[_],bool]"
is_file,"Callable[[_],bool]"
relpath,"Callable[[_, AzurePath],str]"
base,AzurePath
make_as_dir,"Callable[[_],None]"
read_as_binary,"Callable[[_],bytes]"
__cached_file_path,"Callable[[_],str]"
__cache_file_locally,"Callable[[_, int],LocalPath]"
num_retries,int
__read_as_binary,"Callable[[_],bytes]"
read_as_pickle,"Callable[[_],Any]"
save_as_compressed_file,"Callable[[_, Any],_]"
data,Any
iterate_filtered_files_in_dir,"Callable[[_, str],Iterable[AzurePath]]"
file_pattern,str
join,"Callable[[_, str],AzurePath]"
filename,str
basename,"Callable[[_],str]"
get_size,"Callable[[_],int]"
exists,"Callable[[_],bool]"
to_local_path,"Callable[[_],LocalPath]"
_copy_from_file,"Callable[[_, RichPath],None]"
from_file,RichPath
_copy_from_local_file,"Callable[[_, LocalPath],None]"
local_file,LocalPath
load_json_gz,"Callable[[str],Any]"
filename,str
save_json_gz,"Callable[[Any, str],None]"
data,Any
filename,str
load_jsonl_gz,"Callable[[str],Iterator[Any]]"
filename,str
save_jsonl_gz,"Callable[[Iterable[Any], str],None]"
filename,str
__init__,"Callable[[_, Union[RichPath, str], str, int, str, int],_]"
file_prefix,str
max_chunk_size,int
file_suffix,str
parallel_writers,int
self.__num_files_written,int
__write_if_needed,"Callable[[_],None]"
add,"Callable[[_, T],None]"
element,T
add_many,"Callable[[_, Iterable[T]],None]"
__flush,"Callable[[_],None]"
close,"Callable[[_],None]"
run_and_debug,"Callable[[Callable[[],None], bool],None]"
func,"Callable[[],None]"
enable_debugging,bool
git_tag_run,"Callable[[str],str]"
train_run_id,str
__create_rnn_cell,"Callable[[_, int],_]"
h_dim,int
sparse_gnn_layer,"Callable[[_, tf.Tensor, tf.Tensor, List[tf.Tensor], Union[tf.Tensor, None], Union[tf.Tensor, None], Dict[int, tf.Tensor]],tf.Tensor]"
adjacency_lists,List[tf.Tensor]
num_incoming_edges_per_type,"Union[tf.Tensor, None]"
num_outgoing_edges_per_type,"Union[tf.Tensor, None]"
edge_features,"Dict[int, tf.Tensor]"
compute_messages_for_edge_type,"Callable[[int, int, tf.Tensor],None]"
data_edge_type_idx,int
weights_edge_type_idx,int
async_ggnn_layer,"Callable[[_, tf.Tensor, List[tf.Tensor], List[List[List[tf.Tensor]]], List[List[List[tf.Tensor]]], List[List[tf.Tensor]], List[List[tf.Tensor]], List[tf.Tensor]],tf.Tensor]"
initial_nodes,List[tf.Tensor]
sending_nodes,List[List[List[tf.Tensor]]]
edge_labels,List[List[List[tf.Tensor]]]
msg_targets,List[List[tf.Tensor]]
receiving_nodes,List[List[tf.Tensor]]
receiving_node_num,List[tf.Tensor]
propagate_one_step,"Callable[[_, List[tf.Tensor], List[tf.Tensor], tf.Tensor, tf.Tensor, tf.Tensor],tf.Tensor]"
sending_states_per_edge_type,List[tf.Tensor]
edge_labels_per_type,List[tf.Tensor]
self.__saved_variables,"Dict[str, np.ndarray]"
save_all,"Callable[[_, tf.Session, Union[Callable[[str],bool], None]],None]"
exclude_variable,"Union[Callable[[str],bool], None]"
has_saved_variables,"Callable[[_],bool]"
restore_saved_values,"Callable[[_, tf.Session],None]"
pick_indices_from_probs,"Callable[[np.ndarray, int, bool, float],Iterable[int]]"
num_picks,int
use_sampling,bool
temperature,float
picked_index,int
self.__grad_ratio_acc_vars,"OrderedDict[str, tf.Variable]"
_is_ipv6_available,"Callable[[],bool]"
get_client_certificate_path,"Callable[[_],str]"
get_client_key_path,"Callable[[_],str]"
get_openssl_path,"Callable[[_],Path]"
get_verify_argument,"Callable[[_, ClientAuthConfigEnum],str]"
client_auth_config,ClientAuthConfigEnum
is_platform_supported,"Callable[[],bool]"
__init__,"Callable[[_, ClientAuthConfigEnum, str],None]"
client_auth_config,ClientAuthConfigEnum
extra_openssl_args,str
_terminate_process,"Callable[[_],None]"
get_openssl_path,"Callable[[_],Path]"
get_verify_argument,"Callable[[_, ClientAuthConfigEnum],str]"
client_auth_config,ClientAuthConfigEnum
get_openssl_path,"Callable[[_],Path]"
get_verify_argument,"Callable[[_, ClientAuthConfigEnum],str]"
client_auth_config,ClientAuthConfigEnum
__init__,"Callable[[_, ClientAuthConfigEnum, Union[int, None]],None]"
client_auth_config,ClientAuthConfigEnum
get_title,"Callable[[_],str]"
get_title,"Callable[[_],str]"
__init__,"Callable[[_, int, int],None]"
network_retries,int
network_timeout,int
run_scan_command,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],PluginScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
__init__,"Callable[[_, str, int, Union[str, None], TlsWrappedProtocolEnum, str, Union[str, None], Union[ClientAuthenticationCredentials, None], Union[HttpConnectTunnelingSettings, None], OpenSslVersionEnum, str, ClientAuthenticationServerConfigurationEnum],None]"
hostname,str
port,int
tls_wrapped_protocol,TlsWrappedProtocolEnum
tls_server_name_indication,str
highest_ssl_version_supported,OpenSslVersionEnum
openssl_cipher_string_supported,str
client_auth_requirement,ClientAuthenticationServerConfigurationEnum
get_preconfigured_ssl_connection,"Callable[[_, Union[OpenSslVersionEnum, None], Union[str, None], Union[bool, None]],SslConnection]"
__str__,"Callable[[_],str]"
sigint_handler,"Callable[[int, Any],None]"
signum,int
frame,Any
main,"Callable[[],None]"
result_dict,"Dict[Text, List[PluginScanResult]]"
__init__,"Callable[[_, str, str, OpenSslFileTypeEnum, str],None]"
client_certificate_chain_path,str
client_key_path,str
client_key_type,OpenSslFileTypeEnum
client_key_password,str
__str__,"Callable[[_],str]"
__init__,"Callable[[_, str, int, Union[str, None], Union[str, None]],None]"
hostname,str
port,int
__str__,"Callable[[_],str]"
from_url,"Callable[[_, str],HttpConnectTunnelingSettings]"
proxy_url,str
__init__,"Callable[[_, ServerConnectivityInfo, PluginScanCommand, Exception],None]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
exception,Exception
as_xml,"Callable[[_],Element]"
__init__,"Callable[[_, int, int, int, int],None]"
network_retries,int
network_timeout,int
max_processes_nb,int
max_processes_per_hostname_nb,int
self._processes_dict,"Dict[str, List[WorkerProcess]]"
self._task_queue,JoinableQueue
self._result_queue,JoinableQueue
queue_scan_command,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],None]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
_check_and_create_process,"Callable[[_, str],None]"
hostname,str
hostname_queue,JoinableQueue
_get_current_processes_nb,"Callable[[_],int]"
emergency_shutdown,"Callable[[_],None]"
__init__,"Callable[[_, ServerConnectivityTester, str],None]"
server_info,ServerConnectivityTester
error_message,str
__str__,"Callable[[_],str]"
__str__,"Callable[[_],str]"
__init__,"Callable[[_, str, Union[int, None], Union[str, None], TlsWrappedProtocolEnum, Union[str, None], Union[str, None], Union[ClientAuthenticationCredentials, None], Union[HttpConnectTunnelingSettings, None]],None]"
hostname,str
tls_wrapped_protocol,TlsWrappedProtocolEnum
_do_dns_lookup,"Callable[[_, str, int],str]"
hostname,str
port,int
perform,"Callable[[_, Union[int, None]],ServerConnectivityInfo]"
__init__,"Callable[[_, List[ServerConnectivityTester]],None]"
start_connectivity_testing,"Callable[[_, int, Union[int, None]],None]"
max_threads,int
__init__,"Callable[[_, Union[str, None]],None]"
get_title,"Callable[[_],str]"
get_cli_argument,"Callable[[_],str]"
__init__,"Callable[[_, TrustStore, str],None]"
trust_store,TrustStore
verify_string,str
__init__,"Callable[[_, TrustStore, Exception],None]"
trust_store,TrustStore
exception,Exception
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
get_cli_option_group,"Callable[[_],List[optparse.Option]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],CertificateInfoScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
_get_and_verify_certificate_chain,"Callable[[ServerConnectivityInfo, TrustStore],Tuple[List[Certificate], str, Union[OcspResponse, None]]]"
server_info,ServerConnectivityInfo
trust_store,TrustStore
__init__,"Callable[[_, ServerConnectivityInfo, CertificateInfoScanCommand, List[Certificate], List[PathValidationResult], List[PathValidationError], OcspResponse],None]"
server_info,ServerConnectivityInfo
scan_command,CertificateInfoScanCommand
ocsp_response,OcspResponse
sort_function,"Callable[[PathValidationResult],str]"
path_validation,PathValidationResult
__setstate__,"Callable[[_, Dict[str, Any]],None]"
as_xml,"Callable[[_],Element]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],EarlyDataScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
__init__,"Callable[[_, ServerConnectivityInfo, EarlyDataScanCommand, bool],None]"
server_info,ServerConnectivityInfo
scan_command,EarlyDataScanCommand
is_early_data_supported,bool
as_xml,"Callable[[_],Element]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
is_aggressive,"Callable[[_],bool]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],Union[SessionResumptionRateScanResult, SessionResumptionSupportScanResult]]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
_test_session_resumption_rate,"Callable[[_, ServerConnectivityInfo, int],Tuple[int, List[str]]]"
server_info,ServerConnectivityInfo
resumption_attempts_nb,int
_resume_with_session_id,"Callable[[_, ServerConnectivityInfo],bool]"
server_info,ServerConnectivityInfo
_resume_with_session_ticket,"Callable[[_, ServerConnectivityInfo],TslSessionTicketSupportEnum]"
server_info,ServerConnectivityInfo
_extract_session_id,"Callable[[nassl._nassl.SSL_SESSION],str]"
ssl_session,nassl._nassl.SSL_SESSION
_extract_tls_session_ticket,"Callable[[nassl._nassl.SSL_SESSION],str]"
ssl_session,nassl._nassl.SSL_SESSION
_resume_ssl_session,"Callable[[ServerConnectivityInfo, Union[nassl._nassl.SSL_SESSION, None], bool],nassl._nassl.SSL_SESSION]"
server_info,ServerConnectivityInfo
ssl_session,"Union[nassl._nassl.SSL_SESSION, None]"
should_enable_tls_ticket,bool
__init__,"Callable[[_, ServerConnectivityInfo, SessionResumptionRateScanCommand, int, int, List[str]],None]"
server_info,ServerConnectivityInfo
scan_command,SessionResumptionRateScanCommand
attempted_resum_nb,int
successful_resum_nb,int
as_xml,"Callable[[_],Element]"
__init__,"Callable[[_, ServerConnectivityInfo, SessionResumptionSupportScanCommand, int, int, List[str], int, Union[str, None], Union[Exception, None]],None]"
server_info,ServerConnectivityInfo
scan_command,SessionResumptionSupportScanCommand
attempted_resum_nb,int
successful_resum_nb,int
is_ticket_resumption_supported,int
as_xml,"Callable[[_],Element]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],FallbackScsvScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
__init__,"Callable[[_, ServerConnectivityInfo, FallbackScsvScanCommand, bool],None]"
server_info,ServerConnectivityInfo
scan_command,FallbackScsvScanCommand
supports_fallback_scsv,bool
as_xml,"Callable[[_],Element]"
__init__,"Callable[[_],None]"
get_title,"Callable[[_],str]"
get_description,"Callable[[_],str]"
get_cli_argument,"Callable[[_],str]"
is_aggressive,"Callable[[_],bool]"
get_title,"Callable[[_],str]"
get_description,"Callable[[_],str]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
get_cli_option_group,"Callable[[_],List[optparse.Option]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],PluginScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
__init__,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],None]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
as_xml,"Callable[[_],Element]"
_format_title,"Callable[[str],str]"
title,str
_format_subtitle,"Callable[[str],str]"
subtitle,str
_format_field,"Callable[[str, str],str]"
title,str
value,str
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
is_aggressive,"Callable[[_],bool]"
get_client_key_exchange_record,"Callable[[_, RobotPmsPaddingPayloadEnum, TlsVersionEnum, int, int],TlsRsaClientKeyExchangeRecord]"
robot_payload_enum,RobotPmsPaddingPayloadEnum
tls_version,TlsVersionEnum
modulus,int
exponent,int
_compute_pms_padding,"Callable[[int],str]"
modulus,int
get_finished_record_bytes,"Callable[[_, TlsVersionEnum],bytes]"
tls_version,TlsVersionEnum
__init__,"Callable[[_, Dict[RobotPmsPaddingPayloadEnum, List[str]]],None]"
payload_responses,"Dict[RobotPmsPaddingPayloadEnum, List[str]]"
compute_result_enum,"Callable[[_],RobotScanResultEnum]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],RobotScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
_run_oracle_over_threads,"Callable[[_, ServerConnectivityInfo, str, int, int, bool],RobotScanResultEnum]"
server_info,ServerConnectivityInfo
cipher_string,str
rsa_modulus,int
rsa_exponent,int
should_complete_handshake,bool
payload_responses,"Dict[RobotPmsPaddingPayloadEnum, List[str]]"
_get_rsa_parameters,"Callable[[ServerConnectivityInfo, str],Union[Tuple[int, int], None]]"
server_info,ServerConnectivityInfo
openssl_cipher_string,str
_send_robot_payload,"Callable[[ServerConnectivityInfo, str, RobotPmsPaddingPayloadEnum, bool, int, int],Tuple[RobotPmsPaddingPayloadEnum, str]]"
server_info,ServerConnectivityInfo
rsa_cipher_string,str
robot_payload_enum,RobotPmsPaddingPayloadEnum
robot_should_finish_handshake,bool
rsa_modulus,int
rsa_exponent,int
__init__,"Callable[[_, str],None]"
server_response,str
__init__,"Callable[[_, ServerConnectivityInfo, RobotScanCommand, RobotScanResultEnum],None]"
server_info,ServerConnectivityInfo
scan_command,RobotScanCommand
robot_result_enum,RobotScanResultEnum
as_xml,"Callable[[_],Element]"
__init__,"Callable[[_, List[Type[Plugin]]],None]"
plugin_classes,List[Type[Plugin]]
scan_command_classes_to_plugin_classes,"Dict[Type[PluginScanCommand], Type[Plugin]]"
get_plugin_class_for_command,"Callable[[_, PluginScanCommand],Type[Plugin]]"
scan_command,PluginScanCommand
get_available_commands,"Callable[[_],Set[Type[PluginScanCommand]]]"
get_available_plugins,"Callable[[_],Set[Type[Plugin]]]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],HttpHeadersScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
_get_security_headers,"Callable[[_, ServerConnectivityInfo],Tuple[Union[str, None], Union[str, None], Union[str, None], bool, List[Certificate]]]"
server_info,ServerConnectivityInfo
__init__,"Callable[[_, str],None]"
raw_hsts_header,str
__init__,"Callable[[_, str, bool],None]"
raw_hpkp_header,str
report_only,bool
__init__,"Callable[[_, str],None]"
raw_expect_ct_header,str
__init__,"Callable[[_, ServerConnectivityInfo, HttpHeadersScanCommand, Union[str, None], Union[str, None], Union[str, None], bool, List[Certificate]],None]"
server_info,ServerConnectivityInfo
scan_command,HttpHeadersScanCommand
hpkp_report_only,bool
__setstate__,"Callable[[_, Dict[str, Any]],None]"
as_xml,"Callable[[_],Element]"
__init__,"Callable[[_, bool, bool],None]"
http_get,bool
hide_rejected_ciphers,bool
is_aggressive,"Callable[[_],bool]"
get_title,"Callable[[_],str]"
get_cli_argument,"Callable[[_],str]"
is_aggressive,"Callable[[_],bool]"
get_cli_argument,"Callable[[_],str]"
get_cli_argument,"Callable[[_],str]"
get_cli_argument,"Callable[[_],str]"
get_cli_argument,"Callable[[_],str]"
get_cli_argument,"Callable[[_],str]"
SSL_VERSIONS_MAPPING,"Dict[Type[CipherSuiteScanCommand], OpenSslVersionEnum]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
get_cli_option_group,"Callable[[_],List[optparse.Option]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],CipherSuiteScanResult]"
server_connectivity_info,ServerConnectivityInfo
scan_command,PluginScanCommand
_test_cipher_suite,"Callable[[ServerConnectivityInfo, OpenSslVersionEnum, str],CipherSuite]"
server_connectivity_info,ServerConnectivityInfo
ssl_version,OpenSslVersionEnum
openssl_cipher_name,str
cipher_result,CipherSuite
_get_preferred_cipher_suite,"Callable[[_, ServerConnectivityInfo, OpenSslVersionEnum, List[AcceptedCipherSuite]],Union[AcceptedCipherSuite, None]]"
server_connectivity_info,ServerConnectivityInfo
ssl_version,OpenSslVersionEnum
_get_selected_cipher_suite,"Callable[[ServerConnectivityInfo, OpenSslVersionEnum, str, Union[bool, None]],AcceptedCipherSuite]"
server_connectivity,ServerConnectivityInfo
ssl_version,OpenSslVersionEnum
openssl_cipher_str,str
__init__,"Callable[[_, str, OpenSslVersionEnum],None]"
openssl_name,str
ssl_version,OpenSslVersionEnum
name,"Callable[[_],str]"
__init__,"Callable[[_, str, OpenSslVersionEnum, Union[int, None], Union[str, None]],None]"
openssl_name,str
ssl_version,OpenSslVersionEnum
from_ongoing_ssl_connection,"Callable[[_, SslConnection, OpenSslVersionEnum],AcceptedCipherSuite]"
ssl_connection,SslConnection
ssl_version,OpenSslVersionEnum
__init__,"Callable[[_, str, OpenSslVersionEnum, str],None]"
openssl_name,str
ssl_version,OpenSslVersionEnum
handshake_error_message,str
__init__,"Callable[[_, str, OpenSslVersionEnum, Exception],None]"
openssl_name,str
ssl_version,OpenSslVersionEnum
exception,Exception
__init__,"Callable[[_, ServerConnectivityInfo, CipherSuiteScanCommand, Union[AcceptedCipherSuite, None], List[AcceptedCipherSuite], List[RejectedCipherSuite], List[ErroredCipherSuite]],None]"
server_info,ServerConnectivityInfo
scan_command,CipherSuiteScanCommand
as_xml,"Callable[[_],Element]"
_format_accepted_cipher_xml,"Callable[[AcceptedCipherSuite],Element]"
cipher,AcceptedCipherSuite
_format_accepted_cipher_txt,"Callable[[_, AcceptedCipherSuite],str]"
cipher,AcceptedCipherSuite
OPENSSL_TO_RFC_NAMES_MAPPING,"Dict[OpenSslVersionEnum, Dict[str, str]]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],SessionRenegotiationScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
_test_secure_renegotiation,"Callable[[ServerConnectivityInfo],bool]"
server_info,ServerConnectivityInfo
_test_client_renegotiation,"Callable[[ServerConnectivityInfo],bool]"
server_info,ServerConnectivityInfo
__init__,"Callable[[_, ServerConnectivityInfo, SessionRenegotiationScanCommand, bool, bool],None]"
server_info,ServerConnectivityInfo
scan_command,SessionRenegotiationScanCommand
accepts_client_renegotiation,bool
supports_secure_renegotiation,bool
as_xml,"Callable[[_],Element]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],HeartbleedScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
__init__,"Callable[[_, ServerConnectivityInfo, HeartbleedScanCommand, bool],None]"
server_info,ServerConnectivityInfo
scan_command,HeartbleedScanCommand
is_vulnerable_to_heartbleed,bool
as_xml,"Callable[[_],Element]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, PluginScanCommand],CompressionScanResult]"
server_info,ServerConnectivityInfo
scan_command,PluginScanCommand
__init__,"Callable[[_, ServerConnectivityInfo, CompressionScanCommand, str],None]"
server_info,ServerConnectivityInfo
scan_command,CompressionScanCommand
compression_name,str
as_xml,"Callable[[_],Element]"
get_cli_argument,"Callable[[_],str]"
get_title,"Callable[[_],str]"
get_available_commands,"Callable[[_],List[Type[PluginScanCommand]]]"
process_task,"Callable[[_, ServerConnectivityInfo, plugin_base.PluginScanCommand],OpenSslCcsInjectionScanResult]"
server_info,ServerConnectivityInfo
__init__,"Callable[[_, ServerConnectivityInfo, OpenSslCcsInjectionScanCommand, bool],None]"
server_info,ServerConnectivityInfo
scan_command,OpenSslCcsInjectionScanCommand
is_vulnerable_to_ccs_injection,bool
as_xml,"Callable[[_],Element]"
get_common_names,"Callable[[cryptography.x509.Name],List[str]]"
name_field,cryptography.x509.Name
get_dns_subject_alternative_names,"Callable[[cryptography.x509.Certificate],List[str]]"
certificate,cryptography.x509.Certificate
matches_hostname,"Callable[[_, cryptography.x509.Certificate, str],None]"
certificate,cryptography.x509.Certificate
hostname,str
get_name_as_short_text,"Callable[[_, cryptography.x509.Name],str]"
name_field,cryptography.x509.Name
get_name_as_text,"Callable[[_, cryptography.x509.Name],str]"
name_field,cryptography.x509.Name
get_public_key_sha256,"Callable[[cryptography.x509.Certificate],bytes]"
certificate,cryptography.x509.Certificate
get_hpkp_pin,"Callable[[_, cryptography.x509.Certificate],str]"
certificate,cryptography.x509.Certificate
get_public_key_type,"Callable[[cryptography.x509.Certificate],str]"
certificate,cryptography.x509.Certificate
has_ocsp_must_staple_extension,"Callable[[cryptography.x509.Certificate],bool]"
certificate,cryptography.x509.Certificate
count_scts_in_sct_extension,"Callable[[cryptography.x509.Certificate],Union[int, None]]"
certificate,cryptography.x509.Certificate
__init__,"Callable[[_, str, str, str, Union[List[str], None]],None]"
path,str
name,str
version,str
ev_oids,"Union[List[str], None]"
__eq__,"Callable[[_, object],bool]"
other,object
__parse_ev_oids,"Callable[[_],None]"
__setstate__,"Callable[[_, Dict[str, Any]],None]"
is_extended_validation,"Callable[[_, Certificate],bool]"
certificate,Certificate
_compute_subject_certificate_dict,"Callable[[str],Dict[Name, Certificate]]"
path,str
_get_certificate_with_subject,"Callable[[_, Name],Union[Certificate, None]]"
certificate_subject,Name
_is_certificate_chain_order_valid,"Callable[[List[Certificate]],bool]"
_get_script_dir,"Callable[[bool],str]"
follow_symlinks,bool
__init__,"Callable[[_, str],None]"
repository_path,str
_parse_trust_stores_in_folder,"Callable[[str],List[Tuple[str, str, str]]]"
path,str
get_main_store,"Callable[[_],TrustStore]"
get_default,"Callable[[_],TrustStoresRepository]"
update_default,"Callable[[_],TrustStoresRepository]"
__init__,"Callable[[_, ServerConnectivityInfo, List[PluginScanResult]],None]"
server_info,ServerConnectivityInfo
__init__,"Callable[[_, TextIO],None]"
file_to,TextIO
close,"Callable[[_],None]"
command_line_parsed,"Callable[[_, Set[Type[Plugin]], Any, List[ServerStringParsingError]],None]"
available_plugins,Set[Type[Plugin]]
args_command_list,Any
server_connectivity_test_failed,"Callable[[_, ServerConnectivityError],None]"
connectivity_error,ServerConnectivityError
server_connectivity_test_succeeded,"Callable[[_, ServerConnectivityInfo],None]"
server_connectivity_info,ServerConnectivityInfo
scans_started,"Callable[[_],None]"
server_scan_completed,"Callable[[_, CompletedServerScan],None]"
server_scan_result,CompletedServerScan
scans_completed,"Callable[[_, float],None]"
total_scan_time,float
_format_title,"Callable[[_, str],str]"
title,str
command_line_parsed,"Callable[[_, Set[Type[Plugin]], Any, List[ServerStringParsingError]],None]"
available_plugins,Set[Type[Plugin]]
args_command_list,Any
server_connectivity_test_failed,"Callable[[_, ServerConnectivityError],None]"
connectivity_error,ServerConnectivityError
server_connectivity_test_succeeded,"Callable[[_, ServerConnectivityInfo],None]"
server_connectivity_info,ServerConnectivityInfo
scans_started,"Callable[[_],None]"
server_scan_completed,"Callable[[_, CompletedServerScan],None]"
server_scan,CompletedServerScan
scans_completed,"Callable[[_, float],None]"
total_scan_time,float
__init__,"Callable[[_],None]"
command_line_parsed,"Callable[[_, Set[Type[Plugin]], Any, List[ServerStringParsingError]],None]"
available_plugins,Set[Type[Plugin]]
args_command_list,Any
server_connectivity_test_failed,"Callable[[_, ServerConnectivityError],None]"
connectivity_error,ServerConnectivityError
server_connectivity_test_succeeded,"Callable[[_, ServerConnectivityInfo],None]"
server_connectivity_info,ServerConnectivityInfo
scans_started,"Callable[[_],None]"
server_scan_completed,"Callable[[_, CompletedServerScan],None]"
server_scan_result,CompletedServerScan
scans_completed,"Callable[[_, float],None]"
total_scan_time,float
__init__,"Callable[[_, TextIO],None]"
file_to,TextIO
command_line_parsed,"Callable[[_, Set[Type[Plugin]], Any, List[ServerStringParsingError]],None]"
available_plugins,Set[Type[Plugin]]
args_command_list,Any
server_connectivity_test_succeeded,"Callable[[_, ServerConnectivityInfo],None]"
server_connectivity_info,ServerConnectivityInfo
server_connectivity_test_failed,"Callable[[_, ServerConnectivityError],None]"
connectivity_error,ServerConnectivityError
scans_started,"Callable[[_],None]"
server_scan_completed,"Callable[[_, CompletedServerScan],None]"
server_scan_result,CompletedServerScan
scans_completed,"Callable[[_, float],None]"
total_scan_time,float
get_error_msg,"Callable[[_],str]"
get_error_msg,"Callable[[_],str]"
__init__,"Callable[[_, str, str],None]"
supplied_server_string,str
error_message,str
parse_server_string,"Callable[[_, str],Tuple[str, Union[str, None], Union[int, None]]]"
server_str,str
_parse_ipv4_server_string,"Callable[[_, str],Tuple[str, Union[int, None]]]"
server_str,str
_parse_ipv6_server_string,"Callable[[_, str],Tuple[str, Union[int, None]]]"
server_str,str
__init__,"Callable[[_, Set[Type[Plugin]], str],None]"
available_plugins,Set[Type[Plugin]]
sslyze_version,str
parse_command_line,"Callable[[_],Tuple[List[ServerConnectivityTester], List[ServerStringParsingError], Any]]"
_add_default_options,"Callable[[_],None]"
_add_plugin_options,"Callable[[_, Set[Type[Plugin]]],None]"
available_plugins,Set[Type[Plugin]]
__init__,"Callable[[_, TextIO],None]"
file_to,TextIO
command_line_parsed,"Callable[[_, Set[Type[Plugin]], Any, List[ServerStringParsingError]],None]"
available_plugins,Set[Type[Plugin]]
args_command_list,Any
server_connectivity_test_failed,"Callable[[_, ServerConnectivityError],None]"
connectivity_error,ServerConnectivityError
server_connectivity_test_succeeded,"Callable[[_, ServerConnectivityInfo],None]"
server_connectivity_info,ServerConnectivityInfo
scans_started,"Callable[[_],None]"
server_scan_completed,"Callable[[_, CompletedServerScan],None]"
server_scan_result,CompletedServerScan
dict_command_result,"Dict[str, Dict[str, Any]]"
scans_completed,"Callable[[_, float],None]"
total_scan_time,float
_object_to_json_dict,"Callable[[Any],Union[bool, int, float, str, Dict[str, Any]]]"
obj,Any
__init__,"Callable[[_, JoinableQueue, JoinableQueue, JoinableQueue, int, int],None]"
priority_queue_in,JoinableQueue
queue_in,JoinableQueue
queue_out,JoinableQueue
network_retries,int
network_timeout,int
run,"Callable[[_],None]"
__init__,"Callable[[_, str],None]"
server_hostname,str
prepare_socket_for_tls_handshake,"Callable[[_, socket.socket],None]"
send_request,"Callable[[_, SslClient],str]"
ssl_client,SslClient
__init__,"Callable[[_, str],None]"
server_hostname,str
prepare_socket_for_tls_handshake,"Callable[[_, socket.socket],None]"
send_request,"Callable[[_, SslClient],str]"
ssl_client,SslClient
__init__,"Callable[[_, str],None]"
server_hostname,str
prepare_socket_for_tls_handshake,"Callable[[_, socket.socket],None]"
send_request,"Callable[[_, SslClient],str]"
ssl_client,SslClient
__init__,"Callable[[_, str],None]"
server_hostname,str
prepare_socket_for_tls_handshake,"Callable[[_, socket.socket],None]"
send_request,"Callable[[_, SslClient],str]"
ssl_client,SslClient
__init__,"Callable[[_, str],None]"
server_hostname,str
override_xmpp_to,"Callable[[_, str],None]"
xmpp_to,str
prepare_socket_for_tls_handshake,"Callable[[_, socket.socket],None]"
send_request,"Callable[[_, SslClient],str]"
ssl_client,SslClient
__init__,"Callable[[_, str],None]"
server_hostname,str
prepare_socket_for_tls_handshake,"Callable[[_, socket.socket],None]"
send_request,"Callable[[_, SslClient],str]"
ssl_client,SslClient
__init__,"Callable[[_, str],None]"
server_hostname,str
prepare_socket_for_tls_handshake,"Callable[[_, socket.socket],None]"
send_request,"Callable[[_, SslClient],str]"
ssl_client,SslClient
__init__,"Callable[[_, str],None]"
server_hostname,str
prepare_socket_for_tls_handshake,"Callable[[_, socket.socket],None]"
send_request,"Callable[[_, SslClient],str]"
ssl_client,SslClient
connect_socket,"Callable[[_, socket.socket],None]"
__init__,"Callable[[_, str, int],None]"
server_ip_addr,str
server_port,int
connect_socket,"Callable[[_, socket.socket],None]"
__init__,"Callable[[_, str, int, HttpConnectTunnelingSettings],None]"
server_host,str
server_port,int
tunnel_settings,HttpConnectTunnelingSettings
connect_socket,"Callable[[_, socket.socket],None]"
parse_from_socket,"Callable[[_, socket],HTTPResponse]"
sock,socket
parse_from_ssl_connection,"Callable[[_, SslClient],HTTPResponse]"
ssl_conn,SslClient
_parse,"Callable[[Callable],HTTPResponse]"
read_method,Callable
__init__,"Callable[[_],None]"
self._job_q,Queue
self._result_q,Queue
self._error_q,Queue
self._thread_list,List[threading.Thread]
add_job,"Callable[[_, JobType],None]"
job,JobType
get_error,"Callable[[_],Iterable[Tuple[JobType, Exception]]]"
get_result,"Callable[[_],Iterable[Tuple[JobType, Any]]]"
start,"Callable[[_, int],None]"
nb_threads,int
join,"Callable[[_],None]"
_work_function,"Callable[[Queue, Queue, Queue],None]"
job_q,Queue
result_q,Queue
error_q,Queue
requires_legacy_openssl,"Callable[[_, str],bool]"
openssl_cipher_name,str
get_request,"Callable[[_, str, str],bytes]"
host,str
user_agent,str
get_connection,"Callable[[_, OpenSslVersionEnum, Union[ServerConnectivityInfo, ServerConnectivityTester], bool, Union[str, None], Union[str, None], Union[bool, None]],SslConnection]"
ssl_version,OpenSslVersionEnum
should_ignore_client_auth,bool
connection_helper,ConnectionHelper
set_global_network_settings,"Callable[[_, int, int],None]"
network_max_retries,int
network_timeout,int
__init__,"Callable[[_, ConnectionHelper, TlsWrappedProtocolHelper, SslClient],None]"
socket_helper,ConnectionHelper
start_tls_helper,TlsWrappedProtocolHelper
ssl_client,SslClient
do_pre_handshake,"Callable[[_, Union[int, None]],None]"
connect,"Callable[[_, Union[int, None], Union[int, None]],None]"
close,"Callable[[_],None]"
post_handshake_check,"Callable[[_],str]"
future,concurrent.futures.Future
watcher,FutureWatcher
cancelled,bool
results,List[List[Results]]
__init__,"Callable[[_, fastTSNE.TSNEEmbedding, Table, Domain],_]"
table,Table
pre_domain,Domain
__call__,"Callable[[_, Table],Table]"
data,Table
__call__,"Callable[[_, Table],TSNEModel]"
data,Table
splitter,QSplitter
self.data,"Union[Orange.data.Table, None]"
self._matrix,"Union[Orange.misc.DistMatrix, None]"
self._mask,"Union[np.ndarray, None]"
self._labels,"Union[np.ndarray, None]"
self._silhouette,"Union[np.ndarray, None]"
palette,QPalette
self.ui_depth_slider,QSlider
self.ui_zoom_slider,QSlider
move_to_sum,"Callable[[_, float],_]"
invisible_sum,float
self.widget,OWPythagorasTree
self.widget,OWNomogram
self.widget,OWLinearProjection
self.widget,OWPythagoreanForest
widget_min_zoom,OWPythagoreanForest
widget_max_zoom,OWPythagoreanForest
self.widget,OWSilhouettePlot
self.widget,OWHeatMap
process_events,"Callable[[_, callable, _],_]"
until,callable
widget,OWBaseLearner
curves,"List[Tuple[int, plot_curves]]"
results,Results
future,Future
cancelled,bool
func,"Callable[Callable[float], Results]"
self.data,"Union[Orange.data.Table, None]"
self.class_var,"Union[Orange.data.Variable, None]"
self.widget,OWCalibrationPlot
self.widget,OWTestLearners
self.widget,OWLiftCurve
self.widget,OWROCAnalysis
self.widget,OWPredictions
watcher,FutureSetWatcher
axis,int
metric_idx,int
normalized_dist,bool
autocommit,bool
self.graph,"Union[nx.Graph, None]"
self.partition,"Union[np.array, None]"
self.apply_pca_cbx,QCheckBox
self.pca_components_slider,QSlider
self.resolution_spin,QSlider
self.apply_button,QWidget
graph,"Union[nx.Graph, None]"
partition,"Union[np.ndarray, None]"
state,TaskState
state,TaskState
mouseAreaShape,QPainterPath
sourcePath,QPainterPath
sourceAreaShape,QPainterPath
path,QPainterPath
self._items,"Dict[Tree, DendrogramWidget.ClusterGraphicsItem]"
selected,Set[Tuple[int]]
node,Tree
self.widget,OWPCA
self.widget,OWKMeans
self.widget,OWMDS
self.widget,OWManifoldLearning
__report_view,"Union[Callable[[],OWReport], None]"
wait,"Callable[[callable, _],_]"
until,callable
self.__openExternalLinks,bool
palette,QPalette
sort,"Callable[[_, int, Qt.SortOrder],_]"
column,int
palette,QPalette
rect,QRect
style,QStyle
popuprect_origin,QRect
editrect,QRect
screenrect,QRect
window,QWidget
event,QKeyEvent
event,QMouseEvent
event,QMouseEvent
style,QStyle
popup,QListView
popup,QListView
popup,QListView
popup,QListView
popup,QListView
METHODS,"Dict[Method, Type[impute.BaseImputeMethod]]"
_default_method_index,int
_variable_imputation_state,VariableState
self.data,"Union[Orange.data.Table, None]"
self._variable_imputation_state,VariableState
state,VariableState
mapping,CategoriesMappingType
index,QModelIndex
self.data,"Union[Orange.data.Table, None]"
src,Variable
dst,Variable
auto_commit,bool
splitter_state,bytes
header_state,bytes
variables,list
self.widget,OWPaintData
w,OWDataSets
w,OWDataSets
w,OWDataSets
w,OWDataSets
w,OWDataSets
self.widget,OWFile
self.widget,OWImpute
self.widget,OWDataSampler
self.widget,OWRank
self.widget,OWSave
self.widget,OWSelectRows
select_rows,"Callable[[List[int], OWFeatureStatistics],_]"
widget,OWFeatureStatistics
menu,QMenu
workflow,Scheme
menu,QMenu
name,str
node_id,str
replacements_channels,"Dict[str, Tuple[dict, dict]]"
desc,WidgetDescription
idesc,InputSignal
repl_qname,str
odesc,OutputSignal
repl_qname,str
desc,_scheme
g,_window_group
node,SchemeNode
link,SchemeLink
dump_settings,"Callable[[_, SchemeNode],_]"
node,SchemeNode
name,str
default,bool
state,"List[Tuple[SchemeNode, bytes]]"
w,OWWidget
window,QWidget
dump_settings,"Callable[[_, SchemeNode],_]"
node,SchemeNode
workflow,WidgetsScheme
node,SchemeNode
workflow,WidgetsScheme
workflow,WidgetsScheme
dsize,QSize
wheelEvent,"Callable[[_, QWheelEvent],_]"
event,QWheelEvent
widget,OWWidget
logview,OutputView
doc,QTextDocument
title,str
path,str
modelitem,QStandardItem
item,Item
subscriptions,Dict
SKIPLOG,Set
global_defaults,Dict
dgroups_app_rules,List
defaults,"List[Tuple[str, Any, str]]"
filenames,Dict
filenames,Dict
defaults,"List[Tuple[str, Any, str]]"
defaults,"List[Tuple[str, Any, str]]"
defaults,"List[Tuple[str, Any, str]]"
defaults,"List[Tuple[str, Any, str]]"
defaults,"List[Tuple[str, Any, str]]"
defaults,"List[Tuple[str, Any, str]]"
defaults,"List[Tuple[str, Any, str]]"
defaults,"List[Tuple[str, Any, str]]"
installed_extensions,List
defaults,"List[Tuple[str, Any, str]]"
prange_regression,"Callable[[cython.int, list],_]"
data,list
test_struct,"Callable[[cython.int, cython.double],MyStruct2]"
func,"Callable[[dict, cython.int],tuple]"
foo,dict
a,float
b,int
c,long
merge,"Callable[[str, Sequence[str], bool],None]"
output_file_path,str
append_linesep,bool
test_merge,"Callable[[_, int, bool],_]"
merged_file_count,int
append_linesep,bool
is_open_for_signup,"Callable[[_, HttpRequest],_]"
request,HttpRequest
is_open_for_signup,"Callable[[_, HttpRequest, Any],_]"
request,HttpRequest
sociallogin,Any
password,"Callable[[_, bool, Sequence[Any]],_]"
create,bool
annotated_func,"Callable[[int, int],_]"
a,int
b,int
c,int
d,int
__init__,"Callable[[_, int],_]"
arg,int
unknown_annotated_func,"Callable[[UnknownType, _],_]"
a,UnknownType
c,UnknownType
test_can_use_type_hints,"Callable[[int, float],_]"
a,int
b,float
inner,"Callable[[UnknownType],_]"
a,UnknownType
__init__,"Callable[[_, int, int],_]"
a,int
b,int
method,"Callable[[_, int, int],_]"
a,int
b,int
test_has_an_annotation,"Callable[[int],_]"
i,int
has_annotation,"Callable[[int],None]"
a,int
pointless_composite,"Callable[[None, bool, list],int]"
draw,None
strat,bool
nothing,list
return_annot,"Callable[[],int]"
first_annot,"Callable[[None],_]"
draw,None
f,"Callable[[_],list]"
f,"Callable[[int],_]"
x,int
x,str
x,float
f,"Callable[[_],list]"
f,"Callable[[],int]"
_docker_conflict,"Callable[[Exception],_]"
e,Exception
pytest_addoption,"Callable[[_pytest.config.Parser],None]"
parser,_pytest.config.Parser
pytest_collection_modifyitems,"Callable[[_pytest.config.Config, List[_pytest.main.Item]],None]"
config,_pytest.config.Config
items,List[_pytest.main.Item]
set_active_environment,"Callable[[bool, str, str, str],str]"
mainnet,bool
net,str
concent,str
datadir,str
lock_datadir,"Callable[[Callable],Callable]"
func,Callable
log_concent_choice,"Callable[[dict],_]"
value,dict
generate_rpc_certificate,"Callable[[str],_]"
datadir,str
check_golem_running,"Callable[[str, bool],_]"
datadir,str
cli_in_mainnet,bool
is_app_running,"Callable[[str, str],bool]"
root_dir,str
net_name,str
__init__,"Callable[[_],None]"
check_support,"Callable[[_],SupportStatus]"
get_container_config,"Callable[[_],Dict]"
__init__,"Callable[[_, _, _, _],None]"
self.verifier,Any
start,"Callable[[_, _],Deferred]"
__init__,"Callable[[_, float, float, float, float],None]"
left,float
top,float
right,float
bottom,float
__init__,"Callable[[_, int, int, int, int],None]"
left,int
top,int
right,int
bottom,int
__init__,"Callable[[_, Region, Tuple[int, int]],None]"
region,Region
calculate_pixels,"Callable[[Region, int, int],PixelRegion]"
region,Region
width,int
height,int
__calculate_crop_side_length,"Callable[[int],int]"
subtask_side_length,int
create_from_region,"Callable[[str, Region, SubImage, str],_]"
crop_id,str
crop_region,Region
subimage,SubImage
crops_path,str
create_from_pixel_region,"Callable[[str, PixelRegion, SubImage, str],_]"
crop_id,str
pixel_region,PixelRegion
subimage,SubImage
crops_path,str
__init__,"Callable[[_, str, SubImage, str],None]"
crop_id,str
subimage,SubImage
crops_path,str
__init__,"Callable[[_, List[Crop], _, Dict[str, Any], _],None]"
get_crop_path,"Callable[[_, str],Union[str, None]]"
crop_id,str
get_crop_with_id,"Callable[[_, str],Union[Crop, None]]"
crop_id,str
__init__,"Callable[[_, Union[ComputerAdapter, None]],None]"
self.rendered_crops_results,"Dict[int, List[Any]]"
generate_crops_data,"Callable[[_, Tuple[int, int], List[float], int, str],_]"
crops_number,int
crops_path,str
generate_single_random_crop_data,"Callable[[SubImage, Tuple[int, int], str, str],Crop]"
subimage,SubImage
crop_id,str
crops_path,str
_get_random_interval_within_boundaries,"Callable[[int, int, int],Tuple[int, int]]"
begin,int
end,int
interval_length,int
render_crops,"Callable[[_, List[str], Dict[str, Any], int],List[Deferred]]"
num_crops,int
start,"Callable[[_, VerificationContext, int],Generator]"
verification_context,VerificationContext
crop_count,int
success,"Callable[[List[str], float],_]"
time_spent,float
generate_computational_task_definition,"Callable[[Dict[str, Any], str],Dict[str, Any]]"
script_src,str
__init__,"Callable[[_, int],None]"
concurrency,int
submit,"Callable[[_, Type[Verifier], str, int, FunctionType],None]"
subtask_id,str
deadline,int
cb,FunctionType
pause,"Callable[[_],Deferred]"
resume,"Callable[[_],None]"
can_run,"Callable[[_],bool]"
_process_queue,"Callable[[_],None]"
_next,"Callable[[_],Tuple[Union[VerificationTask, None], Union[Verifier, None]]]"
_run,"Callable[[_, VerificationTask, Type[Verifier]],None]"
entry,VerificationTask
_reset,"Callable[[_],None]"
SCENE_FILE_NAME,str
SCENE_FILE_NAME,str
for_purpose,"Callable[[_, TaskPurpose],TaskTypeInfo]"
purpose,TaskPurpose
query_extra_data,"Callable[[_, float, int, Union[str, None], Union[str, None]],FrameRenderingTask.ExtraData]"
perf_index,float
num_cores,int
is_supported,"Callable[[],bool]"
get_unified_memory_enabled,"Callable[[],bool]"
_is_supported,"Callable[[],bool]"
_modprobe,"Callable[[bool],bool]"
unified_memory,bool
_assert_driver_version,"Callable[[],None]"
normalization_constant,"Callable[[_],float]"
task_definition,"Callable[[_],TaskDefinition]"
verify_result,"Callable[[_, _],bool]"
__init__,"Callable[[_, Task, _, _, _, CoreBenchmark],None]"
task,Task
benchmark,CoreBenchmark
is_success,"Callable[[_, TaskThread],bool]"
task_thread,TaskThread
computation_success,"Callable[[_, TaskThread],None]"
task_thread,TaskThread
__init__,"Callable[[_, str, Type[TaskDefinition], TaskDefaults, Type[Options], Type[TaskBuilder]],_]"
name,str
defaults,TaskDefaults
__init__,"Callable[[_, TaskDefinition, Node, _, _, _, _],_]"
task_definition,TaskDefinition
owner,Node
create_task_id,"Callable[[bytes],str]"
public_key,bytes
create_subtask_id,"Callable[[_],str]"
initialize,"Callable[[_, DirManager],None]"
dir_manager,DirManager
__init__,"Callable[[_, Node, TaskDefinition, DirManager],None]"
owner,Node
task_definition,TaskDefinition
dir_manager,DirManager
build_minimal_definition,"Callable[[_, CoreTaskTypeInfo, _],_]"
task_type,CoreTaskTypeInfo
build_definition,"Callable[[_, CoreTaskTypeInfo, Dict[str, Any], _],_]"
task_type,CoreTaskTypeInfo
build_full_definition,"Callable[[_, CoreTaskTypeInfo, Dict[str, Any]],_]"
task_type,CoreTaskTypeInfo
build_dictionary,"Callable[[TaskDefinition],dict]"
definition,TaskDefinition
self.concent_enabled,bool
to_dict,"Callable[[_],dict]"
build_output_path,"Callable[[_],str]"
__init__,"Callable[[_, Union[Dict[str, Any], None]],None]"
verification_data,"Union[Dict[str, Any], None]"
set_defaults,"Callable[[_, DummyTaskDefaults],_]"
defaults,DummyTaskDefaults
__init__,"Callable[[_, int, DummyTaskDefinition, _, _],_]"
total_tasks,int
task_definition,DummyTaskDefinition
_extra_data,"Callable[[_, _],ComputeTaskDef]"
query_extra_data,"Callable[[_, float, int, Union[str, None], Union[str, None]],Task.ExtraData]"
perf_index,float
num_cores,int
__get_result_file_name,"Callable[[_, str],str]"
subtask_id,str
query_extra_data_for_test_task,"Callable[[_],ComputeTaskDef]"
build_dictionary,"Callable[[_, DummyTaskDefinition],_]"
definition,DummyTaskDefinition
build_full_definition,"Callable[[_, DummyTaskTypeInfo, _],_]"
task_type,DummyTaskTypeInfo
handle_image_error,"Callable[[Union[logging.Logger, None]],_]"
logger,"Union[logging.Logger, None]"
load_img,"Callable[[str],Union[ImgRepr, None]]"
file_,str
load_as_pil,"Callable[[str],Union[Image.Image, None]]"
file_,str
load_as_PILImgRepr,"Callable[[str],Union[PILImgRepr, None]]"
file_,str
compare_images,"Callable[[_, _],ImgMetrics]"
duration,float
calculate_subtasks_count_with_frames,"Callable[[int, list],int]"
subtasks_count,int
frames,list
est_f,float
calculate_subtasks_count,"Callable[[int, bool, bool, list],int]"
subtasks_count,int
optimize_total,bool
use_frames,bool
frames,list
get_def,"Callable[[int, _],_]"
difficulty,int
random_hex_str,"Callable[[],str]"
test_single_peer,"Callable[[_, MagicMock],_]"
mock_node,MagicMock
test_many_peers,"Callable[[_, MagicMock],_]"
mock_node,MagicMock
test_bad_peer,"Callable[[_, MagicMock],_]"
mock_node,MagicMock
test_peers,"Callable[[_, MagicMock],_]"
mock_node,MagicMock
__init__,"Callable[[_, _],None]"
CSRB_FRONTEND,typing.Optional[cert.CertificateManager.CrossbarUsers]
CSRB_BACKEND,typing.Optional[cert.CertificateManager.CrossbarUsers]
test_json,"Callable[[_],None]"
randaddr,"Callable[[],str]"
dig,"Callable[[],int]"
true_method,"Callable[[],bool]"
__setup_handshake_server_test,"Callable[[_, _],message.base.Hello]"
_mock_get_auth_headers,"Callable[[_, FileTransferToken],_]"
file_transfer_token,FileTransferToken
_init_uploaded_file,"Callable[[_, str],str]"
filename,str
get_mapping,"Callable[[_, int, str],_]"
external_port,int
protocol,str
mock_config,"Callable[[Union[str, None]],Generator]"
_patch_environment,"Callable[[_],Generator]"
_extract_results,"Callable[[_, LocalComputer, str],Path]"
computer,LocalComputer
subtask_id,str
TASK_FILE,PathOrStr
setUp,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
_get_test_task_definition,"Callable[[_],TaskDefinition]"
_get_test_task,"Callable[[_],Task]"
_run_task,"Callable[[_, Task, int],Union[DockerTaskThread, None]]"
task,Task
timeout,int
_copy_file,"Callable[[Path, Path],Path]"
old_path,Path
new_path,Path
constraints,"Callable[[_, Union[str, None]],Dict]"
constrain,"Callable[[_, Union[str, None]],None]"
__init__,"Callable[[_, _],None]"
process,"Callable[[str],mock.Mock]"
name,str
test_unlock_unlocked,"Callable[[_, Mock],_]"
mock_pass,Mock
test_create,"Callable[[_],None]"
test_template,"Callable[[_],None]"
test_show,"Callable[[_, MagicMock],_]"
html2text,MagicMock
msg,message.tasks.WantToComputeTask
msg,message.tasks.WantToComputeTask
_assert_batch_transfer_called_with,"Callable[[_, _, int],None]"
closure_time,int
_make_ets,"Callable[[_, Union[Path, None], bool, str, bool],_]"
withdrawals,bool
password,str
just_create,bool
_create_keysauth,"Callable[[_, _, _, _],KeysAuth]"
key_gen,"Callable[[int],_]"
d,int
test_key_gen_speed,"Callable[[_, int],_]"
d,int
test_properties,"Callable[[_],None]"
test_serialization_as_class,"Callable[[_],None]"
sst,SubtaskState
rct,message.tasks.ReportComputedTask
test_build_definition,"Callable[[_],None]"
__init__,"Callable[[_, _, _],None]"
price,"Callable[[_],int]"
query_extra_data,"Callable[[_, float, int, Union[str, None], Union[str, None]],Task.ExtraData]"
perf_index,float
num_cores,int
params_from_dict,"Callable[[dict],list]"
d,dict
mkdatadir,"Callable[[str],_]"
role,str
gracefully_shutdown,"Callable[[subprocess.Popen, str],_]"
node_type,str
run_golem_node,"Callable[[str],_]"
node_type,str
__init__,"Callable[[_, str, str, int, str, bool],None]"
datadir,str
host,str
port,int
realm,str
ssl,bool
_run_test,"Callable[[_, str],_]"
playbook_class_path,str
run_playbook,"Callable[[NodeTestPlaybook],_]"
playbook_cls,NodeTestPlaybook
provider_node_script,typing.Optional[str]
requestor_node_script,typing.Optional[str]
current_step_name,"Callable[[_],str]"
__init__,"Callable[[_],None]"
get_settings,"Callable[[str],_]"
key,str
dump_balance,"Callable[[SmartContractsInterface],_]"
sci,SmartContractsInterface
send_to_concent,"Callable[[_, Message, _],_]"
msg,Message
retry_until_timeout,"Callable[[_, typing.Callable, str, typing.Optional[datetime.timedelta], typing.Optional[float], typing.Optional[typing.Callable]],_]"
timeout_message,str
sleep_interval,typing.Optional[float]
wait_for_gntb,"Callable[[_, SmartContractsInterface],_]"
sci,SmartContractsInterface
put_deposit,"Callable[[_, SmartContractsInterface, int],_]"
sci,SmartContractsInterface
amount,int
requestor_put_deposit,"Callable[[_, int],_]"
price,int
provider_put_deposit,"Callable[[_, int],_]"
price,int
__init__,"Callable[[_, str, AppConfig, ClientConfigDescriptor, KeysAuth, Database, TransactionSystem, bool, bool, bool, dict, Union[str, None], AppsManager, _],None]"
datadir,str
app_config,AppConfig
config_desc,ClientConfigDescriptor
keys_auth,KeysAuth
database,Database
transaction_system,TransactionSystem
connect_to_known_hosts,bool
use_docker_manager,bool
use_monitor,bool
concent_variant,dict
apps_manager,AppsManager
self.task_test_result,"Union[Dict[str, Any], None]"
op_class_name,str
op_value,int
_restore_locks,"Callable[[_],None]"
abort_test_task,"Callable[[_],bool]"
check_test_status,"Callable[[_],Union[Dict[str, Any], None]]"
subtasks,Dict
get_p2p_port,"Callable[[_],int]"
get_task_server_port,"Callable[[_],int]"
get_task,"Callable[[_, str],Union[dict, None]]"
task_id,str
get_tasks,"Callable[[_, Union[str, None]],Union[dict, None, Iterable[dict]]]"
get_subtasks,"Callable[[_, str],Union[List[Dict], None]]"
task_id,str
get_subtask,"Callable[[_, str],Tuple[Union[Dict, None], Union[str, None]]]"
subtask_id,str
get_supported_task_count,"Callable[[_],int]"
balance,int
timelock,int
get_withdraw_gas_cost,"Callable[[_, Union[str, int], str, str],int]"
destination,str
currency,str
withdraw,"Callable[[_, Union[str, int], str, str],List[str]]"
destination,str
currency,str
clear_dir,"Callable[[_, _, int],_]"
older_than_seconds,int
remove_distributed_files,"Callable[[_, int],_]"
older_than_seconds,int
remove_received_files,"Callable[[_, int],_]"
older_than_seconds,int
_make_connection_status_human_readable_message,"Callable[[Dict[str, Any]],str]"
block_node,"Callable[[_, str],Tuple[bool, Union[str, None]]]"
node_id,str
_client,Client
__init__,"Callable[[_, Client],_]"
client,Client
_time_for,"Callable[[_, Hashable, float],_]"
key,Hashable
interval_seconds,float
_task_server,TaskServer
__init__,"Callable[[_, TaskServer, int],None]"
task_server,TaskServer
interval_seconds,int
_client,Client
__init__,"Callable[[_, Client, int],None]"
client,Client
interval_seconds,int
_task_archiver,TaskArchiver
__init__,"Callable[[_, TaskArchiver],None]"
task_archiver,TaskArchiver
_client,Client
older_than_seconds,int
__init__,"Callable[[_, Client, int, int],None]"
client,Client
interval_seconds,int
older_than_seconds,int
_client,Client
__init__,"Callable[[_, Client, int],None]"
client,Client
interval_seconds,int
__init__,"Callable[[_, TaskManager, int, int],None]"
task_manager,TaskManager
interval_seconds,int
update_num_bits,int
self._task_manager,TaskManager
_run,"Callable[[_],None]"
temp_file_name,"Callable[[_, str],str]"
name,str
pubkeytoaddr,"Callable[[str],str]"
pubkey,str
privkeytoaddr,"Callable[[bytes],str]"
privkey,bytes
is_version_compatible,"Callable[[str, semantic_version.Spec],bool]"
theirs,str
ACCEPTED_KEY,str
VERSION,int
PATH,Path
require_rpc_session,"Callable[[],Callable]"
wrapped,"Callable[[F],F]"
f,F
curry,"Callable[[Node],_]"
self,Node
__init__,"Callable[[_, str, AppConfig, ClientConfigDescriptor, dict, Union[List[SocketAddress], None], bool, bool, bool, Union[str, None], Union[str, None]],None]"
datadir,str
app_config,AppConfig
config_desc,ClientConfigDescriptor
concent_variant,dict
peers,"Union[List[SocketAddress], None]"
use_monitor,bool
use_talkback,bool
use_docker_manager,bool
start,"Callable[[_],None]"
on_rpc_ready,"Callable[[],Deferred]"
quit,"Callable[[_],None]"
set_password,"Callable[[_, str],bool]"
password,str
key_exists,"Callable[[_],bool]"
is_account_unlocked,"Callable[[_],bool]"
is_mainnet,"Callable[[_],bool]"
_start_rpc,"Callable[[_],Deferred]"
accept_terms,"Callable[[_, Union[bool, None], Union[bool, None]],None]"
graceful_shutdown,"Callable[[_],ShutdownResponse]"
_try_shutdown,"Callable[[_],None]"
_is_task_in_progress,"Callable[[_],bool]"
_setup_client,"Callable[[_],None]"
_run,"Callable[[_],None]"
_setup_apps,"Callable[[_],None]"
_error,"Callable[[_, str],Callable]"
msg,str
_stop_on_error,"Callable[[_, str, Any],None]"
msg,str
err,Any
is_numeric,"Callable[[_, str],bool]"
name,str
is_big_int,"Callable[[_, str],bool]"
name,str
EXPECTED_LENGTH,int
db_value,"Callable[[_, str],_]"
value,str
db_value,"Callable[[_, Union[DictSerializable, None]],str]"
python_value,"Callable[[_, str],DictSerializable]"
value,str
__init__,"Callable[[_, Union[Node, None], Union[int, None], Union[str, None], Union[int, None], Union[bool, None], Union[str, None]],None]"
to_dict,"Callable[[_],dict]"
from_dict,"Callable[[dict],PaymentDetails]"
data,dict
__eq__,"Callable[[_, object],bool]"
other,object
__repr__,"Callable[[_],str]"
apply,"Callable[[_, dict],None]"
dictionary,dict
as_message,"Callable[[_],message.base.Message]"
collect_db_models,"Callable[[str],_]"
module,str
collect_db_fields,"Callable[[str],_]"
module,str
get_secret,"Callable[[_, CertificateManager.CrossbarUsers],str]"
read_certificate,"Callable[[_],bytes]"
_generate_dh_params,"Callable[[str, int],None]"
output_path,str
bits,int
_generate_key_pair,"Callable[[str, int],None]"
output_path,str
bits,int
_create_and_sign_certificate,"Callable[[_, crypto.PKey, str],_]"
output_path,str
mapping,"typing.Dict[str, typing.Callable]"
__init__,"Callable[[_, _, _, _, _, _, _],None]"
exposed,"typing.Dict[str, str]"
__init__,"Callable[[_, ApplicationSession],None]"
session,ApplicationSession
self._session,ApplicationSession
self._mapping,"typing.Dict[str, str]"
__init__,"Callable[[_, str, str, int, str, str, bool, bool],None]"
datadir,str
host,str
port,int
realm,str
crossbar_log_level,str
ssl,bool
generate_secrets,bool
admin_role,str
docker_role,str
_build_config,"Callable[[WebSocketAddress, Iterable[str], cert.CertificateManager, str, bool],_]"
address,WebSocketAddress
realm,str
enable_webstatus,bool
get,"Callable[[_],float]"
set,"Callable[[_, float],_]"
value,float
load_config,"Callable[[_, str],None]"
datadir,str
add_environment,"Callable[[_, Environment],None]"
environment,Environment
get_support_status,"Callable[[_, str],SupportStatus]"
env_id,str
accept_tasks,"Callable[[_, str],bool]"
env_id,str
get_environment_by_id,"Callable[[_, str],Union[Environment, None]]"
env_id,str
get_environment_by_image,"Callable[[_, DockerImage],Union[DockerEnvironment, None]]"
image,DockerImage
_get_environments_to_config,"Callable[[_],Dict[str, Tuple[str, bool]]]"
change_accept_tasks,"Callable[[_, str, bool],None]"
env_id,str
state,bool
__init__,"Callable[[_, _, _],None]"
is_ok,"Callable[[_],bool]"
__bool__,"Callable[[_],bool]"
__eq__,"Callable[[_, _],bool]"
join,"Callable[[_, _],SupportStatus]"
ok,"Callable[[_],SupportStatus]"
err,"Callable[[_, _],SupportStatus]"
__repr__,"Callable[[_],str]"
check_support,"Callable[[_],SupportStatus]"
get_min_accepted_performance,"Callable[[_],float]"
step,float
load_config,"Callable[[_, _, _],EnvironmentsConfig]"
change_config,"Callable[[_],EnvironmentsConfig]"
run,"Callable[[_],None]"
running,"Callable[[_],bool]"
start,"Callable[[_],None]"
stop,"Callable[[_],None]"
get_sync_as_message,"Callable[[_],message.base.Message]"
add,"Callable[[_, dict],None]"
msg_dict,dict
add_sync,"Callable[[_, dict],None]"
msg_dict,dict
remove,"Callable[[_, str],None]"
task,str
remove_sync,"Callable[[_, str],None]"
task,str
_loop,"Callable[[_],None]"
_sweep,"Callable[[_],None]"
message_to_model,"Callable[[message.base.Message, _, Actor, Actor],dict]"
msg,message.base.Message
local_role,Actor
remote_role,Actor
add,"Callable[[message.base.Message, _, Actor, Actor, bool],None]"
msg,message.base.Message
local_role,Actor
remote_role,Actor
sync,bool
get,"Callable[[str, str, str, Union[str, None]],Union[message.base.Message, None]]"
message_class_name,str
subtask_id,str
node_id,str
self.metadata_providers,"Dict[str, Callable[[],Any]]"
get_estimated_network_size,"Callable[[_],int]"
get_performance_percentile_rank,"Callable[[float, str],float]"
perf,float
env_id,str
add_peer,"Callable[[_, PeerSession],_]"
peer,PeerSession
add_metadata_provider,"Callable[[_, str, Callable[[],Any]],_]"
name,str
provider,"Callable[[],Any]"
remove_metadata_provider,"Callable[[_, str],None]"
name,str
remove_task_header,"Callable[[_, _],bool]"
__connection_established,"Callable[[_, _, str],_]"
conn_id,str
__connection_failure,"Callable[[str],_]"
conn_id,str
__connection_final_failure,"Callable[[str],_]"
conn_id,str
_disconnect_random_peers,"Callable[[_],None]"
__init__,"Callable[[_, Union[str, None], Union[str, None], Union[str, None], Union[int, None], Union[str, None], Union[int, None], Union[List[str], None], Union[int, None], Union[int, None], Union[int, None], Union[int, None]],None]"
nat_type,"Union[List[str], None]"
self.port_statuses,dict
update_public_info,"Callable[[_],None]"
is_super_node,"Callable[[_],bool]"
__str__,"Callable[[_],str]"
to_dict,"Callable[[_],dict]"
from_dict,"Callable[[Union[dict, None]],Node]"
__eq__,"Callable[[_, object],bool]"
other,object
get_estimated_network_size,"Callable[[_],int]"
num_peers,"Callable[[_],int]"
to_hyperg_peer,"Callable[[str, int],Dict[str, Tuple[str, int]]]"
host,str
port,int
filtered,"Callable[[_, str, float, Union[Callable, None]],Union[HyperdriveClientOptions, None]]"
client_id,str
version,float
filter_peers,"Callable[[_, Iterable, Union[Callable, None]],List]"
peers,Iterable
version,"Callable[[_],Union[semantic_version.Version, None]]"
_wait,"Callable[[_, int],_]"
timeout,int
__init__,"Callable[[_, str, FileTransferToken, typing.Optional[typing.Callable], typing.Optional[typing.Callable], typing.Optional[FileTransferToken.FileInfo.Category]],None]"
file_path,str
file_transfer_token,FileTransferToken
file_category,typing.Optional[FileTransferToken.FileInfo.Category]
__init__,"Callable[[_, keysauth.KeysAuth, dict, int],None]"
variant,dict
interval_seconds,int
start,"Callable[[_, bool],_]"
now,bool
transfer,"Callable[[_, str, FileTransferToken, typing.Optional[typing.Callable], typing.Optional[typing.Callable], typing.Optional[FileTransferToken.FileInfo.Category]],None]"
file_path,str
file_transfer_token,FileTransferToken
file_category,typing.Optional[FileTransferToken.FileInfo.Category]
process,"Callable[[_, ConcentFileRequest],_]"
request,ConcentFileRequest
_get_upload_uri,"Callable[[FileTransferToken],_]"
file_transfer_token,FileTransferToken
_get_download_uri,"Callable[[FileTransferToken, FileTransferToken.FileInfo.Category],_]"
file_transfer_token,FileTransferToken
file_category,FileTransferToken.FileInfo.Category
_get_auth_headers,"Callable[[_, FileTransferToken],_]"
file_transfer_token,FileTransferToken
upload,"Callable[[_, ConcentFileRequest],_]"
request,ConcentFileRequest
download,"Callable[[_, ConcentFileRequest],_]"
request,ConcentFileRequest
verify_response,"Callable[[requests.Response],None]"
send_to_concent,"Callable[[message.base.Message, bytes, dict],typing.Optional[bytes]]"
msg,message.base.Message
signing_key,bytes
concent_variant,dict
receive_from_concent,"Callable[[_, _, dict, str],typing.Optional[bytes]]"
concent_variant,dict
path,str
build_key,"Callable[[],str]"
__init__,"Callable[[_, keysauth.KeysAuth, dict],None]"
variant,dict
self.variant,dict
self._grace_time,int
self._delayed,dict
run,"Callable[[_],None]"
stop,"Callable[[_],None]"
submit_task_message,"Callable[[_, str, message.base.Message, typing.Optional[datetime.timedelta]],None]"
subtask_id,str
msg,message.base.Message
cancel_task_message,"Callable[[_, str, str],bool]"
subtask_id,str
msg_classname,str
submit,"Callable[[_, typing.Hashable, message.base.Message, typing.Optional[datetime.timedelta]],None]"
msg,message.base.Message
cancel,"Callable[[_, typing.Hashable],bool]"
_loop,"Callable[[_],None]"
receive,"Callable[[_],None]"
react_to_concent_message,"Callable[[_, typing.Optional[bytes], message.Message],_]"
data,typing.Optional[bytes]
_enqueue,"Callable[[_, ConcentRequest],_]"
req,ConcentRequest
handler_for,"Callable[[message.base.Message],_]"
msg_cls,message.base.Message
register_handlers,"Callable[[_],None]"
__init__,"Callable[[_, taskserver.TaskServer],None]"
concent_filetransfers,"Callable[[_],ConcentFiletransferService]"
is_ours,"Callable[[_, message.base.Message, str],bool]"
parent_msg,message.base.Message
child_msg_field,str
on_service_refused,"Callable[[_, _, message.base.Message],_]"
response_to,message.base.Message
on_verdict_report_computed_task,"Callable[[_, message.concents.VerdictReportComputedTask],_]"
msg,message.concents.VerdictReportComputedTask
_log_ftt_invalid,"Callable[[message.base.Message],_]"
msg,message.base.Message
_upload_results,"Callable[[_, str, message.concents.FileTransferToken],None]"
subtask_id,str
ftt,message.concents.FileTransferToken
_upload_task_resources,"Callable[[_, str, message.concents.FileTransferToken],None]"
task_id,str
ftt,message.concents.FileTransferToken
on_force_get_task_result_upload,"Callable[[_, message.concents.ForceGetTaskResultUpload],_]"
msg,message.concents.ForceGetTaskResultUpload
on_force_get_task_results_download,"Callable[[_, message.concents.ForceGetTaskResultDownload],_]"
msg,message.concents.ForceGetTaskResultDownload
on_ack_subtask_results_verify,"Callable[[_, message.concents.AckSubtaskResultsVerify],_]"
msg,message.concents.AckSubtaskResultsVerify
verify_task_deadline,"Callable[[message.base.Message],bool]"
msg,message.base.Message
verify_message_payment_address,"Callable[[message.tasks.ReportComputedTask, cryptography.ECCx],bool]"
report_computed_task,message.tasks.ReportComputedTask
prepare_reject_report_computed_task,"Callable[[_, _],message.tasks.RejectReportComputedTask]"
process_report_computed_task_no_time_check,"Callable[[message.tasks.ReportComputedTask, cryptography.ECCx],RESPONSE_FOR_RCT]"
msg,message.tasks.ReportComputedTask
process_report_computed_task,"Callable[[message.tasks.ReportComputedTask, cryptography.ECCx],RESPONSE_FOR_RCT]"
msg,message.tasks.ReportComputedTask
ssl_kwargs,"Callable[[dict],dict]"
concent_variant,dict
__init__,"Callable[[_],None]"
self._handlers,"typing.Dict[message.base.Message, weakref.ref]"
register_handler,"Callable[[_, message.base.Message],Callable]"
msg_cls,message.base.Message
_wrapped,"Callable[[_],Callable]"
interpret,"Callable[[_, _, message.base.Message],None]"
response_to,message.base.Message
available,"Callable[[_],bool]"
network,"Callable[[_],dict]"
discover,"Callable[[_],str]"
get_mapping,"Callable[[_, int, str],Union[Tuple[str, int, bool], None]]"
external_port,int
protocol,str
create_mapping,"Callable[[_, int, int, str, int],Union[int, None]]"
local_port,int
external_port,int
protocol,str
lease_duration,int
remove_mapping,"Callable[[_, int, int, str],bool]"
port,int
external_port,int
protocol,str
available,"Callable[[_],bool]"
network,"Callable[[_],dict]"
mapping,"Callable[[_],Dict[str, Dict[int, int]]]"
discover,"Callable[[_],str]"
get_mapping,"Callable[[_, int, str],Union[Tuple[str, int, bool], None]]"
external_port,int
protocol,str
create_mapping,"Callable[[_, int, int, str, int],Union[int, None]]"
local_port,int
external_port,int
protocol,str
lease_duration,int
remove_mapping,"Callable[[_, int, int, str],bool]"
port,int
external_port,int
protocol,str
update_node,"Callable[[_, Node],None]"
node,Node
quit,"Callable[[_],None]"
__init__,"Callable[[_, int],_]"
discovery_delay,int
available,"Callable[[_],bool]"
network,"Callable[[_],dict]"
discover,"Callable[[_],str]"
get_mapping,"Callable[[_, int, str],Union[Tuple[str, int, bool], None]]"
external_port,int
protocol,str
create_mapping,"Callable[[_, int, int, str, int],Union[int, None]]"
local_port,int
external_port,int
protocol,str
lease_duration,int
remove_mapping,"Callable[[_, _, int, str],_]"
external_port,int
protocol,str
_mapping_exists,"Callable[[_, int, int, str],_]"
local_port,int
external_port,int
protocol,str
_create_mapping,"Callable[[_, str, str, int, int, bool],int]"
protocol,str
local_ip,str
local_port,int
external_port,int
auto,bool
_find_free_port,"Callable[[_, int, str],_]"
preferred_port,int
protocol,str
__init__,"Callable[[_, int, Union[int, None], Union[Callable, None], Union[Callable, None]],None]"
port_start,int
__init__,"Callable[[_, int, Union[Callable, None], Union[Callable, None]],None]"
port,int
__init__,"Callable[[_, List[SocketAddress], Union[Callable, None], Union[Callable, None], Union[Callable, None], Kwargs],None]"
kwargs,Kwargs
__init__,"Callable[[_, ClientConfigDescriptor, TCPNetwork],None]"
config_desc,ClientConfigDescriptor
network,TCPNetwork
change_config,"Callable[[_, ClientConfigDescriptor],_]"
config_desc,ClientConfigDescriptor
__init__,"Callable[[_, ClientConfigDescriptor, TCPNetwork],None]"
config_desc,ClientConfigDescriptor
network,TCPNetwork
conn,PendingConnection
_add_pending_request,"Callable[[_, _, _, _, _, _],bool]"
is_address_in_network,"Callable[[_, str],bool]"
addr,str
_is_address_valid,"Callable[[_, str, int],bool]"
address,str
port,int
__init__,"Callable[[_, int, List[SocketAddress], Union[Callable, None], Union[Callable, None], Union[Callable, None], Kwargs],None]"
type_,int
kwargs,Kwargs
connect,"Callable[[_, TCPConnectInfo],None]"
connect_info,TCPConnectInfo
listen,"Callable[[_, TCPListenInfo],None]"
listen_info,TCPListenInfo
__try_to_connect_to_addresses,"Callable[[_, TCPConnectInfo],_]"
connect_info,TCPConnectInfo
__try_to_connect_to_address,"Callable[[_, TCPConnectInfo],_]"
connect_info,TCPConnectInfo
__connection_established,"Callable[[_, _, TCPConnectInfo],_]"
connect_info,TCPConnectInfo
__connection_failure,"Callable[[_, _, TCPConnectInfo],_]"
connect_info,TCPConnectInfo
__connection_to_address_established,"Callable[[_, TCPConnectInfo],_]"
connect_info,TCPConnectInfo
__connection_to_address_failure,"Callable[[_, TCPConnectInfo],_]"
connect_info,TCPConnectInfo
__try_to_listen_on_port,"Callable[[_, TCPListenInfo],_]"
listen_info,TCPListenInfo
__listening_failure,"Callable[[_, _, TCPListenInfo],_]"
listen_info,TCPListenInfo
_can_receive,"Callable[[_],bool]"
_can_receive,"Callable[[_],bool]"
connect,"Callable[[_, TCPConnectInfo],None]"
connect_info,TCPConnectInfo
listen,"Callable[[_, TCPListenInfo],None]"
listen_info,TCPListenInfo
stop_listening,"Callable[[_, TCPListeningInfo],_]"
listening_info,TCPListeningInfo
interpret,"Callable[[_, message.base.Message],_]"
msg,message.base.Message
disconnect,"Callable[[_, message.base.Disconnect.REASON],_]"
reason,message.base.Disconnect.REASON
_send_disconnect,"Callable[[_, message.base.Disconnect.REASON],_]"
reason,message.base.Disconnect.REASON
_can_send,"Callable[[_, message.base.Message, _],_]"
msg,message.base.Message
__init__,"Callable[[_, int, float, float],None]"
rate,int
capacity_factor,float
delay_factor,float
delay_factor,"Callable[[_],float]"
call,"Callable[[_, FunctionType],None]"
fn,FunctionType
_limiter_key,bytes
_limiter_delay,float
set_environment,"Callable[[str, str],None]"
net,str
concent,str
build,"Callable[[Union[DockerImage, Tuple, Dict]],DockerImage]"
get_config,"Callable[[_],dict]"
constrain,"Callable[[_],bool]"
build_config,"Callable[[_, _],None]"
quit,"Callable[[_],None]"
__init__,"Callable[[_, DockerImage, str, Dict, str, str, str, Union[Dict, None], Union[int, None]],None]"
image,DockerImage
script_src,str
parameters,Dict
resources_dir,str
work_dir,str
output_dir,str
__init__,"Callable[[_, str, str, Path, Path, Path],None]"
resources,str
temporary,str
work,Path
output,Path
logs,Path
self.work,Path
self.output,Path
self.logs,Path
generate,"Callable[[_, str, str],DockerDirMapping]"
resources,str
temporary,str
mkdirs,"Callable[[_, bool],None]"
exist_ok,bool
docker_manager,"ClassVar[Union[DockerManager, None]]"
__init__,"Callable[[_, str, List[Union[DockerImage, Dict, Tuple]], str, Dict, DockerDirMapping, int, bool],None]"
subtask_id,str
docker_images,"List[Union[DockerImage, Dict, Tuple]]"
src_code,str
extra_data,Dict
dir_mapping,DockerDirMapping
timeout,int
check_mem,bool
specify_dir_mapping,"Callable[[str, str, str, str, str],DockerDirMapping]"
resources,str
temporary,str
work,str
output,str
logs,str
generate_dir_mapping,"Callable[[str, str],DockerDirMapping]"
resources,str
temporary,str
run,"Callable[[_],None]"
_task_computed,"Callable[[_, Union[int, None]],None]"
check_docker_images,"Callable[[_],SupportStatus]"
check_support,"Callable[[_],SupportStatus]"
supports_image,"Callable[[_, DockerImage],bool]"
docker_image,DockerImage
get_container_config,"Callable[[_],Dict]"
start,"Callable[[_],None]"
stop,"Callable[[_],None]"
status,"Callable[[_],str]"
wait_until_stopped,"Callable[[_],None]"
commands,CommandDict
commands,CommandDict
commands,CommandDict
run,"Callable[[_, str, Union[str, None], Union[Tuple, List[str], None], bool],Union[str, None]]"
command_name,str
args,"Union[Tuple, List[str], None]"
shell,bool
wait_until_started,"Callable[[_],None]"
_command,"Callable[[_, List[str], Union[str, None], Union[Tuple, List[str], None], bool],str]"
args,"Union[Tuple, List[str], None]"
shell,bool
__init__,"Callable[[_, GetConfigFunction, str],None]"
get_config,GetConfigFunction
vm_name,str
is_available,"Callable[[_],bool]"
setup,"Callable[[_],None]"
quit,"Callable[[_],None]"
instance,"Callable[[_, GetConfigFunction, str],Hypervisor]"
get_config_fn,GetConfigFunction
docker_vm,str
_new_instance,"Callable[[_, GetConfigFunction, str],Hypervisor]"
get_config_fn,GetConfigFunction
vm_name,str
remove,"Callable[[_, Union[str, None]],bool]"
vm_running,"Callable[[_, Union[str, None]],bool]"
start_vm,"Callable[[_, Union[str, None]],None]"
stop_vm,"Callable[[_, Union[str, None]],bool]"
create,"Callable[[_, Union[str, None]],bool]"
constrain,"Callable[[_, Union[str, None]],None]"
constraints,"Callable[[_, Union[str, None]],Dict]"
setup,"Callable[[_],None]"
is_available,"Callable[[_],bool]"
create,"Callable[[_, Union[str, None]],bool]"
remove,"Callable[[_, Union[str, None]],bool]"
constrain,"Callable[[_, Union[str, None]],None]"
constraints,"Callable[[_, Union[str, None]],Dict]"
_read_config,"Callable[[_],Dict]"
_update_config,"Callable[[_, Dict],None]"
update,Dict
constrain,"Callable[[_, Union[str, None]],None]"
constraints,"Callable[[_, Union[str, None]],Dict]"
init_pythoncom,"Callable[[],bool]"
__init__,"Callable[[_, GetConfigFunction, _, _, _, str],None]"
get_config_fn,GetConfigFunction
vm_name,str
create,"Callable[[_, Union[str, None]],bool]"
constraints,"Callable[[_, Union[str, None]],Dict]"
constrain,"Callable[[_, Union[str, None]],None]"
_new_instance,"Callable[[_, GetConfigFunction, str],Hypervisor]"
get_config_fn,GetConfigFunction
docker_vm,str
__init__,"Callable[[_, GetConfigFunction, str],None]"
get_config_fn,GetConfigFunction
vm_name,str
setup,"Callable[[_],None]"
__init__,"Callable[[_],None]"
subtask_id,str
progress,float
seconds_to_timeout,float
running_time_seconds,float
outfilebasename,str
output_format,str
scene_file,str
start_task,int
end_task,int
total_tasks,int
__init__,"Callable[[_, NodeMetadataModel, dict],None]"
meta_data,NodeMetadataModel
monitor_config,dict
on_requestor_stats_snapshot,"Callable[[_, CurrentStats, FinishedTasksStats],_]"
current_stats,CurrentStats
finished_stats,FinishedTasksStats
TYPE,str
__init__,"Callable[[_, BasicModel, CurrentStats, FinishedTasksStats],_]"
meta_data,BasicModel
current_stats,CurrentStats
finished_stats,FinishedTasksStats
__init__,"Callable[[_, _, CertificateManager, str, int, str, bool],None]"
cert_manager,CertificateManager
host,str
port,int
realm,str
ssl,bool
unlock,"Callable[[_],str]"
is_account_unlocked,bool
withdraw,"Callable[[_, _, _, _],str]"
shutdown,"Callable[[_],str]"
_fmt,"Callable[[int, str],str]"
value,int
unit,str
client,ClientProxy
yes_no,"Callable[[str, str],bool]"
prompt,str
default,str
read_accept_options,"Callable[[],typing.Dict[str, bool]]"
client,ClientProxy
client,Any
run,"Callable[[_, str],_]"
file_name,str
result,bool
result,bool
result,"Union[Dict[str, Any], None]"
client,ClientProxy
client,ClientProxy
client,ClientProxy
restart,"Callable[[_, _, bool],_]"
force,bool
restart_subtasks,"Callable[[_, _, _, bool],_]"
force,bool
create,"Callable[[_, str, bool],Any]"
file_name,str
force,bool
dump,"Callable[[_, str, Union[str, None]],None]"
id,str
template,"Callable[[_, Union[str, None]],None]"
__format_seconds,"Callable[[float],str]"
seconds,float
__dump_dict,"Callable[[dict, Union[str, None]],None]"
dictionary,dict
__create_from_json,"Callable[[_, str],Tuple[Union[str, None], Union[str, None]]]"
jsondata,str
peers,"Callable[[_],list]"
peers,"Callable[[_, list],None]"
value,list
timeout,"Callable[[_, Union[int, None]],None]"
_retry,"Callable[[_, MethodType],_]"
method,MethodType
_retry_async,"Callable[[_, MethodType],_]"
method,MethodType
add,"Callable[[_, dict],_]"
files,dict
add_async,"Callable[[_, dict],_]"
files,dict
_add,"Callable[[_, dict],_]"
files,dict
get,"Callable[[_, str, Union[ClientOptions, None], Union[str, None]],tuple]"
content_hash,str
id,"Callable[[_, Union[ClientOptions, None]],str]"
cancel,"Callable[[_, str],_]"
content_hash,str
cancel_async,"Callable[[str],_]"
content_hash,str
list_dir_recursive,"Callable[[str],Iterator[str]]"
dir,str
clear_dir,"Callable[[_, _, int],_]"
older_than_seconds,int
_add_files_async,"Callable[[_, str, dict, str, _],_]"
resource_hash,str
files,dict
task_id,str
_add_files_sync,"Callable[[_, str, dict, str, _],_]"
resource_hash,str
files,dict
task_id,str
_cache_files,"Callable[[_, str, Iterable, str],_]"
resource_hash,str
files,Iterable
task_id,str
_cache_resource,"Callable[[_, Resource],None]"
resource,Resource
_pull,"Callable[[_, Resource, str, _, _, _, _, _],_]"
resource,Resource
task_id,str
_parse_pull_response,"Callable[[_, list, str],list]"
response,list
task_id,str
add_task,"Callable[[_, _, _, _, _, _],Deferred]"
create_resource_package,"Callable[[_, _, _],Deferred]"
__init__,"Callable[[_, peewee.Database, Sequence[Type[peewee.Field]], Sequence[Type[peewee.Model]], str, str, Union[str, None]],None]"
fields,Sequence[Type[peewee.Field]]
models,Sequence[Type[peewee.Model]]
db_dir,str
db_name,str
get_user_version,"Callable[[_],int]"
set_user_version,"Callable[[_, int],None]"
version,int
_create_tables,"Callable[[_],None]"
_migrate_schema,"Callable[[_, _, _],None]"
create_migration,"Callable[[str, str, str, Type[Database], bool],_]"
data_dir,str
migrate_dir,str
migration_name,str
force,bool
_parse_commandline_args,"Callable[[_],tuple]"
__init__,"Callable[[_, str],_]"
migrate_dir,str
version_from_name,"Callable[[str],_]"
file_name,str
__init__,"Callable[[_, peewee.Database, str, int, str],_]"
migrate_dir,str
schema_version,int
template,str
compile,"Callable[[_, str, str, str, _],_]"
name,str
migrate,str
rollback,str
migrate_schema,"Callable[[Database, int, int, str],_]"
database,Database
from_version,int
to_version,int
migrate_dir,str
__init__,"Callable[[_],None]"
self.start_mem,int
self.max_mem,int
self.min_mem,int
self.working,bool
estm_mem,"Callable[[_],int]"
stop,"Callable[[_],None]"
run,"Callable[[_],None]"
__init__,"Callable[[_, bool],None]"
do_check,bool
__enter__,"Callable[[_],MemoryChecker]"
__exit__,"Callable[[_],bool]"
__init__,"Callable[[_, Path, _],None]"
datadir,Path
self._eth_balance,int
self._gnt_balance,int
self._gntb_balance,int
self._payments_locked,int
self._gntb_locked,int
self._gntb_withdrawn,int
self._eth_per_payment,int
backwards_compatibility_tx_storage,"Callable[[_, Path],None]"
old_datadir,Path
backwards_compatibility_privkey,"Callable[[_, bytes, str],None]"
privkey,bytes
password,str
_init,"Callable[[_],None]"
start,"Callable[[_, bool],None]"
now,bool
set_password,"Callable[[_, str],None]"
password,str
_subscribe_to_events,"Callable[[_],None]"
_save_subscription_block_number,"Callable[[_],None]"
add_payment_info,"Callable[[_, str, int, str],int]"
subtask_id,str
value,int
eth_address,str
get_deposit_payments_list,"Callable[[_, int, int],List[model.DepositPayment]]"
limit,int
offset,int
get_subtasks_payments,"Callable[[_, Iterable[str]],List[model.Payment]]"
get_available_eth,"Callable[[_],int]"
get_locked_eth,"Callable[[_],int]"
get_available_gnt,"Callable[[_, Union[str, None]],int]"
get_locked_gnt,"Callable[[_],int]"
lock_funds_for_payments,"Callable[[_, int, int],None]"
price,int
num,int
unlock_funds_for_payments,"Callable[[_, int, int],None]"
price,int
num,int
expect_income,"Callable[[_, str, str, str, int, int],None]"
sender_node,str
subtask_id,str
payer_address,str
value,int
accepted_ts,int
settle_income,"Callable[[_, str, str, int],None]"
sender_node,str
subtask_id,str
settled_ts,int
eth_for_batch_payment,"Callable[[_, int],int]"
num_payments,int
_eth_base_for_batch_payment,"Callable[[_],int]"
_current_eth_per_payment,"Callable[[_],int]"
get_withdraw_gas_cost,"Callable[[_, int, str, str],int]"
amount,int
destination,str
currency,str
withdraw,"Callable[[_, int, str, str],str]"
amount,int
destination,str
currency,str
on_receipt,"Callable[[_],None]"
concent_balance,"Callable[[_, Union[str, None]],int]"
concent_timelock,"Callable[[_, Union[str, None]],int]"
concent_deposit,"Callable[[_, int, int, bool],Generator[defer.Deferred, TransactionReceipt, Union[str, None]]]"
required,int
expected,int
force,bool
_schedule_concent_withdraw,"Callable[[_],None]"
on_confirmed,"Callable[[_],None]"
_get_funds_from_faucet,"Callable[[_],None]"
_refresh_balances,"Callable[[_],None]"
_try_convert_gnt,"Callable[[_],None]"
_run,"Callable[[_],None]"
tETH_faucet_donate,"Callable[[str],_]"
addr,str
get_payment_value,"Callable[[str],_]"
subtask_id,str
add_payment,"Callable[[str, bytes, int],_]"
subtask_id,str
eth_address,bytes
value,int
__init__,"Callable[[_],None]"
finished_subtasks,"Callable[[_, str, bytes, int],_]"
subtask_id,str
eth_address,bytes
value,int
__init__,"Callable[[_, int, int, _],None]"
subtask_price,int
num_tasks,int
__init__,"Callable[[_, TransactionSystem, int],None]"
transaction_system,TransactionSystem
interval_seconds,int
lock_funds,"Callable[[_, str, int, int, _],None]"
task_id,str
subtask_price,int
num_tasks,int
__init__,"Callable[[_, int, int, _],None]"
required,int
available,int
__init__,"Callable[[_],None]"
transaction_receipt,golem_sci.structs.TransactionReceipt
received_batch_transfer,"Callable[[_, str, str, int, int],None]"
tx_hash,str
sender,str
amount,int
closure_time,int
received_forced_payment,"Callable[[_, str, str, int, int],None]"
tx_hash,str
sender,str
amount,int
closure_time,int
expect,"Callable[[str, str, str, int, int],Income]"
sender_node,str
subtask_id,str
payer_address,str
value,int
accepted_ts,int
settled,"Callable[[str, str, int],None]"
sender_node,str
subtask_id,str
settled_ts,int
received_forced_subtask_payment,"Callable[[str, str, str, int],None]"
tx_hash,str
sender_addr,str
subtask_id,str
value,int
update_overdue_incomes,"Callable[[],None]"
__init__,"Callable[[_, List[str]],None]"
get_timestamp,"Callable[[],int]"
_make_batch_payments,"Callable[[List[Payment]],List[golem_sci.Payment]]"
payees,defaultdict
__init__,"Callable[[_, _],None]"
recipients_count,"Callable[[_],int]"
reserved_gntb,"Callable[[_],int]"
_on_batch_confirmed,"Callable[[_, List[Payment], _],None]"
add,"Callable[[_, Payment],int]"
payment,Payment
__get_next_batch,"Callable[[_, int],int]"
closure_time,int
sendout,"Callable[[_, int],_]"
acceptable_delay,int
__init__,"Callable[[_, Union[BaseProvider, None]],None]"
__init__,"Callable[[_, Callable[[],Any], int],None]"
error_listener,"Callable[[],Any]"
retries,int
sha2,"Callable[[Union[str, bytes]],int]"
get_random,"Callable[[int, int],int]"
min_value,int
max_value,int
get_random_float,"Callable[[],float]"
_private_key,bytes
public_key,bytes
key_id,str
ecc,ECCx
__init__,"Callable[[_, str, str, str, int],None]"
datadir,str
private_key_name,str
password,str
difficulty,int
key_exists,"Callable[[str, str],bool]"
datadir,str
private_key_name,str
_load_or_generate_keys,"Callable[[str, str, str, int],Tuple[bytes, bytes]]"
datadir,str
filename,str
password,str
difficulty,int
_get_or_create_keys_dir,"Callable[[str],str]"
datadir,str
_load_and_check_keys,"Callable[[str, str, int],Union[Tuple[bytes, bytes], None]]"
priv_key_path,str
password,str
difficulty,int
_generate_keys,"Callable[[int],Tuple[bytes, bytes]]"
difficulty,int
_save_private_key,"Callable[[_, _, str],_]"
password,str
_count_max_hash,"Callable[[int],int]"
difficulty,int
is_pubkey_difficult,"Callable[[Union[bytes, str], int],bool]"
difficulty,int
is_difficult,"Callable[[_, int],bool]"
difficulty,int
get_difficulty,"Callable[[str],int]"
key_id,str
sign,"Callable[[_, bytes],bytes]"
data,bytes
verify,"Callable[[_, bytes, bytes, Union[bytes, str, None]],bool]"
sig,bytes
data,bytes
start,"Callable[[_],None]"
stop,"Callable[[_],None]"
running,"Callable[[_],bool]"
__interval_seconds,int
_loopingCall,LoopingCall
__init__,"Callable[[_, int],_]"
interval_seconds,int
running,"Callable[[_],bool]"
start,"Callable[[_, bool],_]"
now,bool
get_local_datadir,"Callable[[Union[str, None], Union[str, None], Union[str, None]],str]"
memory_available,"Callable[[],int]"
initialize,"Callable[[_, str],_]"
working_dir,str
update_config,"Callable[[_, Union[str, HardwarePreset], ClientConfigDescriptor],bool]"
config,ClientConfigDescriptor
from_config,"Callable[[_, ClientConfigDescriptor],HardwarePreset]"
config,ClientConfigDescriptor
values,"Callable[[_, Union[str, HardwarePreset]],Tuple[str, Dict[str, int]]]"
cpu_cores,"Callable[[_, int],int]"
core_num,int
memory,"Callable[[_, int],int]"
mem_size,int
disk,"Callable[[_, int],int]"
disk_space,int
find_file_with_ext,"Callable[[_, _],str]"
async_run,"Callable[[AsyncRequest, Union[Callable, None], Union[Callable, None]],_]"
deferred_call,AsyncRequest
ip_addresses,"Callable[[bool],List[str]]"
use_ipv6,bool
is_ip_address_allowed,"Callable[[Union[ipaddress.IPv4Address, ipaddress.IPv6Address]],bool]"
ip_addr,"Union[ipaddress.IPv4Address, ipaddress.IPv6Address]"
is_ip_network_allowed,"Callable[[Union[ipaddress.IPv4Network, ipaddress.IPv6Network]],bool]"
ip_net,"Union[ipaddress.IPv4Network, ipaddress.IPv6Network]"
to_dict,"Callable[[_],dict]"
from_dict,"Callable[[Union[dict, None]],DictSerializable]"
loads,"Callable[[Union[bytes, str], Type],dict]"
key_type,Type
dumps,"Callable[[_],str]"
unix_pipe,"Callable[[List[str], List[str]],str]"
__call__,"Callable[[_, F],F]"
func,F
__call__,"Callable[[_, F],F]"
func,F
call_later,"Callable[[int, _],None]"
delay,int
get_task_definition_dict,"Callable[[_, Task],_]"
task,Task
add_new_task,"Callable[[_, Task, int],None]"
task,Task
estimated_fee,int
increase_task_mask,"Callable[[_, str, int],None]"
task_id,str
num_bits,int
decrease_task_mask,"Callable[[_, str, int],None]"
task_id,str
num_bits,int
dump_task,"Callable[[_, str],None]"
task_id,str
remove_dump,"Callable[[_, str],_]"
task_id,str
_migrate_status_to_enum,"Callable[[TaskState],None]"
state,TaskState
subtask_state,SubtaskState
restore_tasks,"Callable[[_],None]"
task,Task
state,TaskState
got_wants_to_compute,"Callable[[_, str, str, str],_]"
task_id,str
key_id,str
node_name,str
task_needs_computation,"Callable[[_, str],bool]"
task_id,str
is_my_task,"Callable[[_, _],bool]"
should_wait_for_node,"Callable[[_, _, _],bool]"
copy_results,"Callable[[_, str, str, Iterable[str]],None]"
old_task_id,str
new_task_id,str
_copy_subtask_results,"Callable[[_, CoreTask, CoreTask, dict, dict],Deferred]"
old_task,CoreTask
new_task,CoreTask
old_subtask,dict
new_subtask,dict
is_this_my_task,"Callable[[_, TaskHeader],bool]"
header,TaskHeader
__set_subtask_state_finished,"Callable[[_, str],SubtaskState]"
subtask_id,str
assert_task_can_be_restarted,"Callable[[_, str],None]"
task_id,str
get_subtasks,"Callable[[_, _],Union[List[str], None]]"
get_frame_subtasks,"Callable[[_, str, _],Union[Dict[str, SubtaskState], None]]"
task_id,str
notice_task_updated,"Callable[[_, str, str, Operation, bool],_]"
task_id,str
subtask_id,str
op,Operation
persist,bool
__init__,"Callable[[_, str, Type[TaskDefinition], TaskDefaults, Type[Options], Type[TaskBuilder]],None]"
name,str
defaults,TaskDefaults
for_purpose,"Callable[[_, TaskPurpose],TaskTypeInfo]"
purpose,TaskPurpose
__init__,"Callable[[_, str, str, Node, _, _, _, _, _, int, int, bool],None]"
task_id,str
environment,str
task_owner,Node
max_price,int
subtasks_count,int
concent_enabled,bool
update_checksum,"Callable[[_],None]"
from_dict,"Callable[[_],TaskFixedHeader]"
th,TaskFixedHeader
dict_to_binary,"Callable[[_, dict],bytes]"
dictionary,dict
dict_to_binarizable,"Callable[[_, dict],List[tuple]]"
dictionary,dict
validate,"Callable[[dict],None]"
th_dict_repr,dict
_ordered,"Callable[[dict],List[tuple]]"
dictionary,dict
__init__,"Callable[[_, Union[Mask, None], Union[float, None], Union[bytes, None]],None]"
to_binary,"Callable[[_],bytes]"
to_dict,"Callable[[_],dict]"
__getattr__,"Callable[[_, str],Any]"
item,str
from_dict,"Callable[[dict],TaskHeader]"
dictionary,dict
th,TaskHeader
dict_to_binary,"Callable[[_, dict],bytes]"
dictionary,dict
dict_to_binarizable,"Callable[[_, dict],List[tuple]]"
dictionary,dict
validate,"Callable[[dict],None]"
th_dict_repr,dict
_ordered,"Callable[[dict],List[Tuple]]"
dictionary,dict
build,"Callable[[_],Task]"
build_definition,"Callable[[_, TaskTypeInfo, _, _],_]"
task_type,TaskTypeInfo
build_dictionary,"Callable[[TaskDefinition],dict]"
definition,TaskDefinition
__init__,"Callable[[_, TaskHeader, str, TaskDefinition],None]"
header,TaskHeader
src_code,str
task_definition,TaskDefinition
price,"Callable[[_],int]"
query_extra_data,"Callable[[_, float, int, Union[str, None], Union[str, None]],ExtraData]"
perf_index,float
num_cores,int
query_extra_data_for_test_task,"Callable[[_],golem_messages.message.ComputeTaskDef]"
short_extra_data_repr,"Callable[[_, ExtraData],str]"
extra_data,ExtraData
needs_computation,"Callable[[_],bool]"
finished_computation,"Callable[[_],bool]"
get_total_tasks,"Callable[[_],int]"
get_active_tasks,"Callable[[_],int]"
get_tasks_left,"Callable[[_],int]"
get_progress,"Callable[[_],float]"
get_resources,"Callable[[_],list]"
update_task_state,"Callable[[_, TaskState],_]"
task_state,TaskState
get_trust_mod,"Callable[[_, _],int]"
add_resources,"Callable[[_, set],_]"
resources,set
get_stdout,"Callable[[_, _],str]"
get_stderr,"Callable[[_, _],str]"
get_results,"Callable[[_, _],List]"
get_output_names,"Callable[[_],List]"
get_output_states,"Callable[[_],List]"
copy_subtask_results,"Callable[[_, int, dict, List[str]],None]"
subtask_id,int
old_subtask_info,dict
__init__,"Callable[[_, str, Callable, Callable, Callable[[],ComputeTaskDef], ComputeTaskDef, bool, str, str, list, _],None]"
root_path,str
success_callback,Callable
error_callback,Callable
get_compute_task_def,"Callable[[],ComputeTaskDef]"
compute_task_def,ComputeTaskDef
check_mem,bool
comp_failed_warning,str
comp_success_message,str
resources,list
run,"Callable[[_],None]"
end_comp,"Callable[[_],bool]"
task_computed,"Callable[[_, TaskThread],None]"
task_thread,TaskThread
is_success,"Callable[[_, TaskThread],bool]"
task_thread,TaskThread
computation_success,"Callable[[_, TaskThread],None]"
task_thread,TaskThread
computation_failure,"Callable[[_, TaskThread],None]"
task_thread,TaskThread
_get_task_thread,"Callable[[_, ComputeTaskDef],DockerTaskThread]"
ctd,ComputeTaskDef
copy_and_sign,"Callable[[message.base.Message, _],message.base.Message]"
msg,message.base.Message
self.task_server,TaskServer
self.task_manager,TaskManager
self.task_computer,TaskComputer
my_private_key,"Callable[[_],bytes]"
my_public_key,"Callable[[_],bytes]"
result_received,"Callable[[_, str, List[str]],_]"
subtask_id,str
task_state,TaskState
_react_to_subtask_result_accepted,"Callable[[_, message.tasks.SubtaskResultsAccepted],_]"
msg,message.tasks.SubtaskResultsAccepted
_react_to_subtask_results_rejected,"Callable[[_, message.tasks.SubtaskResultsRejected],_]"
msg,message.tasks.SubtaskResultsRejected
check_provider_for_subtask,"Callable[[_, _],bool]"
check_requestor_for_task,"Callable[[_, str, str],RequestorCheckResult]"
task_id,str
additional_msg,str
check_requestor_for_subtask,"Callable[[_, str],RequestorCheckResult]"
subtask_id,str
__check_docker_images,"Callable[[_, message.ComputeTaskDef, DockerEnvironment],_]"
env,DockerEnvironment
__init__,"Callable[[_, TaskServer, _, _],None]"
task_server,TaskServer
self.docker_manager,DockerManager
self.assigned_subtask,"Union[Dict[str, Any], None]"
task_computed,"Callable[[_, TaskThread],None]"
task_thread,TaskThread
c,TaskThread
_validate_task_dict,"Callable[[_, _],None]"
create_task,"Callable[[_, _, _],typing.Tuple[typing.Optional[str], typing.Optional[str]]]"
restart_task,"Callable[[_, str, bool],typing.Tuple[typing.Optional[str], typing.Optional[str]]]"
task_id,str
force,bool
restart_subtasks_from_task,"Callable[[_, str, typing.Iterable[str], bool],_]"
task_id,str
subtask_ids,typing.Iterable[str]
force,bool
run_test_task,"Callable[[_, _],bool]"
__init__,"Callable[[_, Task, _, _, _],_]"
task,Task
is_allowed,"Callable[[_, str],Tuple[bool, str]]"
node_id,str
disallow,"Callable[[_, str, int, bool],None]"
node_id,str
timeout_seconds,int
persist,bool
__init__,"Callable[[_, Iterable[str], Path],None]"
list_path,Path
is_allowed,"Callable[[_, str],Tuple[bool, str]]"
node_id,str
disallow,"Callable[[_, str, int, bool],None]"
node_id,str
timeout_seconds,int
persist,bool
_deadline,"Callable[[int],_]"
timeout,int
__init__,"Callable[[_, Set[str], Path],None]"
list_path,Path
is_allowed,"Callable[[_, str],Tuple[bool, str]]"
node_id,str
disallow,"Callable[[_, str, int, bool],None]"
node_id,str
timeout_seconds,int
persist,bool
_read_set_from_file,"Callable[[Path],Set[str]]"
path,Path
_write_set_to_file,"Callable[[Path, Set[str]],_]"
path,Path
get_acl,"Callable[[Path],Union[_DenyAcl, _AllowAcl]]"
datadir,Path
save_task_preset,"Callable[[str, str, Union[str, dict]],None]"
preset_name,str
task_type,str
get_task_presets,"Callable[[str],Dict[str, Union[str, dict]]]"
task_type,str
delete_task_preset,"Callable[[str, str],None]"
task_type,str
name,str
_is_same_task_preset,"Callable[[str, str],bool]"
task_type,str
name,str
is_completed,"Callable[[_],bool]"
is_preparing,"Callable[[_],bool]"
is_active,"Callable[[_],bool]"
is_computed,"Callable[[_],bool]"
is_active,"Callable[[_],bool]"
is_finished,"Callable[[_],bool]"
task_related,"Callable[[],bool]"
subtask_related,"Callable[[],bool]"
unnoteworthy,"Callable[[],bool]"
is_completed,"Callable[[_],bool]"
task_related,"Callable[[],bool]"
is_completed,"Callable[[_],bool]"
subtask_related,"Callable[[],bool]"
unnoteworthy,"Callable[[],bool]"
compute_subtask_value,"Callable[[int, int],_]"
price,int
computation_time,int
comp_task_info_keeping_timeout,"Callable[[int, int, int],_]"
subtask_timeout,int
resource_size,int
num_of_res_transfers_needed,int
__init__,"Callable[[_, TaskHeader, int],_]"
header,TaskHeader
price,int
self.subtasks,dict
check_deadline,"Callable[[_, float],bool]"
deadline,float
self.active_tasks,"typing.Dict[str, CompTaskInfo]"
self.subtask_to_task,"typing.Dict[str, str]"
self.task_package_paths,"typing.Dict[str, list]"
add_request,"Callable[[_, TaskHeader, int],_]"
theader,TaskHeader
price,int
receive_subtask,"Callable[[_, message.tasks.TaskToCompute],_]"
task_to_compute,message.tasks.TaskToCompute
comp_task_info,CompTaskInfo
key_id,str
get_task_id_for_subtask,"Callable[[_, str],typing.Optional[str]]"
subtask_id,str
get_node_for_task_id,"Callable[[_, _],typing.Optional[str]]"
add_package_paths,"Callable[[_, str, typing.List[str]],None]"
task_id,str
package_paths,typing.List[str]
get_package_paths,"Callable[[_, str],typing.Optional[typing.List[str]]]"
task_id,str
__init__,"Callable[[_, _, Node, _, _, _, _, _, _],_]"
node,Node
self.task_headers,"typing.Dict[str, TaskHeader]"
check_support,"Callable[[_, TaskHeader],SupportStatus]"
header,TaskHeader
check_environment,"Callable[[_, str],SupportStatus]"
env,str
check_mask,"Callable[[_, TaskHeader],SupportStatus]"
header,TaskHeader
check_price,"Callable[[_, TaskHeader],SupportStatus]"
header,TaskHeader
check_version,"Callable[[_, TaskHeader],SupportStatus]"
header,TaskHeader
get_support_status,"Callable[[_, _],typing.Optional[SupportStatus]]"
add_task_header,"Callable[[_, TaskHeader],bool]"
header,TaskHeader
update_supported_set,"Callable[[_, TaskHeader],None]"
header,TaskHeader
check_owner,"Callable[[str, str],None]"
task_id,str
owner_id,str
remove_task_header,"Callable[[_, _],bool]"
get_owner,"Callable[[_, _],typing.Optional[str]]"
get_task,"Callable[[_],typing.Optional[TaskHeader]]"
MASK_BYTES,int
MASK_LEN,int
__init__,"Callable[[_, bytes],None]"
byte_repr,bytes
increase,"Callable[[_, int],None]"
num_bits,int
decrease,"Callable[[_, int],None]"
num_bits,int
num_bits,"Callable[[_],int]"
to_bin,"Callable[[_],str]"
to_bytes,"Callable[[_],bytes]"
to_int,"Callable[[_],int]"
matches,"Callable[[_, bytes],bool]"
addr,bytes
_bits_to_bytes,"Callable[[_, Set[int]],bytes]"
generate,"Callable[[_, int],Mask]"
num_bits,int
from_bits,"Callable[[_, Set[int]],Mask]"
from_dict,"Callable[[_, dict],Mask]"
dict_repr,dict
get_mask_for_task,"Callable[[_, int, int],Mask]"
desired_num_workers,int
potential_num_workers,int
self.latest_status,TaskStatus
got_task_message,"Callable[[_, TaskMsg, TaskStatus],_]"
msg,TaskMsg
latest_status,TaskStatus
got_subtask_message,"Callable[[_, str, TaskMsg, SubtaskStatus],_]"
subtask_id,str
msg,TaskMsg
latest_status,SubtaskStatus
subtask_count,"Callable[[_],int]"
collected_results_count,"Callable[[_],int]"
verified_results_count,"Callable[[_],int]"
_subtasks_count_specific_ops,"Callable[[_, Operation],_]"
op,Operation
not_accepted_results_count,"Callable[[_],int]"
timeout_count,"Callable[[_],int]"
failed_count,"Callable[[_],int]"
not_downloaded_count,"Callable[[_],int]"
total_time,"Callable[[_],float]"
had_failures_or_timeouts,"Callable[[_],bool]"
is_completed,"Callable[[_],bool]"
has_task_failed,"Callable[[_],bool]"
want_to_compute_count,"Callable[[_],int]"
in_progress_subtasks_count,"Callable[[_],int]"
update_current_stats_with_task,"Callable[[CurrentStats, Union[TaskStats, None], TaskStats],CurrentStats]"
current,CurrentStats
new,TaskStats
update_finished_stats_with_task,"Callable[[FinishedTasksStats, Union[TaskStats, None], TaskStats],FinishedTasksStats]"
finished,FinishedTasksStats
new,TaskStats
on_message,"Callable[[_, str, TaskState, str, Operation],None]"
task_id,str
task_state,TaskState
subtask_id,str
op,Operation
is_task_finished,"Callable[[_, str],bool]"
task_id,str
get_task_stats,"Callable[[_, str],TaskStats]"
task_id,str
ti,TaskInfo
get_current_stats,"Callable[[_],CurrentStats]"
get_finished_stats,"Callable[[_],FinishedTasksStats]"
cb_message,"Callable[[_, str, str, Union[str, None], str, TaskState, str, Operation],_]"
sender,str
signal,str
task_id,str
task_state,TaskState
subtask_id,str
op,Operation
get_current_stats,"Callable[[_],CurrentStats]"
get_finished_stats,"Callable[[_],FinishedTasksStats]"
__init__,"Callable[[_, _, ClientConfigDescriptor, _, _, _, _, _, _],None]"
config_desc,ClientConfigDescriptor
send_task_failed,"Callable[[_, str, str, str],None]"
subtask_id,str
task_id,str
err_msg,str
add_task_header,"Callable[[_, dict],bool]"
th_dict_repr,dict
verify_header_sig,"Callable[[_, TaskHeader],_]"
header,TaskHeader
remove_task_header,"Callable[[_, _],bool]"
add_task_session,"Callable[[_, _, TaskSession],_]"
session,TaskSession
remove_task_session,"Callable[[_, TaskSession],_]"
task_session,TaskSession
subtask_accepted,"Callable[[_, str, str, str, int, int],_]"
sender_node_id,str
subtask_id,str
payer_address,str
value,int
accepted_ts,int
accept_result,"Callable[[_, _, _, str, int],_]"
eth_address,str
value,int
increase_trust_payment,"Callable[[_, str],_]"
node_id,str
decrease_trust_payment,"Callable[[_, str],_]"
node_id,str
get_min_performance_for_task,"Callable[[_, Task],float]"
task,Task
__connection_for_task_request_established,"Callable[[_, TaskSession, _, _, _, _, _, _, _, _, _],_]"
session,TaskSession
new_session_prepare,"Callable[[_, TaskSession, str, str, str],_]"
session,TaskSession
subtask_id,str
key_id,str
conn_id,str
__connection_for_task_verification_result_established,"Callable[[_, TaskSession, _, ExtractedPackage, _, str],_]"
session,TaskSession
extracted_package,ExtractedPackage
subtask_id,str
__connection_for_task_verification_result_failure,"Callable[[_, _, _, _, str],_]"
subtask_id,str
verify_results,"Callable[[_, message.tasks.ReportComputedTask, ExtractedPackage],None]"
report_computed_task,message.tasks.ReportComputedTask
extracted_package,ExtractedPackage
result,"Union[None, Dict[str, Any], Tuple[Dict[str, Any], int]]"
__init__,"Callable[[_, str, str, Dict, str, str, float],None]"
subtask_id,str
src_code,str
extra_data,Dict
res_path,str
tmp_path,str
timeout,float
start,"Callable[[_],Deferred]"
_fail,"Callable[[_, Exception],_]"
exception,Exception
create,"Callable[[_, str, Iterable[str]],_]"
output_path,str
compute_sha1,"Callable[[str],_]"
source_path,str
create,"Callable[[_, str, Iterable[str]],_]"
output_path,str
create,"Callable[[_, str, List[str]],_]"
output_path,str
extract,"Callable[[_, _, _, _],ExtractedPackage]"
extract_zip,"Callable[[_, _, _],ExtractedPackage]"
restore_resources,"Callable[[_],None]"
_restore_resources,"Callable[[_, Union[Iterable[str], None], str, Union[str, None], Union[int, None]],_]"
files,"Union[Iterable[str], None]"
task_id,str
get_share_options,"Callable[[_, str, Union[str, None]],HyperdriveClientOptions]"
task_id,str
__init__,"Callable[[_, str, str, str, str, Union[str, None], Union[Tuple[str, str, str], None]],None]"
platform,str
system,str
release,str
version,str
linux_distribution,"Union[Tuple[str, str, str], None]"
get_os_info,"Callable[[_],OSInfo]"
_get_linux_distribution,"Callable[[_],Union[Tuple[str, str, str], None]]"
_random_buffer_size,int
self.dat,"Union[List[KeyValue], rdf_structs.RepeatedFieldHelper]"
dummy_config_parser,"Callable[[],ConfigParser]"
wait_for_server,"Callable[[int],_]"
port,int
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
prefix_groupchat_reply,"Callable[[_, Message, Identifier],_]"
message,Message
identifier,Identifier
query_room,"Callable[[_, str],Room]"
room,str
w1,"Callable[[_, FlowRoot],_]"
flow,FlowRoot
w2,"Callable[[_, FlowRoot],_]"
flow,FlowRoot
w3,"Callable[[_, FlowRoot],_]"
flow,FlowRoot
w4,"Callable[[_, FlowRoot],_]"
flow,FlowRoot
__init__,"Callable[[_, _, str, str, Type, _, _],_]"
base_module,str
plugin_name,str
base_class,Type
load_plugin,"Callable[[_],Any]"
botcmd,"Callable[[],Callable[[BotPlugin, Message, Any],Any]]"
hidden,bool
name,str
split_args_with,str
admin_only,bool
historize,bool
template,str
flow_only,bool
syntax,str
re_botcmd,"Callable[[],Callable[[BotPlugin, Message, Any],Any]]"
hidden,bool
name,str
admin_only,bool
historize,bool
template,str
pattern,str
flags,int
matchall,bool
prefixed,bool
flow_only,bool
re_cmd_name_help,str
arg_botcmd,"Callable[[],Callable[[BotPlugin, Message, Any],Any]]"
hidden,bool
name,str
admin_only,bool
historize,bool
template,str
flow_only,bool
unpack_args,bool
webhook,"Callable[[],Callable[[BotPlugin, Any],str]]"
form_param,str
raw,bool
__init__,"Callable[[_, str, bool],_]"
command,str
hints,bool
connect,"Callable[[_, Union[FlowNode, str], Predicate, bool],_]"
predicate,Predicate
hints,bool
predicate_for_node,"Callable[[_, FlowNode],_]"
node,FlowNode
__init__,"Callable[[_, str, str],_]"
name,str
description,str
connect,"Callable[[_, Union[FlowNode, str], Predicate, bool, bool],_]"
predicate,Predicate
auto_trigger,bool
room_flow,bool
__init__,"Callable[[_, FlowRoot, Identifier, Mapping[str, Any]],_]"
root,FlowRoot
requestor,Identifier
advance,"Callable[[_, FlowNode, _],_]"
next_step,FlowNode
name,"Callable[[_],str]"
current_step,"Callable[[_],FlowNode]"
root,"Callable[[_],FlowRoot]"
check_identifier,"Callable[[_, Identifier],_]"
identifier,Identifier
name,"Callable[[_],str]"
activate,"Callable[[_],None]"
deactivate,"Callable[[_],None]"
get_command,"Callable[[_, str],_]"
command_name,str
add_flow,"Callable[[_, FlowRoot],_]"
flow,FlowRoot
trigger,"Callable[[_, str, Identifier, _],Union[Flow, None]]"
cmd,str
requestor,Identifier
check_inflight_already_running,"Callable[[_, Identifier],bool]"
user,Identifier
check_inflight_flow_triggered,"Callable[[_, str, Identifier],Tuple[Union[Flow, None], Union[FlowNode, None]]]"
cmd,str
user,Identifier
_check_if_new_flow_is_triggered,"Callable[[_, str, Identifier],Tuple[Union[Flow, None], Union[FlowNode, None]]]"
cmd,str
user,Identifier
_create_new_flow,"Callable[[_, Identifier, _],Tuple[Union[Flow, None], Union[FlowNode, None]]]"
requestor,Identifier
start_flow,"Callable[[_, str, Identifier, Mapping[str, Any]],Flow]"
name,str
requestor,Identifier
stop_flow,"Callable[[_, str, Identifier],Union[Flow, None]]"
name,str
requestor,Identifier
execute,"Callable[[_, Flow],_]"
flow,Flow
makeEntry,"Callable[[str, str, _],_]"
repo_name,str
plugin_name,str
check_dependencies,"Callable[[Path],Tuple[Union[str, None], Sequence[str]]]"
req_path,Path
__init__,"Callable[[_, StoragePluginBase, str, _],None]"
storage_plugin,StoragePluginBase
plugin_dir,str
shutdown,"Callable[[_],None]"
check_for_index_update,"Callable[[_],None]"
index_update,"Callable[[_],None]"
get_repo_from_index,"Callable[[_, str],List[RepoEntry]]"
repo_name,str
search_repos,"Callable[[_, str],Generator[RepoEntry, None, None]]"
query,str
add_plugin_repo,"Callable[[_, str, str],None]"
name,str
url,str
set_plugin_repos,"Callable[[_, Dict[str, str]],None]"
install_repo,"Callable[[_, str],str]"
repo,str
update_repos,"Callable[[_, _],Generator[Tuple[str, int, str], None, None]]"
update_all_repos,"Callable[[_],Generator[Tuple[str, int, str], None, None]]"
uninstall_repo,"Callable[[_, str],None]"
name,str
warn_admins,"Callable[[_, str],None]"
warning,str
prefix_groupchat_reply,"Callable[[_, Message, Identifier],_]"
message,Message
identifier,Identifier
name,str
module,str
doc,str
core,bool
python_version,VersionType
errbot_minversion,VersionType
errbot_maxversion,VersionType
location,Path
load,"Callable[[Path],PluginInfo]"
plugfile_path,Path
load_file,"Callable[[_, Path],PluginInfo]"
location,Path
parse,"Callable[[ConfigParser],PluginInfo]"
config,ConfigParser
load_plugin_classes,"Callable[[_, str, Type],_]"
base_module_name,str
baseclass,Type
__init__,"Callable[[_, str, str],_]"
reason,str
template,str
name,"Callable[[_],str]"
mode,"Callable[[_],str]"
bot_config,"Callable[[_],ModuleType]"
bot_identifier,"Callable[[_],Identifier]"
init_storage,"Callable[[_],None]"
activate,"Callable[[_],None]"
deactivate,"Callable[[_],None]"
start_poller,"Callable[[_, float, _, int, Tuple, Mapping],_]"
interval,float
times,int
args,Tuple
kwargs,Mapping
stop_poller,"Callable[[_, _, Tuple, Mapping],_]"
args,Tuple
kwargs,Mapping
program_next_poll,"Callable[[_, float, _, int, Tuple, Mapping],_]"
interval,float
times,int
args,Tuple
kwargs,Mapping
poller,"Callable[[_, float, _, int, Tuple, Mapping],_]"
interval,float
times,int
args,Tuple
kwargs,Mapping
create_dynamic_plugin,"Callable[[_, str, Tuple[Command], str],_]"
name,str
doc,str
destroy_dynamic_plugin,"Callable[[_, str],_]"
name,str
get_plugin,"Callable[[_, _],BotPlugin]"
get_configuration_template,"Callable[[_],Mapping]"
check_configuration,"Callable[[_, Mapping],None]"
configuration,Mapping
configure,"Callable[[_, Mapping],None]"
configuration,Mapping
activate,"Callable[[_],None]"
deactivate,"Callable[[_],None]"
callback_connect,"Callable[[_],None]"
callback_message,"Callable[[_, Message],None]"
message,Message
callback_mention,"Callable[[_, Message, Sequence[Identifier]],None]"
message,Message
callback_presence,"Callable[[_, Presence],None]"
presence,Presence
callback_stream,"Callable[[_, Stream],None]"
stream,Stream
callback_botmessage,"Callable[[_, Message],_]"
message,Message
callback_room_joined,"Callable[[_, Room],_]"
room,Room
callback_room_left,"Callable[[_, Room],_]"
room,Room
callback_room_topic,"Callable[[_, Room],_]"
room,Room
warn_admins,"Callable[[_, str],None]"
warning,str
send,"Callable[[_, Identifier, str, Message, bool],None]"
identifier,Identifier
text,str
in_reply_to,Message
groupchat_nick_reply,bool
send_card,"Callable[[_, str, Identifier, Message, str, str, str, str, str, str, _],None]"
body,str
to,Identifier
in_reply_to,Message
summary,str
title,str
link,str
image,str
thumbnail,str
color,str
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
send_templated,"Callable[[_, Identifier, str, Mapping, Message, bool],None]"
identifier,Identifier
template_name,str
template_parameters,Mapping
in_reply_to,Message
groupchat_nick_reply,bool
build_identifier,"Callable[[_, str],Identifier]"
txtrep,str
send_stream_request,"Callable[[_, Identifier, IOBase, str, int, str],_]"
user,Identifier
fsource,IOBase
name,str
size,int
stream_type,str
query_room,"Callable[[_, str],Room]"
room,str
start_poller,"Callable[[_, float, _, int, Tuple, Mapping],_]"
interval,float
times,int
args,Tuple
kwargs,Mapping
stop_poller,"Callable[[_, _, Tuple, Mapping],_]"
args,Tuple
kwargs,Mapping
parse_args,"Callable[[_, str],_]"
args,str
__init__,"Callable[[_, str, int],_]"
separator,str
maxsplit,int
parse_args,"Callable[[_, str],_]"
args,str
make_templates_path,"Callable[[Path],Path]"
root,Path
add_plugin_templates_path,"Callable[[PluginInfo],_]"
plugin_info,PluginInfo
remove_plugin_templates_path,"Callable[[PluginInfo],_]"
plugin_info,PluginInfo
setup_bot,"Callable[[str, _, _, _],ErrBot]"
backend_name,str
populate_doc,"Callable[[BotPlugin, PluginInfo],None]"
plugin_object,BotPlugin
plugin_info,PluginInfo
install_packages,"Callable[[Path],_]"
req_path,Path
check_python_plug_section,"Callable[[PluginInfo],bool]"
plugin_info,PluginInfo
check_errbot_version,"Callable[[PluginInfo],_]"
plugin_info,PluginInfo
__init__,"Callable[[_, StoragePluginBase, Union[str, None], bool, _, PluginInstanceCallback, _],_]"
storage_plugin,StoragePluginBase
autoinstall_deps,bool
plugin_instance_callback,PluginInstanceCallback
self.autoinstall_deps,bool
self._extra_plugin_dir,str
self._plugin_instance_callback,PluginInstanceCallback
get_plugin_obj_by_name,"Callable[[_, str],BotPlugin]"
name,str
_install_potential_package_dependencies,"Callable[[_, Path, Dict[Path, str]],_]"
path,Path
_load_plugins_generic,"Callable[[_, Path, str, _, Type, Dict[str, Any], Dict[str, Any], Dict[Path, str]],_]"
path,Path
extension,str
baseclass,Type
_activate_plugin,"Callable[[_, BotPlugin, PluginInfo],_]"
plugin,BotPlugin
plugin_info,PluginInfo
activate_flow,"Callable[[_, str],_]"
name,str
deactivate_flow,"Callable[[_, str],_]"
name,str
activate_plugin,"Callable[[_, str],_]"
name,str
_activate_plugin_dependencies,"Callable[[_, str, Set[str]],List[str]]"
name,str
deactivate_plugin,"Callable[[_, str],_]"
name,str
remove_plugin,"Callable[[_, BotPlugin],_]"
plugin,BotPlugin
get,"Callable[[_, str],Any]"
key,str
set,"Callable[[_, str, Any],None]"
key,str
value,Any
remove,"Callable[[_, str],_]"
key,str
close,"Callable[[_],None]"
open,"Callable[[_, str],StorageBase]"
namespace,str
set,"Callable[[_, str, Any],None]"
key,str
value,Any
get,"Callable[[_, str],Any]"
key,str
remove,"Callable[[_, str],None]"
key,str
len,"Callable[[_],int]"
close,"Callable[[_],None]"
open,"Callable[[_, str],StorageBase]"
namespace,str
get,"Callable[[_, str],Any]"
key,str
remove,"Callable[[_, str],_]"
key,str
set,"Callable[[_, str, Any],None]"
key,str
value,Any
close,"Callable[[_],None]"
open,"Callable[[_, str],StorageBase]"
namespace,str
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
bot,"Callable[[_],ErrBot]"
inject_mocks,"Callable[[_, str, dict],_]"
plugin_name,str
mock_dict,dict
testbot,"Callable[[_],TestBot]"
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
add_reaction,"Callable[[_, Message, str],None]"
msg,Message
reaction,str
remove_reaction,"Callable[[_, Message, str],None]"
msg,Message
reaction,str
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
join,"Callable[[_, str, str],_]"
username,str
password,str
leave,"Callable[[_, str],_]"
reason,str
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
person,"Callable[[_],str]"
client,"Callable[[_],str]"
nick,"Callable[[_],str]"
aclattr,"Callable[[_],str]"
fullname,"Callable[[_],str]"
room,"Callable[[_],Any]"
join,"Callable[[_, str, str],None]"
username,str
password,str
leave,"Callable[[_, str],None]"
reason,str
create,"Callable[[_],None]"
destroy,"Callable[[_],None]"
exists,"Callable[[_],bool]"
joined,"Callable[[_],bool]"
topic,"Callable[[_],str]"
topic,"Callable[[_, str],None]"
topic,str
invite,"Callable[[_],None]"
__init__,"Callable[[_, str, Identifier, Identifier, Message, bool, bool, Mapping, _],_]"
body,str
frm,Identifier
to,Identifier
parent,Message
delayed,bool
partial,bool
extras,Mapping
to,"Callable[[_],Identifier]"
to,"Callable[[_, Identifier],_]"
to,Identifier
frm,"Callable[[_],Identifier]"
frm,"Callable[[_, Identifier],_]"
from_,Identifier
body,"Callable[[_],str]"
body,"Callable[[_, str],_]"
body,str
delayed,"Callable[[_],bool]"
delayed,"Callable[[_, bool],_]"
delayed,bool
parent,"Callable[[_, Message],_]"
parent,Message
extras,"Callable[[_],Mapping]"
is_direct,"Callable[[_],bool]"
is_group,"Callable[[_],bool]"
is_threaded,"Callable[[_],bool]"
partial,"Callable[[_],bool]"
__init__,"Callable[[_, str, Identifier, Identifier, Message, str, str, str, str, str, str, Tuple[Tuple[str, str]]],_]"
body,str
frm,Identifier
to,Identifier
parent,Message
summary,str
title,str
link,str
image,str
thumbnail,str
color,str
fields,"Tuple[Tuple[str, str]]"
__init__,"Callable[[_, Identifier, str, str],_]"
identifier,Identifier
status,str
message,str
identifier,"Callable[[_],Identifier]"
status,"Callable[[_],str]"
message,"Callable[[_],str]"
__init__,"Callable[[_, Identifier, BinaryIO, str, int, str],_]"
identifier,Identifier
fsource,BinaryIO
name,str
size,int
stream_type,str
identifier,"Callable[[_],Identifier]"
name,"Callable[[_],str]"
size,"Callable[[_],int]"
transfered,"Callable[[_],int]"
stream_type,"Callable[[_],str]"
status,"Callable[[_],str]"
accept,"Callable[[_],None]"
reject,"Callable[[_],None]"
error,"Callable[[_, _],None]"
success,"Callable[[_],None]"
clone,"Callable[[_, BinaryIO],Stream]"
new_fsource,BinaryIO
ack_data,"Callable[[_, int],None]"
length,int
send_message,"Callable[[_, Message],None]"
msg,Message
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
build_reply,"Callable[[_, Message, str, bool, bool],_]"
msg,Message
text,str
private,bool
threaded,bool
callback_presence,"Callable[[_, Presence],None]"
presence,Presence
callback_room_joined,"Callable[[_, Room],None]"
room,Room
callback_room_left,"Callable[[_, Room],None]"
room,Room
callback_room_topic,"Callable[[_, Room],None]"
room,Room
serve_forever,"Callable[[_],None]"
reset_reconnection_count,"Callable[[_],None]"
build_message,"Callable[[_, str],Message]"
text,str
prefix_groupchat_reply,"Callable[[_, Message, Identifier],_]"
message,Message
identifier,Identifier
build_identifier,"Callable[[_, str],Identifier]"
text_representation,str
is_from_self,"Callable[[_, Message],bool]"
msg,Message
serve_once,"Callable[[_],None]"
connect,"Callable[[_],Any]"
query_room,"Callable[[_, str],Room]"
room,str
connect_callback,"Callable[[_],None]"
disconnect_callback,"Callable[[_],None]"
mode,"Callable[[_],str]"
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
send_card,"Callable[[_, Card],_]"
card,Card
change_presence,"Callable[[_, str, str],None]"
status,str
message,str
is_from_self,"Callable[[_, Message],bool]"
msg,Message
add_reaction,"Callable[[_, Message, str],None]"
msg,Message
reaction,str
remove_reaction,"Callable[[_, Message, str],None]"
msg,Message
reaction,str
_react,"Callable[[_, str, Message, str],None]"
method,str
msg,Message
reaction,str
recurse_node,"Callable[[_, io.StringIO, _, FlowNode, Flow],_]"
f,FlowNode
flow,Flow
parse_date,"Callable[[str],datetime]"
gh_date,str
unsign_and_check_upgrade_parameters,"Callable[[UserProfile, str, str, str, str],Tuple[Plan, int]]"
user,UserProfile
plan_nickname,str
signed_seat_count,str
salt,str
billing_modality,str
payment_method_string,"Callable[[stripe.Customer],str]"
initial_upgrade,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
billing_home,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
downgrade,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user,UserProfile
replace_payment_source,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user,UserProfile
stripe_token,str
realm,Realm
stripe_customer_id,str
has_billing_relationship,bool
__str__,"Callable[[_],str]"
nickname,str
stripe_plan_id,str
percent_off,int
stripe_coupon_id,str
__str__,"Callable[[_],str]"
realm,Realm
state,str
__str__,"Callable[[_],str]"
i18n_urlpatterns,Any
stripe_create_token,"Callable[[str],stripe.Token]"
card_number,str
stripe_fixture_path,"Callable[[str, str, int],str]"
decorated_function_name,str
mocked_function_name,str
call_count,int
fixture_files_for_function,"Callable[[CallableT],List[str]]"
decorated_function,CallableT
generate_and_save_stripe_fixture,"Callable[[str, str, CallableT],Callable[[Any, Any],Any]]"
decorated_function_name,str
mocked_function_name,str
mocked_function,CallableT
_generate_and_save_stripe_fixture,"Callable[[],Any]"
args,Any
kwargs,Any
read_stripe_fixture,"Callable[[str, str],Callable[[Any, Any],Any]]"
decorated_function_name,str
mocked_function_name,str
_read_stripe_fixture,"Callable[[],Any]"
args,Any
kwargs,Any
delete_fixture_data,"Callable[[CallableT],None]"
decorated_function,CallableT
normalize_fixture_data,"Callable[[CallableT],None]"
decorated_function,CallableT
normalized_values,"Dict[str, Dict[str, str]]"
mock_stripe,"Callable[[],Callable[[CallableT],CallableT]]"
mocked_function_names,str
_mock_stripe,"Callable[[CallableT],CallableT]"
decorated_function,CallableT
wrapped,"Callable[[],Any]"
args,Any
kwargs,Any
__eq__,"Callable[[_, Any],bool]"
other,Any
process_all_billing_log_entries,"Callable[[],None]"
setUp,"Callable[[_, Mock, Mock, Mock],None]"
mock3,Mock
mock2,Mock
mock1,Mock
get_signed_seat_count_from_response,"Callable[[_, HttpResponse],Union[str, None]]"
response,HttpResponse
get_salt_from_response,"Callable[[_, HttpResponse],Union[str, None]]"
response,HttpResponse
upgrade,"Callable[[_, bool, bool, Union[Realm, None]],HttpResponse]"
invoice,bool
talk_to_stripe,bool
kwargs,Any
test_catch_stripe_errors,"Callable[[_, Mock],None]"
mock_billing_logger_error,Mock
raise_invalid_request_error,"Callable[[],None]"
raise_card_error,"Callable[[],None]"
test_billing_not_enabled,"Callable[[_],None]"
test_initial_upgrade,"Callable[[_, Mock, Mock, Mock, Mock, Mock],None]"
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_billing_page_permissions,"Callable[[_, Mock, Mock, Mock, Mock, Mock],None]"
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_upgrade_with_outdated_seat_count,"Callable[[_, Mock, Mock, Mock, Mock],None]"
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_upgrade_where_subscription_save_fails_at_first,"Callable[[_, Mock, Mock, Mock, Mock, Mock],None]"
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_upgrade_with_tampered_seat_count,"Callable[[_],None]"
test_upgrade_with_tampered_plan,"Callable[[_],None]"
test_upgrade_with_insufficient_invoiced_seat_count,"Callable[[_],None]"
test_upgrade_with_uncaught_exception,"Callable[[_, Mock],None]"
mock1,Mock
test_upgrade_billing_by_invoice,"Callable[[_, Mock, Mock, Mock, Mock, Mock, Mock],None]"
mock6,Mock
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_redirect_for_billing_home,"Callable[[_],None]"
test_get_seat_count,"Callable[[_],None]"
test_sign_string,"Callable[[_],None]"
test_payment_method_string,"Callable[[_, Mock, Mock, Mock, Mock, Mock],None]"
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_attach_discount_to_realm,"Callable[[_, Mock, Mock, Mock, Mock, Mock, Mock, Mock],None]"
mock7,Mock
mock6,Mock
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_downgrade,"Callable[[_, Mock, Mock, Mock, Mock, Mock, Mock, Mock, Mock, Mock],None]"
mock9,Mock
mock8,Mock
mock7,Mock
mock6,Mock
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_downgrade_with_no_subscription,"Callable[[_, Mock, Mock],None]"
mock2,Mock
mock1,Mock
test_downgrade_with_money_owed,"Callable[[_, Mock, Mock, Mock, Mock, Mock, Mock, Mock, Mock, Mock, Mock],None]"
mock10,Mock
mock9,Mock
mock8,Mock
mock7,Mock
mock6,Mock
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_replace_payment_source,"Callable[[_, Mock, Mock, Mock, Mock, Mock],None]"
mock5,Mock
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
test_billing_quantity_changes_end_to_end,"Callable[[_, Mock, Mock, Mock, Mock],None]"
mock4,Mock
mock3,Mock
mock2,Mock
mock1,Mock
check_billing_processor_update,"Callable[[str, int],None]"
event_type,str
quantity,int
check_subscription_save,"Callable[[stripe.Subscription, str],None]"
idempotency_key,str
test_activity_change_requires_seat_update,"Callable[[_],None]"
test_requires_billing_update_for_is_active_changes,"Callable[[_],None]"
setUp,"Callable[[_],None]"
_test_endpoint,"Callable[[_, str, str, Union[Dict[str, Any], None]],None]"
url,str
mocked_function_name,str
request_data,"Union[Dict[str, Any], None]"
test_json_endpoints,"Callable[[_],None]"
params,"List[Tuple[str, str, Dict[str, Any]]]"
add_log_entry,"Callable[[_, Realm, str, bool],RealmAuditLog]"
realm,Realm
event_type,str
requires_billing_update,bool
test_get_next_billing_log_entry,"Callable[[_],None]"
test_run_billing_processor_logic_when_no_errors,"Callable[[_],None]"
test_run_billing_processor_with_card_error,"Callable[[_, Mock],None]"
mock_billing_logger_error,Mock
test_run_billing_processor_with_uncaught_error,"Callable[[_, Mock],None]"
mock_billing_logger_error,Mock
handle,"Callable[[_],None]"
args,Any
options,Any
handle,"Callable[[_],None]"
args,Any
options,Any
get_seat_count,"Callable[[Realm],int]"
realm,Realm
sign_string,"Callable[[str],Tuple[str, str]]"
string,str
unsign_string,"Callable[[str, str],str]"
signed_string,str
salt,str
__init__,"Callable[[_, str, str],None]"
description,str
message,str
catch_stripe_errors,"Callable[[CallableT],CallableT]"
func,CallableT
wrapped,"Callable[[],Any]"
args,Any
kwargs,Any
stripe_get_customer,"Callable[[str],stripe.Customer]"
stripe_customer_id,str
stripe_get_upcoming_invoice,"Callable[[str],stripe.Invoice]"
stripe_customer_id,str
stripe_get_invoice_preview_for_downgrade,"Callable[[str, str, str],stripe.Invoice]"
stripe_customer_id,str
stripe_subscription_id,str
stripe_subscriptionitem_id,str
preview_invoice_total_for_downgrade,"Callable[[stripe.Customer],int]"
upcoming_invoice_total,"Callable[[str],int]"
stripe_customer_id,str
extract_current_subscription,"Callable[[stripe.Customer],Any]"
estimate_customer_arr,"Callable[[stripe.Customer],int]"
do_create_customer,"Callable[[UserProfile, Union[str, None], Union[Coupon, None]],stripe.Customer]"
user,UserProfile
do_replace_payment_source,"Callable[[UserProfile, str],stripe.Customer]"
user,UserProfile
stripe_token,str
do_replace_coupon,"Callable[[UserProfile, Coupon],stripe.Customer]"
user,UserProfile
coupon,Coupon
do_subscribe_customer_to_plan,"Callable[[UserProfile, stripe.Customer, str, int, float, bool],None]"
user,UserProfile
stripe_plan_id,str
seat_count,int
tax_percent,float
charge_automatically,bool
process_initial_upgrade,"Callable[[UserProfile, Plan, int, Union[str, None]],None]"
user,UserProfile
plan,Plan
seat_count,int
attach_discount_to_realm,"Callable[[UserProfile, int],None]"
user,UserProfile
percent_off,int
process_downgrade,"Callable[[UserProfile],None]"
user,UserProfile
do_set_subscription_quantity,"Callable[[Customer, int, str, int],None]"
customer,Customer
timestamp,int
idempotency_key,str
quantity,int
do_adjust_subscription_quantity,"Callable[[Customer, int, str, int],None]"
customer,Customer
timestamp,int
idempotency_key,str
delta,int
increment_subscription_quantity,"Callable[[Customer, int, str],None]"
customer,Customer
timestamp,int
idempotency_key,str
decrement_subscription_quantity,"Callable[[Customer, int, str],None]"
customer,Customer
timestamp,int
idempotency_key,str
process_billing_log_entry,"Callable[[BillingProcessor, RealmAuditLog],None]"
processor,BillingProcessor
log_row,RealmAuditLog
get_next_billing_log_entry,"Callable[[BillingProcessor],Union[RealmAuditLog, None]]"
processor,BillingProcessor
run_billing_processor_one_step,"Callable[[BillingProcessor],bool]"
processor,BillingProcessor
validate_entity,"Callable[[Union[UserProfile, RemoteZulipServer]],None]"
validate_bouncer_token_request,"Callable[[Union[UserProfile, RemoteZulipServer], bytes, int],None]"
token,bytes
kind,int
register_remote_server,"Callable[[HttpRequest, str, str, str, str, Union[str, None]],HttpResponse]"
request,HttpRequest
zulip_org_id,str
zulip_org_key,str
hostname,str
contact_email,str
register_remote_push_device,"Callable[[HttpRequest, Union[UserProfile, RemoteZulipServer], int, bytes, int, Union[str, None]],HttpResponse]"
request,HttpRequest
user_id,int
token,bytes
token_kind,int
unregister_remote_push_device,"Callable[[HttpRequest, Union[UserProfile, RemoteZulipServer], bytes, int, int, Union[str, None]],HttpResponse]"
request,HttpRequest
token,bytes
token_kind,int
user_id,int
remote_server_notify_push,"Callable[[HttpRequest, Union[UserProfile, RemoteZulipServer], Dict[str, Any]],HttpResponse]"
request,HttpRequest
get_remote_server_by_uuid,"Callable[[str],RemoteZulipServer]"
uuid,str
uuid,str
api_key,str
hostname,str
contact_email,str
__str__,"Callable[[_],str]"
server,RemoteZulipServer
user_id,int
token,bytes
__str__,"Callable[[_],str]"
i18n_urlpatterns,Any
queryset_iterator,"Callable[[QuerySet, int],Iterator[Any]]"
queryset,QuerySet
chunksize,int
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
__init__,"Callable[[_],None]"
__init__,"Callable[[_, UserProfile],None]"
user,UserProfile
get_full_path,"Callable[[_],str]"
profile_request,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
options,Any
handle,"Callable[[_],None]"
args,Any
options,Any
handle,"Callable[[_],None]"
options,Any
handle,"Callable[[_],None]"
args,Any
options,Any
create_users,"Callable[[Realm, Iterable[Tuple[str, str]], Union[int, None], Union[UserProfile, None]],None]"
realm,Realm
name_list,"Iterable[Tuple[str, str]]"
user_set,"Set[Tuple[str, str, str, bool]]"
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
options,Any
stream_dict,"Dict[str, Dict[str, Any]]"
subscriptions_list,"List[Tuple[UserProfile, Recipient]]"
status,int
jobs,"List[Tuple[int, List[List[int]], Dict[str, Any], Callable[[str],int], int]]"
zulip_stream_dict,"Dict[str, Dict[str, Any]]"
get_recipient_by_id,"Callable[[int],Recipient]"
rid,int
send_messages,"Callable[[Tuple[int, Sequence[Sequence[int]], Mapping[str, Any], Callable[[str],Any], int]],int]"
data,"Tuple[int, Sequence[Sequence[int]], Mapping[str, Any], Callable[[str],Any], int]"
huddle_members,"Dict[int, List[int]]"
recipients,"Dict[int, Tuple[int, int, Dict[str, Any]]]"
create_user_presences,"Callable[[Iterable[UserProfile]],None]"
status,int
create_user_groups,"Callable[[],None]"
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_, str, str, str, str],None]"
uuid,str
key,str
hostname,str
email,str
options,Any
handle,"Callable[[_],None]"
args,Any
options,Any
set_avatar,"Callable[[_, UserProfile, str],None]"
user,UserProfile
filename,str
add_message_formatting_conversation,"Callable[[_],None]"
staged_messages,"List[Dict[str, Any]]"
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
common_context,"Callable[[UserProfile],Dict[str, Any]]"
user,UserProfile
get_realm_from_request,"Callable[[HttpRequest],Union[Realm, None]]"
request,HttpRequest
zulip_default_context,"Callable[[HttpRequest],Dict[str, Any]]"
request,HttpRequest
get_post_parameters,"Callable[[_, HttpRequest],Dict[str, Any]]"
request,HttpRequest
clean_data_from_query_parameters,"Callable[[str],str]"
val,str
MAX_LANGUAGE_ID_LENGTH,int
query_for_ids,"Callable[[QuerySet, List[int], str],QuerySet]"
query,QuerySet
field,str
per_request_display_recipient_cache,"Dict[int, Union[str, List[Dict[str, Any]]]]"
get_display_recipient_by_id,"Callable[[int, int, Union[int, None]],Union[str, List[Dict[str, Any]]]]"
recipient_id,int
recipient_type,int
get_display_recipient,"Callable[[Recipient],Union[str, List[Dict[str, Any]]]]"
recipient,Recipient
flush_per_request_caches,"Callable[[],None]"
get_display_recipient_remote_cache,"Callable[[int, int, Union[int, None]],DisplayRecipientCacheT]"
recipient_id,int
recipient_type,int
get_realm_emoji_cache_key,"Callable[[Realm],str]"
realm,Realm
get_active_realm_emoji_cache_key,"Callable[[Realm],str]"
realm,Realm
description,str
string_id,str
deactivated,bool
emails_restricted_to_domains,bool
invite_required,bool
invite_by_admins_only,bool
disallow_disposable_email_addresses,bool
authentication_methods,BitHandler
inline_image_preview,bool
inline_url_embed_preview,bool
digest_emails_enabled,bool
send_welcome_emails,bool
mandatory_topics,bool
create_stream_by_admins_only,bool
add_emoji_by_admins_only,bool
name_changes_disabled,bool
email_changes_disabled,bool
waiting_period_threshold,int
allow_message_deleting,bool
message_content_delete_limit_seconds,int
allow_message_editing,bool
message_content_edit_limit_seconds,int
allow_edit_history,bool
allow_community_topic_editing,bool
default_twenty_four_hour_time,bool
default_language,str
org_type,int
plan_type,int
bot_creation_policy,int
icon_source,str
icon_version,int
has_seat_based_plan,bool
__str__,"Callable[[_],str]"
get_emoji,"Callable[[_],Dict[str, Dict[str, Iterable[str]]]]"
get_active_emoji,"Callable[[_],Dict[str, Dict[str, Iterable[str]]]]"
get_bot_domain,"Callable[[_],str]"
max_invites,"Callable[[_],int]"
max_invites,"Callable[[_, int],None]"
value,int
subdomain,"Callable[[_],str]"
display_subdomain,"Callable[[_],str]"
uri,"Callable[[_],str]"
host,"Callable[[_],str]"
host_for_subdomain,"Callable[[str],str]"
subdomain,str
is_zephyr_mirror_realm,"Callable[[_],bool]"
webathena_enabled,"Callable[[_],bool]"
presence_disabled,"Callable[[_],bool]"
get_realm,"Callable[[str],Realm]"
string_id,str
name_changes_disabled,"Callable[[Union[Realm, None]],bool]"
realm,Realm
domain,str
email_to_username,"Callable[[str],str]"
email,str
email_to_domain,"Callable[[str],str]"
email,str
email_allowed_for_realm,"Callable[[str, Realm],None]"
email,str
realm,Realm
get_realm_domains,"Callable[[Realm],List[Dict[str, str]]]"
realm,Realm
realm,Realm
name,str
deactivated,bool
__str__,"Callable[[_],str]"
get_realm_emoji_dicts,"Callable[[Realm, bool],Dict[str, Dict[str, Any]]]"
realm,Realm
only_active_emojis,bool
get_realm_emoji_uncached,"Callable[[Realm],Dict[str, Dict[str, Any]]]"
realm,Realm
get_active_realm_emoji_uncached,"Callable[[Realm],Dict[str, Dict[str, Any]]]"
realm,Realm
flush_realm_emoji,"Callable[[Any],None]"
sender,Any
kwargs,Any
filter_pattern_validator,"Callable[[str],None]"
value,str
filter_format_validator,"Callable[[str],None]"
value,str
realm,Realm
pattern,str
url_format_string,str
__str__,"Callable[[_],str]"
get_realm_filters_cache_key,"Callable[[int],str]"
realm_id,int
per_request_realm_filters_cache,"Dict[int, List[Tuple[str, str, int]]]"
realm_in_local_realm_filters_cache,"Callable[[int],bool]"
realm_id,int
realm_filters_for_realm,"Callable[[int],List[Tuple[str, str, int]]]"
realm_id,int
realm_filters_for_realm_remote_cache,"Callable[[int],List[Tuple[str, str, int]]]"
realm_id,int
all_realm_filters,"Callable[[],Dict[int, List[Tuple[str, str, int]]]]"
filters,"DefaultDict[int, List[Tuple[str, str, int]]]"
flush_realm_filter,"Callable[[Any],None]"
sender,Any
kwargs,Any
email,str
delivery_email,str
realm,Realm
full_name,str
short_name,str
api_key,str
pointer,int
last_pointer_updater,str
is_staff,bool
is_active,bool
is_realm_admin,bool
is_billing_admin,bool
is_guest,bool
is_bot,bool
long_term_idle,bool
is_mirror_dummy,bool
is_api_super_user,bool
enable_stream_desktop_notifications,bool
enable_stream_email_notifications,bool
enable_stream_push_notifications,bool
enable_stream_sounds,bool
enable_desktop_notifications,bool
pm_content_in_desktop_notifications,bool
enable_sounds,bool
enable_offline_email_notifications,bool
message_content_in_email_notifications,bool
enable_offline_push_notifications,bool
enable_online_push_notifications,bool
enable_digest_emails,bool
enable_login_emails,bool
realm_name_in_notifications,bool
alert_words,str
last_reminder,"Union[datetime.datetime, None]"
rate_limits,str
default_all_public_streams,bool
left_side_userlist,bool
twenty_four_hour_time,bool
default_language,str
high_contrast_mode,bool
night_mode,bool
translate_emoticons,bool
dense_mode,bool
starred_message_counts,bool
timezone,str
emojiset,str
avatar_source,str
avatar_version,int
tutorial_status,str
onboarding_steps,str
objects,UserManager
profile_data,"Callable[[_],ProfileData]"
data,ProfileData
field_data,ProfileDataElement
can_admin_user,"Callable[[_, UserProfile],bool]"
target_user,UserProfile
__str__,"Callable[[_],str]"
is_incoming_webhook,"Callable[[_],bool]"
can_create_streams,"Callable[[_],bool]"
can_subscribe_other_users,"Callable[[_],bool]"
can_access_public_streams,"Callable[[_],bool]"
can_access_all_realm_members,"Callable[[_],bool]"
major_tos_version,"Callable[[_],int]"
description,str
receives_offline_push_notifications,"Callable[[UserProfile],bool]"
user_profile,UserProfile
receives_offline_email_notifications,"Callable[[UserProfile],bool]"
user_profile,UserProfile
receives_online_notifications,"Callable[[UserProfile],bool]"
user_profile,UserProfile
receives_stream_notifications,"Callable[[UserProfile],bool]"
user_profile,UserProfile
remote_user_to_email,"Callable[[str],str]"
remote_user,str
email,str
streams,Manager
status,int
invited_as_admin,bool
streams,Manager
realm,Realm
new_email,str
old_email,str
user_profile,UserProfile
status,int
realm,Realm
kind,int
user,UserProfile
token,bytes
generate_email_token_for_stream,"Callable[[],str]"
name,str
realm,Realm
deactivated,bool
description,str
history_public_to_subscribers,bool
is_web_public,bool
is_announcement_only,bool
is_in_zephyr_realm,bool
email_token,str
__str__,"Callable[[_],str]"
is_public,"Callable[[_],bool]"
is_history_realm_public,"Callable[[_],bool]"
is_history_public_to_subscribers,"Callable[[_],bool]"
type_id,int
type,int
type_name,"Callable[[_],str]"
__str__,"Callable[[_],str]"
__str__,"Callable[[_],str]"
name,str
__str__,"Callable[[_],str]"
get_client,"Callable[[str],Client]"
name,str
get_client_cache_key,"Callable[[str],str]"
name,str
get_client_remote_cache,"Callable[[str],Client]"
name,str
get_realm_stream,"Callable[[str, int],Stream]"
stream_name,str
realm_id,int
stream_name_in_use,"Callable[[str, int],bool]"
stream_name,str
realm_id,int
get_active_streams,"Callable[[Union[Realm, None]],QuerySet]"
get_stream,"Callable[[str, Realm],Stream]"
stream_name,str
realm,Realm
bulk_get_streams,"Callable[[Realm, STREAM_NAMES],Dict[str, Any]]"
realm,Realm
stream_names,STREAM_NAMES
get_recipient_cache_key,"Callable[[int, int],str]"
type,int
type_id,int
get_recipient,"Callable[[int, int],Recipient]"
type,int
type_id,int
get_stream_recipient,"Callable[[int],Recipient]"
stream_id,int
get_personal_recipient,"Callable[[int],Recipient]"
user_profile_id,int
get_huddle_recipient,"Callable[[Set[int]],Recipient]"
get_huddle_user_ids,"Callable[[Recipient],List[int]]"
recipient,Recipient
bulk_get_recipients,"Callable[[int, List[int]],Dict[int, Any]]"
type,int
cache_key_function,"Callable[[int],str]"
type_id,int
sender,UserProfile
recipient,Recipient
subject,str
content,str
sending_client,Client
last_edit_time,"Union[datetime.datetime, None]"
has_attachment,bool
has_image,bool
has_link,bool
__str__,"Callable[[_],str]"
topic_name,"Callable[[_],str]"
set_topic_name,"Callable[[_, str],None]"
topic_name,str
is_stream_message,"Callable[[_],bool]"
get_realm,"Callable[[_],Realm]"
save_rendered_content,"Callable[[_],None]"
need_to_render_content,"Callable[[Union[str, None], Union[int, None], int],bool]"
bugdown_version,int
sent_by_human,"Callable[[_],bool]"
content_has_attachment,"Callable[[str],Match]"
content,str
content_has_image,"Callable[[str],bool]"
content,str
content_has_link,"Callable[[str],bool]"
content,str
is_status_message,"Callable[[str, str],bool]"
content,str
rendered_content,str
update_calculated_fields,"Callable[[_],None]"
pre_save_message,"Callable[[Any],None]"
sender,Any
kwargs,Any
get_context_for_message,"Callable[[Message],Sequence[Message]]"
message,Message
message,Message
sender,UserProfile
get_raw_db_rows,"Callable[[List[int]],List[Dict[str, Any]]]"
user_profile,UserProfile
message,Message
emoji_name,str
reaction_type,str
emoji_code,str
get_raw_db_rows,"Callable[[List[int]],List[Dict[str, Any]]]"
user_profile,UserProfile
flags,BitHandler
where_unread,"Callable[[],str]"
where_starred,"Callable[[],str]"
where_active_push_notification,"Callable[[],str]"
flags_list_for_flags,"Callable[[int],List[str]]"
val,int
__str__,"Callable[[_],str]"
message,Message
get_usermessage_by_message_id,"Callable[[UserProfile, int],Union[UserMessage, None]]"
user_profile,UserProfile
message_id,int
message,Message
file_name,str
path_id,str
owner,UserProfile
is_realm_public,bool
__str__,"Callable[[_],str]"
messages,Manager
messages,Manager
is_claimed,"Callable[[_],bool]"
validate_attachment_request,"Callable[[UserProfile, str],Union[bool, None]]"
user_profile,UserProfile
path_id,str
get_old_unclaimed_attachments,"Callable[[int],Sequence[Attachment]]"
weeks_ago,int
user_profile,UserProfile
recipient,Recipient
active,bool
color,str
pin_to_top,bool
desktop_notifications,bool
audible_notifications,bool
push_notifications,bool
email_notifications,bool
__str__,"Callable[[_],str]"
get_user_profile_by_id,"Callable[[int],UserProfile]"
uid,int
get_user_profile_by_email,"Callable[[str],UserProfile]"
email,str
get_user_profile_by_api_key,"Callable[[str],UserProfile]"
api_key,str
get_user,"Callable[[str, Realm],UserProfile]"
email,str
realm,Realm
get_active_user,"Callable[[str, Realm],UserProfile]"
email,str
realm,Realm
get_user_profile_by_id_in_realm,"Callable[[int, Realm],UserProfile]"
uid,int
realm,Realm
get_user_including_cross_realm,"Callable[[str, Union[Realm, None]],UserProfile]"
email,str
get_system_bot,"Callable[[str],UserProfile]"
email,str
get_user_by_id_in_realm_including_cross_realm,"Callable[[int, Realm],UserProfile]"
uid,int
realm,Realm
get_realm_user_dicts,"Callable[[int],List[Dict[str, Any]]]"
realm_id,int
active_user_ids,"Callable[[int],List[int]]"
realm_id,int
active_non_guest_user_ids,"Callable[[int],List[int]]"
realm_id,int
get_source_profile,"Callable[[str, str],Union[UserProfile, None]]"
email,str
string_id,str
get_bot_dicts_in_realm,"Callable[[Realm],List[Dict[str, Any]]]"
realm,Realm
is_cross_realm_bot_email,"Callable[[str],bool]"
email,str
huddle_hash,str
get_huddle_hash,"Callable[[List[int]],str]"
huddle_hash_cache_key,"Callable[[str],str]"
huddle_hash,str
get_huddle,"Callable[[List[int]],Huddle]"
get_huddle_backend,"Callable[[str, List[int]],Huddle]"
huddle_hash,str
clear_database,"Callable[[],None]"
model,Any
user_profile,UserProfile
client,Client
query,str
count,int
user_profile,UserProfile
user_profile,UserProfile
client,Client
status,int
status_to_string,"Callable[[int],str]"
status,int
get_status_dict_by_user,"Callable[[UserProfile],Dict[str, Dict[str, Any]]]"
user_profile,UserProfile
get_status_dict_by_realm,"Callable[[int],Dict[str, Dict[str, Any]]]"
realm_id,int
get_status_dicts_for_rows,"Callable[[List[Dict[str, Any]], Set[int]],Dict[str, Dict[str, Any]]]"
presence_rows,"List[Dict[str, Any]]"
info_row_dct,"DefaultDict[str, List[Dict[str, Any]]]"
user_statuses,"Dict[str, Dict[str, Any]]"
to_presence_dict,"Callable[[str, int, datetime.datetime, bool, bool],Dict[str, Any]]"
client_name,str
status,int
push_enabled,bool
has_push_devices,bool
status_from_string,"Callable[[str],Union[int, None]]"
status,str
realm,Realm
stream,Stream
name,str
realm,Realm
streams,Manager
description,str
get_default_stream_groups,"Callable[[Realm],List[DefaultStreamGroup]]"
realm,Realm
data,str
realm,Realm
type,int
__str__,"Callable[[_],str]"
sender,UserProfile
recipient,Recipient
subject,str
content,str
sending_client,Client
realm,Realm
delivered,bool
delivery_type,int
topic_name,"Callable[[_],str]"
set_topic_name,"Callable[[_, str],None]"
topic_name,str
__str__,"Callable[[_],str]"
realm,Realm
backfilled,bool
requires_billing_update,bool
event_type,str
__str__,"Callable[[_],str]"
user,UserProfile
hotspot,str
check_valid_user_ids,"Callable[[int, List[int], bool],Union[str, None]]"
realm_id,int
allow_deactivated,bool
realm,Realm
name,str
order,int
CHOICE_FIELD_TYPE_DATA,FieldTypeData
USER_FIELD_TYPE_DATA,FieldTypeData
FIELD_TYPE_DATA,FieldTypeData
FIELD_CONVERTERS,"Dict[int, Callable[[Any],Any]]"
FIELD_TYPE_CHOICES,"List[Tuple[int, str]]"
FIELD_TYPE_CHOICES_DICT,"Dict[str, Dict[str, Union[str, int]]]"
field_type,int
as_dict,"Callable[[_],ProfileDataElement]"
is_renderable,"Callable[[_],bool]"
__str__,"Callable[[_],str]"
custom_profile_fields_for_realm,"Callable[[int],List[CustomProfileField]]"
realm_id,int
user_profile,UserProfile
field,CustomProfileField
value,str
__str__,"Callable[[_],str]"
name,str
user_profile,UserProfile
base_url,str
token,str
interface,int
interface_name,"Callable[[_],str]"
get_bot_services,"Callable[[str],List[Service]]"
user_profile_id,str
get_service_profile,"Callable[[str, str],Service]"
user_profile_id,str
service_name,str
bot_profile,UserProfile
key,str
value,str
bot_profile,UserProfile
key,str
value,str
asynchronous,"Callable[[_],AsyncWrapperT]"
wrapper,"Callable[[HttpRequest],Union[HttpResponse, _RespondAsynchronously]]"
request,HttpRequest
args,Any
kwargs,Any
cache_wrapper,"Callable[[],ReturnT]"
args,Any
update_user_activity,"Callable[[HttpRequest, UserProfile, Union[str, None]],None]"
request,HttpRequest
user_profile,UserProfile
require_post,"Callable[[ViewFuncT],ViewFuncT]"
func,ViewFuncT
wrapper,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
require_realm_admin,"Callable[[ViewFuncT],ViewFuncT]"
func,ViewFuncT
wrapper,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
args,Any
kwargs,Any
require_billing_access,"Callable[[ViewFuncT],ViewFuncT]"
func,ViewFuncT
wrapper,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
args,Any
kwargs,Any
get_client_name,"Callable[[HttpRequest, bool],str]"
request,HttpRequest
is_browser_view,bool
user_agent,"Union[Dict[str, str], None]"
process_client,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
is_browser_view,bool
remote_server_request,bool
__init__,"Callable[[_, str],None]"
role,str
self.role,str
msg_format,"Callable[[],str]"
msg_format,"Callable[[],str]"
validate_api_key,"Callable[[HttpRequest, Union[str, None], str, bool, Union[str, None]],Union[UserProfile, RemoteZulipServer]]"
request,HttpRequest
api_key,str
is_webhook,bool
validate_account_and_subdomain,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
access_user_by_api_key,"Callable[[HttpRequest, str, Union[str, None]],UserProfile]"
request,HttpRequest
api_key,str
log_exception_to_webhook_logger,"Callable[[HttpRequest, UserProfile, Union[str, None]],None]"
request,HttpRequest
user_profile,UserProfile
api_key_only_webhook_view,"Callable[[str, Union[bool, None]],Callable[[ViewFuncT],ViewFuncT]]"
webhook_client_name,str
_wrapped_view_func,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_func_arguments,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
api_key,str
args,Any
kwargs,Any
redirect_to_login,"Callable[[str, Union[str, None], str],HttpResponseRedirect]"
next,str
redirect_field_name,str
user_passes_test,"Callable[[Callable[[HttpResponse],bool], Union[str, None], str],Callable[[ViewFuncT],ViewFuncT]]"
test_func,"Callable[[HttpResponse],bool]"
redirect_field_name,str
decorator,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
logged_in_and_active,"Callable[[HttpRequest],bool]"
request,HttpRequest
do_two_factor_login,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
do_login,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
log_view_func,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
add_logging_data,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
human_users_only,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
zulip_login_required,"Callable[[Union[ViewFuncT, None], str, str],Union[Callable[[ViewFuncT],ViewFuncT], ViewFuncT]]"
redirect_field_name,str
login_url,str
require_server_admin,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
require_server_admin_api,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
args,Any
kwargs,Any
require_non_guest_user,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
args,Any
kwargs,Any
require_non_guest_human_user,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
args,Any
kwargs,Any
authenticated_api_view,"Callable[[bool],Callable[[ViewFuncT],ViewFuncT]]"
is_webhook,bool
_wrapped_view_func,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_func_arguments,"Callable[[HttpRequest, str, Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
email,str
args,Any
kwargs,Any
authenticated_uploads_api_view,"Callable[[],Callable[[ViewFuncT],ViewFuncT]]"
_wrapped_view_func,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_func_arguments,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
api_key,str
args,Any
kwargs,Any
authenticated_rest_api_view,"Callable[[],Callable[[ViewFuncT],ViewFuncT]]"
is_webhook,bool
_wrapped_view_func,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_func_arguments,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
process_as_post,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
authenticate_log_and_execute_json,"Callable[[HttpRequest, ViewFuncT],HttpResponse]"
request,HttpRequest
view_func,ViewFuncT
args,Any
kwargs,Any
authenticated_json_post_view,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
authenticated_json_view,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
is_local_addr,"Callable[[str],bool]"
addr,str
authenticate_notify,"Callable[[HttpRequest],bool]"
request,HttpRequest
client_is_exempt_from_rate_limiting,"Callable[[HttpRequest],bool]"
request,HttpRequest
internal_notify_view,"Callable[[bool],Callable[[ViewFuncT],ViewFuncT]]"
is_tornado_view,bool
_wrapped_view_func,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_func_arguments,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
to_non_negative_int,"Callable[[str],int]"
s,str
to_not_negative_int_or_none,"Callable[[str],Union[int, None]]"
s,str
to_utc_datetime,"Callable[[str],datetime.datetime]"
timestamp,str
statsd_increment,"Callable[[str, int],_]"
counter,str
val,int
wrapped_func,"Callable[[],ReturnT]"
args,Any
kwargs,Any
rate_limit_user,"Callable[[HttpRequest, UserProfile, str],None]"
request,HttpRequest
user,UserProfile
domain,str
rate_limit,"Callable[[str],Callable[[ViewFuncT],ViewFuncT]]"
domain,str
wrapper,"Callable[[ViewFuncT],ViewFuncT]"
func,ViewFuncT
wrapped_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
return_success_on_head_request,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
zulip_otp_required,"Callable[[Any, str, str],_]"
view,Any
redirect_field_name,str
login_url,str
test,"Callable[[UserProfile],bool]"
user,UserProfile
record_request_stop_data,"Callable[[MutableMapping[str, Any]],None]"
async_request_timer_stop,"Callable[[HttpRequest],None]"
request,HttpRequest
record_request_restart_data,"Callable[[MutableMapping[str, Any]],None]"
async_request_timer_restart,"Callable[[HttpRequest],None]"
request,HttpRequest
record_request_start_data,"Callable[[MutableMapping[str, Any]],None]"
timedelta_ms,"Callable[[float],float]"
timedelta,float
format_timedelta,"Callable[[float],str]"
timedelta,float
is_slow_query,"Callable[[float, str],bool]"
time_delta,float
path,str
write_log_line,"Callable[[MutableMapping[str, Any], str, str, str, str, str, int, Union[AnyStr, None], Union[Iterable[AnyStr], None]],None]"
path,str
method,str
remote_ip,str
email,str
client_name,str
status_code,int
error_content_iter,"Union[Iterable[AnyStr], None]"
process_request,"Callable[[_, HttpRequest],None]"
request,HttpRequest
process_view,"Callable[[_, HttpRequest, ViewFuncT, List[str], Dict[str, Any]],None]"
request,HttpRequest
view_func,ViewFuncT
process_response,"Callable[[_, HttpRequest, StreamingHttpResponse],StreamingHttpResponse]"
request,HttpRequest
response,StreamingHttpResponse
process_exception,"Callable[[_, HttpRequest, Exception],Union[HttpResponse, None]]"
request,HttpRequest
exception,Exception
process_view,"Callable[[_, HttpRequest, ViewFuncT, List[str], Dict[str, Any]],None]"
request,HttpRequest
view_func,ViewFuncT
process_request,"Callable[[_, HttpRequest],None]"
request,HttpRequest
__init__,"Callable[[_, str],None]"
reason,str
self.reason,str
msg_format,"Callable[[],str]"
csrf_failure,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
reason,str
process_response,"Callable[[_, HttpRequest, HttpResponse],HttpResponse]"
request,HttpRequest
response,HttpResponse
process_exception,"Callable[[_, HttpRequest, Exception],Union[HttpResponse, None]]"
request,HttpRequest
exception,Exception
process_response,"Callable[[_, HttpRequest, HttpResponse],HttpResponse]"
request,HttpRequest
response,HttpResponse
process_response,"Callable[[_, HttpRequest, HttpResponse],HttpResponse]"
request,HttpRequest
response,HttpResponse
process_request,"Callable[[_, HttpRequest],None]"
request,HttpRequest
email_is_not_mit_mailing_list,"Callable[[str],None]"
email,str
check_subdomain_available,"Callable[[str, bool],None]"
subdomain,str
from_management_command,bool
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
clean_full_name,"Callable[[_],str]"
clean_realm_subdomain,"Callable[[_],str]"
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
clean_email,"Callable[[_],str]"
email_is_not_disposable,"Callable[[str],None]"
email,str
save,"Callable[[_, bool],UserProfile]"
commit,bool
generate_password_reset_url,"Callable[[UserProfile, PasswordResetTokenGenerator],str]"
user_profile,UserProfile
token_generator,PasswordResetTokenGenerator
save,"Callable[[_, Union[bool, None], str, str, bool, PasswordResetTokenGenerator, Union[str, None], HttpRequest, Union[str, None], Union[Dict[str, Any], None]],None]"
subject_template_name,str
email_template_name,str
use_https,bool
token_generator,PasswordResetTokenGenerator
request,HttpRequest
extra_email_context,"Union[Dict[str, Any], None]"
add_prefix,"Callable[[_, str],str]"
field_name,str
to_python,"Callable[[_, str],List[str]]"
emails,str
validate,"Callable[[_, List[str]],None]"
add_deployment_metadata,"Callable[[Dict[str, Any]],None]"
add_request_metadata,"Callable[[Dict[str, Any], HttpRequest],None]"
request,HttpRequest
__init__,"Callable[[_],None]"
emit,"Callable[[_, logging.LogRecord],None]"
get_device_browser,"Callable[[str],Union[str, None]]"
user_agent,str
get_device_os,"Callable[[str],Union[str, None]]"
user_agent,str
email_on_new_login,"Callable[[Any, UserProfile, Any],None]"
sender,Any
user,UserProfile
request,Any
kwargs,Any
flush_cache,"Callable[[AppConfig],None]"
sender,AppConfig
kwargs,Any
name,str
ready,"Callable[[_],None]"
test_create_if_missing_realm_internal_bots,"Callable[[_],None]"
check_test_bot_exists,"Callable[[],bool]"
setUp,"Callable[[_],None]"
test_process_success_response,"Callable[[_],None]"
__init__,"Callable[[_, str],None]"
text,str
make_response,"Callable[[str],requests.Response]"
text,str
test_build_bot_request,"Callable[[_],None]"
test_process_success,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_build_bot_request_stream_message,"Callable[[_],None]"
test_build_bot_request_private_message,"Callable[[_, mock.Mock, mock.Mock],None]"
test_process_success,"Callable[[_],None]"
add,"Callable[[Any, Any],Any]"
x,Any
y,Any
to_dict,"Callable[[Iterable[Tuple[Any, Any]]],Dict[Any, Any]]"
v,"Iterable[Tuple[Any, Any]]"
_pre_setup,"Callable[[_],None]"
_post_teardown,"Callable[[_],None]"
check_signature,"Callable[[_, str, T, _],None]"
signature,str
retval,T
args,Any
kwargs,Any
test_empty,"Callable[[_],None]"
empty_func,"Callable[[],None]"
test_basic,"Callable[[_],None]"
test_list,"Callable[[_],None]"
test_dict,"Callable[[_],None]"
test_tuple,"Callable[[_],None]"
test_class,"Callable[[_],None]"
test_sequence,"Callable[[_],None]"
test_mapping,"Callable[[_],None]"
to_A,"Callable[[Iterable[Tuple[Any, Any]]],A]"
v,"Iterable[Tuple[Any, Any]]"
test_s3_source_type,"Callable[[_],None]"
get_file_path_urlpart,"Callable[[str, str],str]"
uri,str
size,str
test_external_source_type,"Callable[[_],None]"
run_test_with_image_url,"Callable[[str],None]"
image_url,str
test_local_file_type,"Callable[[_],None]"
get_file_path_urlpart,"Callable[[str, str],str]"
uri,str
size,str
test_with_static_files,"Callable[[_],None]"
test_with_thumbor_disabled,"Callable[[_],None]"
test_with_different_THUMBOR_URL,"Callable[[_],None]"
test_with_different_sizes,"Callable[[_],None]"
get_file_path_urlpart,"Callable[[str, str],str]"
uri,str
size,str
create_test_emoji,"Callable[[_, str, UserProfile],RealmEmoji]"
name,str
author,UserProfile
create_test_emoji_with_no_author,"Callable[[_, str, Realm],RealmEmoji]"
name,str
realm,Realm
test_list,"Callable[[_],None]"
test_list_no_author,"Callable[[_],None]"
test_list_admins_only,"Callable[[_],None]"
test_upload,"Callable[[_],None]"
test_realm_emoji_repr,"Callable[[_],None]"
test_upload_exception,"Callable[[_],None]"
test_upload_uppercase_exception,"Callable[[_],None]"
test_upload_admins_only,"Callable[[_],None]"
test_upload_anyone,"Callable[[_],None]"
test_emoji_upload_by_guest_user,"Callable[[_],None]"
test_delete,"Callable[[_],None]"
test_delete_no_author,"Callable[[_],None]"
test_delete_admins_only,"Callable[[_],None]"
test_delete_admin_or_author,"Callable[[_],None]"
test_delete_exception,"Callable[[_],None]"
test_multiple_upload,"Callable[[_],None]"
test_emoji_upload_file_size_error,"Callable[[_],None]"
test_upload_already_existed_emoji,"Callable[[_],None]"
test_reupload,"Callable[[_],None]"
test_failed_file_upload,"Callable[[_],None]"
test_check_admin_realm_emoji,"Callable[[_],None]"
test_check_admin_different_realm_emoji,"Callable[[_],None]"
__init__,"Callable[[_],None]"
self.consumers,"Dict[str, Callable[[Dict[str, Any]],None]]"
self.queue,"List[Tuple[str, Any]]"
register_json_consumer,"Callable[[_, str, Callable[[Dict[str, Any]],None]],None]"
queue_name,str
callback,"Callable[[Dict[str, Any]],None]"
start_consuming,"Callable[[_],None]"
drain_queue,"Callable[[_, str, bool],List[Event]]"
queue_name,str
json,bool
test_slow_queries_worker,"Callable[[_],None]"
test_missed_message_worker,"Callable[[_],None]"
is_alive,"Callable[[_],bool]"
start,"Callable[[_],None]"
cancel,"Callable[[_],None]"
test_mirror_worker,"Callable[[_],None]"
test_email_sending_worker_retries,"Callable[[_],None]"
fake_publish,"Callable[[str, Dict[str, Any], Callable[[Any],None]],None]"
queue_name,str
processor,"Callable[[Any],None]"
test_signups_worker_retries,"Callable[[_],None]"
fake_publish,"Callable[[str, Dict[str, Any], Callable[[Any],None]],None]"
queue_name,str
processor,"Callable[[Any],None]"
test_signups_worker_existing_member,"Callable[[_],None]"
test_signups_bad_request,"Callable[[_],None]"
test_invites_worker,"Callable[[_],None]"
test_UserActivityWorker,"Callable[[_],None]"
test_error_handling,"Callable[[_],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
test_worker_noname,"Callable[[_],None]"
__init__,"Callable[[_],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
test_worker_noconsume,"Callable[[_],None]"
__init__,"Callable[[_],None]"
test_get_active_worker_queues,"Callable[[_],None]"
destroy_uploads,"Callable[[],None]"
test_rest_endpoint,"Callable[[_],None]"
test_mobile_api_endpoint,"Callable[[_],None]"
test_upload_file_with_supplied_mimetype,"Callable[[_],None]"
test_filename_encoding,"Callable[[_],None]"
test_file_too_big_failure,"Callable[[_],None]"
test_multiple_upload_failure,"Callable[[_],None]"
test_no_file_upload_failure,"Callable[[_],None]"
test_file_upload_authed,"Callable[[_],None]"
test_file_download_unauthed,"Callable[[_],None]"
test_removed_file_download,"Callable[[_],None]"
test_non_existing_file_download,"Callable[[_],None]"
test_delete_old_unclaimed_attachments,"Callable[[_],None]"
test_attachment_url_without_upload,"Callable[[_],None]"
test_multiple_claim_attachments,"Callable[[_],None]"
test_multiple_claim_attachments_different_owners,"Callable[[_],None]"
test_check_attachment_reference_update,"Callable[[_],None]"
test_file_name,"Callable[[_],None]"
test_realm_quota,"Callable[[_],None]"
test_cross_realm_file_access,"Callable[[_],None]"
create_user,"Callable[[str, str],UserProfile]"
email,str
realm_id,str
test_file_download_authorization_invite_only,"Callable[[_],None]"
assert_cannot_access_file,"Callable[[str],None]"
user_email,str
test_file_download_authorization_invite_only_with_shared_history,"Callable[[_],None]"
assert_cannot_access_file,"Callable[[str],None]"
user_email,str
test_multiple_message_attachment_file_download,"Callable[[_],None]"
test_file_download_authorization_public,"Callable[[_],None]"
test_serve_local,"Callable[[_],None]"
check_xsend_links,"Callable[[str, str, str],None]"
name,str
name_str_for_test,str
content_disposition,str
tearDown,"Callable[[_],None]"
test_get_avatar_field,"Callable[[_],None]"
test_avatar_url,"Callable[[_],None]"
backend,ZulipUploadBackend
test_multiple_upload_failure,"Callable[[_],None]"
test_no_file_upload_failure,"Callable[[_],None]"
test_get_gravatar_avatar,"Callable[[_],None]"
test_get_user_avatar,"Callable[[_],None]"
test_get_user_avatar_medium,"Callable[[_],None]"
test_non_valid_user_avatar,"Callable[[_],None]"
test_valid_avatars,"Callable[[_],None]"
test_copy_avatar_image,"Callable[[_],None]"
test_delete_avatar_image,"Callable[[_],None]"
test_invalid_avatars,"Callable[[_],None]"
test_delete_avatar,"Callable[[_],None]"
test_avatar_upload_file_size_error,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
test_resize_emoji,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
test_multiple_upload_failure,"Callable[[_],None]"
test_no_file_upload_failure,"Callable[[_],None]"
test_no_admin_user_upload,"Callable[[_],None]"
test_get_gravatar_icon,"Callable[[_],None]"
test_get_realm_icon,"Callable[[_],None]"
test_valid_icons,"Callable[[_],None]"
test_invalid_icons,"Callable[[_],None]"
test_delete_icon,"Callable[[_],None]"
test_realm_icon_version,"Callable[[_],None]"
test_realm_icon_upload_file_size_error,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
test_file_upload_local,"Callable[[_],None]"
test_delete_message_image_local,"Callable[[_],None]"
test_emoji_upload_local,"Callable[[_],None]"
test_get_emoji_url_local,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
test_file_upload_s3,"Callable[[_],None]"
test_file_upload_s3_with_undefined_content_type,"Callable[[_],None]"
test_message_image_delete_s3,"Callable[[_],None]"
test_message_image_delete_when_file_doesnt_exist,"Callable[[_],None]"
test_file_upload_authed,"Callable[[_],None]"
test_upload_avatar_image,"Callable[[_],None]"
test_copy_avatar_image,"Callable[[_],None]"
test_delete_avatar_image,"Callable[[_],None]"
test_get_realm_for_filename,"Callable[[_],None]"
test_get_realm_for_filename_when_key_doesnt_exist,"Callable[[_],None]"
test_upload_realm_icon_image,"Callable[[_],None]"
test_upload_emoji_image,"Callable[[_],None]"
test_get_emoji_url,"Callable[[_],None]"
test_upload_titles,"Callable[[_],None]"
test_file_name,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_currently_used_upload_space,"Callable[[_],None]"
test_image_do_not_rotate,"Callable[[_],None]"
test_image_rotate,"Callable[[_],None]"
find_dict,"Callable[[Iterable[Dict[K, V]], K, V],Dict[K, V]]"
lst,"Iterable[Dict[K, V]]"
k,K
v,V
test_do_change_is_admin,"Callable[[_],None]"
test_get_admin_users,"Callable[[_],None]"
test_updating_non_existent_user,"Callable[[_],None]"
test_admin_api,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_user_cannot_promote_to_admin,"Callable[[_],None]"
test_admin_user_can_change_full_name,"Callable[[_],None]"
test_non_admin_cannot_change_full_name,"Callable[[_],None]"
test_admin_cannot_set_long_full_name,"Callable[[_],None]"
test_admin_cannot_set_short_full_name,"Callable[[_],None]"
test_admin_cannot_set_full_name_with_invalid_characters,"Callable[[_],None]"
test_access_user_by_id,"Callable[[_],None]"
test_change_regular_member_to_guest,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_change_guest_to_regular_member,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_change_admin_to_guest,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_change_guest_to_admin,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_admin_user_can_change_profile_data,"Callable[[_],None]"
test_non_admin_user_cannot_change_profile_data,"Callable[[_],None]"
test_create_user_backend,"Callable[[_],None]"
test_get_emails_from_user_ids,"Callable[[_],None]"
test_valid_user_id,"Callable[[_],None]"
invalid_uid,Any
test_cache_invalidation,"Callable[[_],None]"
test_user_ids_to_users,"Callable[[_],None]"
test_bulk_get_users,"Callable[[_],None]"
test_get_accounts_for_email,"Callable[[_],None]"
check_account_present_in_accounts,"Callable[[UserProfile, List[Dict[str, Union[str, None]]]],None]"
user,UserProfile
accounts,"List[Dict[str, Union[str, None]]]"
test_get_source_profile,"Callable[[_],None]"
test_copy_user_settings,"Callable[[_],None]"
test_get_user_by_id_in_realm_including_cross_realm,"Callable[[_],None]"
test_basics,"Callable[[_],None]"
test_api,"Callable[[_],None]"
test_api_with_nonexistent_user,"Callable[[_],None]"
test_api_with_insufficient_permissions,"Callable[[_],None]"
test_clear_scheduled_jobs,"Callable[[_],None]"
test_stream_recipient_info,"Callable[[_],None]"
test_get_recipient_info_invalid_recipient_type,"Callable[[_],None]"
test_client_gravatar_option,"Callable[[_],None]"
get_hamlet_avatar,"Callable[[bool],Union[str, None]]"
client_gravatar,bool
common_update_pointer,"Callable[[_, str, int],None]"
email,str
pointer,int
common_get_profile,"Callable[[_, str],Dict[str, Any]]"
user_id,str
test_get_pointer,"Callable[[_],None]"
test_cache_behavior,"Callable[[_],None]"
test_get_user_profile,"Callable[[_],None]"
test_api_get_empty_profile,"Callable[[_],None]"
test_profile_with_pointer,"Callable[[_],None]"
test_get_all_profiles_avatar_urls,"Callable[[_],None]"
test_get_openapi_fixture,"Callable[[_],None]"
test_get_openapi_parameters,"Callable[[_],None]"
test_validate_against_openapi_schema,"Callable[[_],None]"
test_to_python_type,"Callable[[_],None]"
test_live_reload,"Callable[[_],None]"
test_encode_decode,"Callable[[_],None]"
test_get_missed_message_token,"Callable[[_],None]"
get_token,"Callable[[str],str]"
address,str
test_receive_stream_email_messages_success,"Callable[[_],None]"
incoming_valid_message,Any
test_receive_stream_email_messages_blank_subject_success,"Callable[[_],None]"
incoming_valid_message,Any
test_receive_private_stream_email_messages_success,"Callable[[_],None]"
incoming_valid_message,Any
test_receive_stream_email_messages_empty_body,"Callable[[_],None]"
incoming_valid_message,Any
test_receive_missed_personal_message_email_messages,"Callable[[_],None]"
incoming_valid_message,Any
test_receive_missed_huddle_message_email_messages,"Callable[[_],None]"
incoming_valid_message,Any
test_missed_message,"Callable[[_],None]"
test_encode_email_addr,"Callable[[_],None]"
test_reply_is_extracted_from_plain,"Callable[[_],None]"
incoming_valid_message,Any
test_reply_is_extracted_from_html,"Callable[[_],None]"
incoming_valid_message,Any
test_success,"Callable[[_],None]"
test_error_no_recipient,"Callable[[_],None]"
send_private_message,"Callable[[_],str]"
send_offline_message,"Callable[[_, str, str, mock.Mock],HttpResponse]"
to_address,str
sender,str
check_queue_json_publish,"Callable[[str, Union[Mapping[str, Any], str], Union[Callable[[Any],None], None]],None]"
queue_name,str
event,"Union[Mapping[str, Any], str]"
processor,"Union[Callable[[Any],None], None]"
test_success_stream,"Callable[[_],None]"
test_error_to_stream_with_wrong_address,"Callable[[_],None]"
test_success_to_private,"Callable[[_],None]"
test_using_mm_address_twice,"Callable[[_],None]"
test_wrong_missed_email_private_message,"Callable[[_],None]"
test_send_login_emails_if_send_login_email_setting_is_true,"Callable[[_],None]"
test_dont_send_login_emails_if_send_login_emails_is_false,"Callable[[_],None]"
test_dont_send_login_emails_for_new_user_registration_logins,"Callable[[_],None]"
test_without_path_info_dont_send_login_emails_for_new_user_registration_logins,"Callable[[_],None]"
test_enable_login_emails_user_setting,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_get_browser_on_new_login,"Callable[[_],None]"
test_get_os_on_new_login,"Callable[[_],None]"
test_notify_of_new_user_internally,"Callable[[_],None]"
test_notify_realm_of_new_user,"Callable[[_],None]"
test_generate_and_clear_email_log,"Callable[[_],None]"
test_forward_address_details,"Callable[[_],None]"
check_well_formed_change_settings_response,"Callable[[_, Dict[str, Any]],None]"
check_for_toggle_param,"Callable[[_, str, str],None]"
pattern,str
param,str
check_for_toggle_param_patch,"Callable[[_, str, str],None]"
pattern,str
param,str
test_successful_change_settings,"Callable[[_],None]"
test_illegal_name_changes,"Callable[[_],None]"
test_illegal_characters_in_name_changes,"Callable[[_],None]"
test_change_email_to_disposable_email,"Callable[[_],None]"
test_notify_settings,"Callable[[_],None]"
test_toggling_boolean_user_display_settings,"Callable[[_],None]"
test_enter_sends_setting,"Callable[[_],None]"
test_wrong_old_password,"Callable[[_],None]"
test_change_password_ldap_backend,"Callable[[_],None]"
test_changing_nothing_returns_error,"Callable[[_],None]"
do_test_change_user_display_setting,"Callable[[_, str],None]"
setting_name,str
test_change_user_display_setting,"Callable[[_],None]"
do_change_emojiset,"Callable[[_, str],HttpResponse]"
emojiset,str
test_emojiset,"Callable[[_],None]"
test_update_api_key,"Callable[[_],None]"
test_sender_ids,"Callable[[_],None]"
assertEqual,"Callable[[_, Any, Any, str],None]"
first,Any
second,Any
msg,str
test_message_conversion_fixtures,"Callable[[_],None]"
users,"List[Dict[str, Any]]"
channel_map,"Dict[str, Tuple[str, int]]"
test_mentioned_data,"Callable[[_],None]"
test_has_link,"Callable[[_],None]"
test_day1_email_context,"Callable[[_],None]"
test_day1_email_ldap_login_credentials,"Callable[[_],None]"
test_followup_emails_count,"Callable[[_],None]"
normalize_string,"Callable[[_, str],str]"
s,str
_test_cases,"Callable[[_, List[str], int, str, str, bool, bool, bool, Union[List[str], None], str],None]"
msg_id,int
body,str
email_subject,str
send_as_user,bool
verify_html_body,bool
show_message_content,bool
verify_body_does_not_include,"Union[List[str], None]"
trigger,str
_realm_name_in_missed_message_email_subject,"Callable[[_, bool, MagicMock],None]"
realm_name_in_notifications,bool
mock_random_token,MagicMock
_extra_context_in_missed_stream_messages_mention,"Callable[[_, bool, MagicMock, bool],None]"
send_as_user,bool
mock_random_token,MagicMock
show_message_content,bool
_extra_context_in_missed_stream_messages_email_notify,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
_extra_context_in_missed_stream_messages_mention_two_senders,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
_extra_context_in_personal_missed_stream_messages,"Callable[[_, bool, MagicMock, bool],None]"
send_as_user,bool
mock_random_token,MagicMock
show_message_content,bool
_reply_to_email_in_personal_missed_stream_messages,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
_reply_warning_in_personal_missed_stream_messages,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
_extra_context_in_huddle_missed_stream_messages_two_others,"Callable[[_, bool, MagicMock, bool],None]"
send_as_user,bool
mock_random_token,MagicMock
show_message_content,bool
_extra_context_in_huddle_missed_stream_messages_three_others,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
_extra_context_in_huddle_missed_stream_messages_many_others,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
_deleted_message_in_missed_stream_messages,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
_deleted_message_in_personal_missed_stream_messages,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
_deleted_message_in_huddle_missed_stream_messages,"Callable[[_, bool, MagicMock],None]"
send_as_user,bool
mock_random_token,MagicMock
test_realm_name_in_notifications,"Callable[[_],None]"
test_message_content_disabled_in_missed_message_notifications,"Callable[[_],None]"
test_extra_context_in_missed_stream_messages_as_user,"Callable[[_],None]"
test_extra_context_in_missed_stream_messages,"Callable[[_],None]"
test_extra_context_in_missed_stream_messages_as_user_two_senders,"Callable[[_],None]"
test_extra_context_in_missed_stream_messages_two_senders,"Callable[[_],None]"
test_reply_to_email_in_personal_missed_stream_messages,"Callable[[_],None]"
test_extra_context_in_missed_stream_messages_email_notify_as_user,"Callable[[_],None]"
test_extra_context_in_missed_stream_messages_email_notify,"Callable[[_],None]"
test_reply_warning_in_personal_missed_stream_messages,"Callable[[_],None]"
test_extra_context_in_personal_missed_stream_messages_as_user,"Callable[[_],None]"
test_extra_context_in_personal_missed_stream_messages,"Callable[[_],None]"
test_extra_context_in_huddle_missed_stream_messages_two_others_as_user,"Callable[[_],None]"
test_extra_context_in_huddle_missed_stream_messages_two_others,"Callable[[_],None]"
test_extra_context_in_huddle_missed_stream_messages_three_others_as_user,"Callable[[_],None]"
test_extra_context_in_huddle_missed_stream_messages_three_others,"Callable[[_],None]"
test_extra_context_in_huddle_missed_stream_messages_many_others_as_user,"Callable[[_],None]"
test_extra_context_in_huddle_missed_stream_messages_many_others,"Callable[[_],None]"
test_deleted_message_in_missed_stream_messages_as_user,"Callable[[_],None]"
test_deleted_message_in_missed_stream_messages,"Callable[[_],None]"
test_deleted_message_in_personal_missed_stream_messages_as_user,"Callable[[_],None]"
test_deleted_message_in_personal_missed_stream_messages,"Callable[[_],None]"
test_deleted_message_in_huddle_missed_stream_messages_as_user,"Callable[[_],None]"
test_deleted_message_in_huddle_missed_stream_messages,"Callable[[_],None]"
test_realm_emoji_in_missed_message,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_emojiset_in_missed_message,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_stream_link_in_missed_message,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_multiple_missed_personal_messages,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_multiple_stream_messages,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_multiple_stream_messages_and_mentions,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_message_access_in_emails,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_stream_mentions_multiple_people,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_multiple_stream_messages_different_topics,"Callable[[_, MagicMock],None]"
mock_random_token,MagicMock
test_relative_to_full_url,"Callable[[_],None]"
test_fix_emoji,"Callable[[_],None]"
test_home,"Callable[[_],None]"
test_home_under_2fa_without_otp_device,"Callable[[_],None]"
test_home_under_2fa_with_otp_device,"Callable[[_],None]"
test_num_queries_for_realm_admin,"Callable[[_],None]"
test_num_queries_with_streams,"Callable[[_],None]"
_get_home_page,"Callable[[_],HttpResponse]"
kwargs,Any
_get_page_params,"Callable[[_, HttpResponse],Dict[str, Any]]"
result,HttpResponse
_sanity_check,"Callable[[_, HttpResponse],None]"
result,HttpResponse
test_terms_of_service,"Callable[[_],None]"
test_terms_of_service_first_time_template,"Callable[[_],None]"
test_accept_terms_of_service,"Callable[[_],None]"
test_bad_narrow,"Callable[[_],None]"
test_bad_pointer,"Callable[[_],None]"
test_topic_narrow,"Callable[[_],None]"
test_notifications_stream,"Callable[[_],None]"
create_bot,"Callable[[_, UserProfile, str, str],UserProfile]"
owner,UserProfile
bot_email,str
bot_name,str
create_non_active_user,"Callable[[_, Realm, str, str],UserProfile]"
realm,Realm
email,str
name,str
test_signup_notifications_stream,"Callable[[_],None]"
test_people,"Callable[[_],None]"
test_new_stream,"Callable[[_],None]"
test_invites_by_admins_only,"Callable[[_],None]"
test_show_invites_for_guest_users,"Callable[[_],None]"
test_show_billing,"Callable[[_],None]"
test_show_plans,"Callable[[_],None]"
test_desktop_home,"Callable[[_],None]"
test_apps_view,"Callable[[_],None]"
test_generate_204,"Callable[[_],None]"
test_message_sent_time,"Callable[[_],None]"
test_handlebars_compile_error,"Callable[[_],None]"
test_subdomain_homepage,"Callable[[_],None]"
send_test_message,"Callable[[_, str, str, str, str],None]"
content,str
sender_name,str
stream_name,str
topic_name,str
soft_activate_and_get_unread_count,"Callable[[_, str, str],int]"
stream,str
topic,str
test_unread_count_user_soft_deactivation,"Callable[[_],None]"
test_multiple_user_soft_deactivations,"Callable[[_],None]"
test_url_language,"Callable[[_],None]"
test_translation_data,"Callable[[_],None]"
test_emojiset,"Callable[[_],None]"
test_list_realm_domains,"Callable[[_],None]"
test_not_realm_admin,"Callable[[_],None]"
test_create_realm_domain,"Callable[[_],None]"
test_patch_realm_domain,"Callable[[_],None]"
test_delete_realm_domain,"Callable[[_],None]"
test_delete_all_realm_domains,"Callable[[_],None]"
test_email_allowed_for_realm,"Callable[[_],None]"
test_realm_realm_domains_uniqueness,"Callable[[_],None]"
test_validate_domain,"Callable[[_],None]"
args,Any
kwargs,Any
test_enqueue_notifications,"Callable[[_],None]"
tornado_call,"Callable[[_, Callable[[HttpRequest, UserProfile],HttpResponse], UserProfile, Dict[str, Any]],HttpResponse]"
view_func,"Callable[[HttpRequest, UserProfile],HttpResponse]"
user_profile,UserProfile
test_stream_watchers,"Callable[[_],None]"
test_end_to_end_missedmessage_hook,"Callable[[_],None]"
change_subscription_properties,"Callable[[UserProfile, Stream, Subscription, Dict[str, bool]],None]"
user_profile,UserProfile
stream,Stream
sub,Subscription
test_persistent_queue_filename,"Callable[[_],None]"
test_compatibility,"Callable[[_],None]"
setUp,"Callable[[_],None]"
_set_realm_message_retention_value,"Callable[[str, int],Realm]"
realm_str,str
retention_period,int
_change_messages_pub_date,"Callable[[List[int], datetime],Any]"
pub_date,datetime
_make_mit_messages,"Callable[[_, int, datetime],Any]"
message_quantity,int
pub_date,datetime
test_expired_messages_result_type,"Callable[[_],None]"
test_no_expired_messages,"Callable[[_],None]"
test_expired_messages_in_each_realm,"Callable[[_],None]"
test_expired_messages_in_one_realm,"Callable[[_],None]"
setUp,"Callable[[_],None]"
_create_attachments,"Callable[[_],None]"
_check_messages_before_archiving,"Callable[[_, List[int]],Tuple[List[int], List[int]]]"
_check_messages_after_archiving,"Callable[[_, List[int], List[int], List[int]],None]"
test_personal_messages_archiving,"Callable[[_],None]"
test_stream_messages_archiving,"Callable[[_],None]"
test_archiving_messages_second_time,"Callable[[_],None]"
test_archiving_messages_with_attachment,"Callable[[_],None]"
test_archiving_message_with_shared_attachment,"Callable[[_],None]"
test_user_ids_muting_topic,"Callable[[_],None]"
mute_user,"Callable[[UserProfile],None]"
user,UserProfile
test_add_muted_topic,"Callable[[_],None]"
test_remove_muted_topic,"Callable[[_],None]"
test_muted_topic_add_invalid,"Callable[[_],None]"
test_muted_topic_remove_invalid,"Callable[[_],None]"
test_datetime_and_timestamp_conversions,"Callable[[_],None]"
test_convert_to_UTC,"Callable[[_],None]"
test_enforce_UTC,"Callable[[_],None]"
__init__,"Callable[[_, int, Union[Any, None]],None]"
status_code,int
request_exception_error,"Callable[[Any, Any, Any],Any]"
http_method,Any
final_url,Any
data,Any
request_kwargs,Any
timeout_error,"Callable[[Any, Any, Any],Any]"
http_method,Any
final_url,Any
data,Any
request_kwargs,Any
connection_error,"Callable[[Any, Any, Any],Any]"
http_method,Any
final_url,Any
data,Any
request_kwargs,Any
setUp,"Callable[[_],None]"
test_successful_request,"Callable[[_, mock.Mock],None]"
test_retry_request,"Callable[[mock.Mock],None]"
test_fail_request,"Callable[[_, mock.Mock],None]"
test_error_handling,"Callable[[_],None]"
helper,"Callable[[Any, str],None]"
side_effect,Any
error_text,str
test_request_exception,"Callable[[_, mock.Mock, mock.Mock, mock.Mock],None]"
setUp,"Callable[[_],None]"
test_pm_to_outgoing_webhook_bot,"Callable[[_, mock.Mock],None]"
test_stream_message_to_outgoing_webhook_bot,"Callable[[_, mock.Mock],None]"
test_webathena_kerberos_login,"Callable[[_],None]"
post,"Callable[[Any],HttpResponse]"
subdomain,Any
kwargs,Any
ccache_mock,"Callable[[],Any]"
kwargs,Any
ssh_mock,"Callable[[],Any]"
kwargs,Any
mirror_mock,"Callable[[],Any]"
logging_mock,"Callable[[],Any]"
kerberos_alter_egos_mock,"Callable[[],Any]"
remove_folder,"Callable[[str],None]"
path,str
__init__,"Callable[[_, Dict[str, Any], int],None]"
status_code,int
test_get_slack_api_data,"Callable[[_, mock.Mock],None]"
test_build_zerver_realm,"Callable[[_],None]"
test_realm,"List[Dict[str, Any]]"
test_get_admin,"Callable[[_],None]"
test_get_timezone,"Callable[[_],None]"
test_users_to_zerver_userprofile,"Callable[[_, mock.Mock],None]"
test_build_defaultstream,"Callable[[_],None]"
test_build_pm_recipient_sub_from_user,"Callable[[_],None]"
test_build_subscription,"Callable[[_],None]"
zerver_subscription,"List[Dict[str, Any]]"
test_channels_to_zerver_stream,"Callable[[_, mock.Mock],None]"
test_slack_workspace_to_realm,"Callable[[_, mock.Mock, mock.Mock],None]"
user_list,"List[Dict[str, Any]]"
test_get_message_sending_user,"Callable[[_],None]"
test_build_zerver_message,"Callable[[_],None]"
zerver_usermessage,"List[Dict[str, Any]]"
test_channel_message_to_zerver_message,"Callable[[_, mock.Mock],None]"
all_messages,"List[Dict[str, Any]]"
zerver_usermessage,"List[Dict[str, Any]]"
subscriber_map,"Dict[int, Set[int]]"
added_channels,"Dict[str, Tuple[str, int]]"
test_convert_slack_workspace_messages,"Callable[[_, mock.Mock, mock.Mock],None]"
added_channels,"Dict[str, Tuple[str, int]]"
user_list,"List[Dict[str, Any]]"
test_slack_import_to_existing_database,"Callable[[_, mock.Mock, mock.Mock, mock.Mock, mock.Mock, mock.Mock],None]"
test_message_files,"Callable[[_],None]"
zerver_attachment,"List[Dict[str, Any]]"
uploads_list,"List[Dict[str, Any]]"
setUp,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
bounce_request,"Callable[[_],HttpResponse]"
args,Any
kwargs,Any
get_generic_payload,"Callable[[_, str],Dict[str, Any]]"
method,str
test_unregister_remote_push_user_params,"Callable[[_],None]"
test_register_remote_push_user_paramas,"Callable[[_],None]"
test_remote_push_user_endpoints,"Callable[[_],None]"
test_invalid_apns_token,"Callable[[_],None]"
test_push_bouncer_api,"Callable[[_, Any],None]"
mock,Any
setUp,"Callable[[_],None]"
get_message,"Callable[[_, int, int],Message]"
type,int
type_id,int
bounce_request,"Callable[[_],HttpResponse]"
args,Any
kwargs,Any
test_end_to_end,"Callable[[_],None]"
test_end_to_end_connection_error,"Callable[[_],None]"
retry,"Callable[[Any, Any, Any],None]"
queue_name,Any
event,Any
processor,Any
test_disabled_notifications,"Callable[[_],None]"
test_read_message,"Callable[[_],None]"
test_send_notifications_to_bouncer,"Callable[[_],None]"
test_non_bouncer_push,"Callable[[_],None]"
test_send_remove_notifications_to_bouncer,"Callable[[_],None]"
test_non_bouncer_push_remove,"Callable[[_],None]"
test_user_message_does_not_exist,"Callable[[_],None]"
test_user_message_soft_deactivated,"Callable[[_],None]"
send,"Callable[[_, Union[List[PushDeviceToken], None], Dict[str, Any]],None]"
devices,"Union[List[PushDeviceToken], None]"
test_get_apns_client,"Callable[[_],None]"
test_not_configured,"Callable[[_],None]"
test_success,"Callable[[_],None]"
test_http_retry,"Callable[[_],None]"
test_http_retry_eventually_fails,"Callable[[_],None]"
test_modernize_apns_payload,"Callable[[_],None]"
test_get_apns_payload_personal_message,"Callable[[_],None]"
test_get_apns_payload_huddle_message,"Callable[[_],None]"
test_get_apns_payload_redacted_content,"Callable[[_],None]"
test_get_gcm_payload,"Callable[[_],None]"
test_get_gcm_payload_personal,"Callable[[_],None]"
test_get_gcm_payload_stream_notifications,"Callable[[_],None]"
test_get_gcm_payload_redacted_content,"Callable[[_],None]"
test_send_notifications_to_bouncer,"Callable[[_, mock.MagicMock],None]"
__init__,"Callable[[_, int, str],None]"
status,int
content,str
test_500_error,"Callable[[_, mock.MagicMock],None]"
test_400_error,"Callable[[_, mock.MagicMock],None]"
test_400_error_invalid_server_key,"Callable[[_],None]"
test_400_error_when_content_is_not_serializable,"Callable[[_, mock.MagicMock],None]"
test_300_error,"Callable[[_, mock.MagicMock],None]"
test_when_kind_is_none,"Callable[[_],None]"
test_when_kind_is_not_none,"Callable[[_],None]"
test_push_api,"Callable[[_],None]"
setUp,"Callable[[_],None]"
kwargs,Any
test_gcm_is_none,"Callable[[_, mock.MagicMock],None]"
test_json_request_raises_ioerror,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_success,"Callable[[_, mock.MagicMock, mock.MagicMock, mock.MagicMock],None]"
test_equal,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_pushdevice_not_present,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
get_count,"Callable[[str],int]"
hex_token,str
test_pushdevice_different,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
get_count,"Callable[[str],int]"
hex_token,str
test_not_registered,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
get_count,"Callable[[str],int]"
hex_token,str
test_failure,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
setUp,"Callable[[_],None]"
test_receivers_online_notifications_when_user_is_a_bot,"Callable[[_],None]"
test_receivers_online_notifications_when_user_is_not_a_bot,"Callable[[_],None]"
test_receivers_offline_notifications_when_user_is_a_bot,"Callable[[_],None]"
test_receivers_offline_notifications_when_user_is_not_a_bot,"Callable[[_],None]"
test_receivers_stream_notifications_when_user_is_a_bot,"Callable[[_],None]"
test_receivers_stream_notifications_when_user_is_not_a_bot,"Callable[[_],None]"
test_fixtures,"Callable[[_],None]"
test_backend_only_fixtures,"Callable[[_],None]"
test_push_signup_invalid_host,"Callable[[_],None]"
test_push_signup_invalid_email,"Callable[[_],None]"
test_push_signup_success,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_pm_to_embedded_bot,"Callable[[_],None]"
test_stream_message_to_embedded_bot,"Callable[[_],None]"
test_stream_message_not_to_embedded_bot,"Callable[[_],None]"
test_message_to_embedded_bot_with_initialize,"Callable[[_],None]"
test_embedded_bot_quit_exception,"Callable[[_],None]"
test_message_embedded_bot_with_invalid_service,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_list_by_user,"Callable[[_],None]"
test_remove_attachment_exception,"Callable[[_],None]"
test_remove_attachment,"Callable[[_, Any],None]"
ignored,Any
test_list_another_user,"Callable[[_],None]"
test_remove_another_user,"Callable[[_],None]"
test_list_unauthenticated,"Callable[[_],None]"
test_delete_unauthenticated,"Callable[[_],None]"
test_get_subdomain,"Callable[[_],None]"
request_mock,"Callable[[str],Any]"
host,str
test,"Callable[[str, str],None]"
expected,str
host,str
plusport,bool
external_host,str
_assert_update_does_not_notify_anybody,"Callable[[_, int, str],None]"
message_id,int
content,str
test_updates_with_pm_mention,"Callable[[_],None]"
_login_and_send_original_stream_message,"Callable[[_, str],int]"
content,str
_get_queued_data_for_message_update,"Callable[[_, int, str, bool],Dict[str, Any]]"
message_id,int
content,str
expect_short_circuit,bool
fake_publish,"Callable[[str, Union[Mapping[str, Any], str]],None]"
queue_name,str
event,"Union[Mapping[str, Any], str]"
args,Any
test_updates_with_stream_mention,"Callable[[_],None]"
test_second_mention_is_ignored,"Callable[[_],None]"
_turn_on_stream_push_for_cordelia,"Callable[[_],None]"
test_updates_with_stream_push_notify,"Callable[[_],None]"
_cordelia_connected_to_zulip,"Callable[[_],Any]"
test_stream_push_notify_for_sorta_present_user,"Callable[[_],None]"
_make_cordelia_present_on_web,"Callable[[_],None]"
test_stream_push_notify_for_fully_present_user,"Callable[[_],None]"
test_always_push_notify_for_fully_present_mentioned_user,"Callable[[_],None]"
test_always_push_notify_for_fully_present_boring_user,"Callable[[_],None]"
test_updates_with_stream_mention_of_sorta_present_user,"Callable[[_],None]"
test_updates_with_stream_mention_of_fully_present_user,"Callable[[_],None]"
get_bot_user,"Callable[[_, str],UserProfile]"
email,str
assert_num_bots_equal,"Callable[[_, int],None]"
count,int
extras,Any
test_bot_domain,"Callable[[_],None]"
deactivate_bot,"Callable[[_],None]"
test_add_bot_with_bad_username,"Callable[[_],None]"
test_add_bot_with_no_name,"Callable[[_],None]"
test_json_users_with_bots,"Callable[[_],None]"
test_add_bot,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_add_bot_with_username_in_use,"Callable[[_],None]"
test_add_bot_with_user_avatar,"Callable[[_],None]"
test_add_bot_with_too_many_files,"Callable[[_],None]"
test_add_bot_with_default_sending_stream,"Callable[[_],None]"
test_add_bot_with_default_sending_stream_not_subscribed,"Callable[[_],None]"
test_bot_add_subscription,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
events_bot,"List[Mapping[str, Any]]"
test_add_bot_with_default_sending_stream_private_allowed,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_add_bot_with_default_sending_stream_private_denied,"Callable[[_],None]"
test_add_bot_with_default_events_register_stream,"Callable[[_],None]"
test_add_bot_with_default_events_register_stream_private_allowed,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_add_bot_with_default_events_register_stream_private_denied,"Callable[[_],None]"
test_add_bot_with_default_all_public_streams,"Callable[[_],None]"
test_deactivate_bot,"Callable[[_],None]"
test_deactivate_bogus_bot,"Callable[[_],None]"
test_deactivate_bot_with_owner_deactivation,"Callable[[_],None]"
test_cannot_deactivate_other_realm_bot,"Callable[[_],None]"
test_bot_deactivation_attacks,"Callable[[_],None]"
test_bot_permissions,"Callable[[_],None]"
test_update_api_key,"Callable[[_],None]"
test_update_api_key_for_invalid_user,"Callable[[_],None]"
test_add_bot_with_bot_type_default,"Callable[[_],None]"
test_add_bot_with_bot_type_incoming_webhook,"Callable[[_],None]"
test_add_bot_with_bot_type_invalid,"Callable[[_],None]"
test_no_generic_bots_allowed_for_non_admins,"Callable[[_],None]"
test_no_generic_bot_reactivation_allowed_for_non_admins,"Callable[[_],None]"
test_no_generic_bots_allowed_for_admins,"Callable[[_],None]"
test_no_bots_allowed_for_non_admins,"Callable[[_],None]"
test_no_bots_allowed_for_admins,"Callable[[_],None]"
test_patch_bot_full_name,"Callable[[_],None]"
test_patch_bot_full_name_in_use,"Callable[[_],None]"
test_patch_bot_full_name_non_bot,"Callable[[_],None]"
test_patch_bot_owner,"Callable[[_],None]"
test_patch_bot_owner_bad_user_id,"Callable[[_],None]"
test_patch_bot_owner_deactivated,"Callable[[_],None]"
test_patch_bot_owner_must_be_in_same_realm,"Callable[[_],None]"
test_patch_bot_owner_noop,"Callable[[_],None]"
test_patch_bot_owner_a_bot,"Callable[[_],None]"
test_patch_bot_avatar,"Callable[[_],None]"
test_patch_bot_to_stream,"Callable[[_],None]"
test_patch_bot_to_stream_not_subscribed,"Callable[[_],None]"
test_patch_bot_to_stream_none,"Callable[[_],None]"
test_patch_bot_to_stream_private_allowed,"Callable[[_],None]"
test_patch_bot_to_stream_private_denied,"Callable[[_],None]"
test_patch_bot_to_stream_not_found,"Callable[[_],None]"
test_patch_bot_events_register_stream,"Callable[[_],None]"
test_patch_bot_events_register_stream_allowed,"Callable[[_],None]"
test_patch_bot_events_register_stream_denied,"Callable[[_],None]"
test_patch_bot_events_register_stream_none,"Callable[[_],None]"
test_patch_bot_events_register_stream_not_found,"Callable[[_],None]"
test_patch_bot_default_all_public_streams_true,"Callable[[_],None]"
test_patch_bot_default_all_public_streams_false,"Callable[[_],None]"
test_patch_bot_via_post,"Callable[[_],None]"
test_patch_bogus_bot,"Callable[[_],None]"
test_patch_outgoing_webhook_bot,"Callable[[_],None]"
test_patch_bot_config_data,"Callable[[_, MagicMock],None]"
mock_validate_config,MagicMock
test_create_outgoing_webhook_bot,"Callable[[_],None]"
extras,Any
test_get_bot_handler,"Callable[[_],None]"
test_if_each_embedded_bot_service_exists,"Callable[[_],None]"
test_outgoing_webhook_interface_type,"Callable[[_],None]"
test_create_embedded_bot_with_disabled_embedded_bots,"Callable[[_],None]"
extras,Any
test_create_embedded_bot,"Callable[[_],None]"
extras,Any
test_create_embedded_bot_with_incorrect_service_name,"Callable[[_],None]"
extras,Any
test_create_embedded_bot_with_invalid_config_value,"Callable[[_],None]"
extras,Any
test_is_cross_realm_bot_email,"Callable[[_],None]"
_make_output_dir,"Callable[[_],str]"
test_gitter_import_data_conversion,"Callable[[_, mock.Mock],None]"
read_file,"Callable[[str],Any]"
output_file,str
get_set,"Callable[[List[Dict[str, Any]], str],Set[str]]"
data,"List[Dict[str, Any]]"
field,str
test_gitter_import_to_existing_database,"Callable[[_, mock.Mock],None]"
test_get_usermentions,"Callable[[_],None]"
test_valid_hesiod,"Callable[[_],None]"
test_invalid_hesiod,"Callable[[_],None]"
test_mailinglist,"Callable[[_],None]"
test_notmailinglist,"Callable[[_],None]"
setUp,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
send_api_message,"Callable[[_, str, str],HttpResponse]"
email,str
content,str
test_headers,"Callable[[_],None]"
test_ratelimit_decrease,"Callable[[_],None]"
test_hit_ratelimits,"Callable[[_],None]"
test_activity,"Callable[[_, mock.Mock],None]"
test_client_stringification,"Callable[[_],None]"
test_date_logic,"Callable[[_],None]"
back_date,"Callable[[int],None]"
num_weeks,int
test_push_tokens,"Callable[[_],None]"
pushable,"Callable[[],bool]"
test_invalid_presence,"Callable[[_],None]"
test_set_idle,"Callable[[_],None]"
test_set_active,"Callable[[_],None]"
test_new_user_input,"Callable[[_, mock.Mock],None]"
test_filter_presence_idle_user_ids,"Callable[[_],None]"
test_no_mit,"Callable[[_],None]"
test_mirror_presence,"Callable[[_],None]"
_simulate_mirror_activity_for_user,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
test_same_realm,"Callable[[_],None]"
test_single_user_get,"Callable[[_],None]"
test_ping_only,"Callable[[_],None]"
_send_presence_for_aggregated_tests,"Callable[[_, str, str, datetime.datetime],Dict[str, Dict[str, Any]]]"
email,str
status,str
test_aggregated_info,"Callable[[_],None]"
test_aggregated_presense_active,"Callable[[_],None]"
test_aggregated_presense_idle,"Callable[[_],None]"
test_aggregated_presense_mixed,"Callable[[_],None]"
test_aggregated_presense_offline,"Callable[[_],None]"
test_get_statuses,"Callable[[_],None]"
do_test_session,"Callable[[_, str, Callable[[],Any], Realm, bool],None]"
user,str
action,"Callable[[],Any]"
realm,Realm
expected_result,bool
test_delete_session,"Callable[[_],None]"
test_delete_user_sessions,"Callable[[_],None]"
test_delete_realm_user_sessions,"Callable[[_],None]"
test_delete_all_user_sessions,"Callable[[_],None]"
test_delete_all_deactivated_user_sessions,"Callable[[_],None]"
get_sqlalchemy_query_params,"Callable[[str],Dict[str, str]]"
query,str
fix_ws,"Callable[[str],str]"
s,str
get_recipient_id_for_stream_name,"Callable[[Realm, str],str]"
realm,Realm
stream_name,str
mute_stream,"Callable[[Realm, str, str],None]"
realm,Realm
user_profile,str
stream_name,str
first_visible_id_as,"Callable[[int],Any]"
message_id,int
setUp,"Callable[[_],None]"
test_add_term_using_not_defined_operator,"Callable[[_],None]"
test_add_term_using_stream_operator,"Callable[[_],None]"
test_add_term_using_stream_operator_and_negated,"Callable[[_],None]"
test_add_term_using_stream_operator_and_non_existing_operand_should_raise_error,"Callable[[_],None]"
test_add_term_using_is_operator_and_private_operand,"Callable[[_],None]"
test_add_term_using_is_operator_private_operand_and_negated,"Callable[[_],None]"
test_add_term_using_is_operator_and_non_private_operand,"Callable[[_],None]"
test_add_term_using_is_operator_and_unread_operand,"Callable[[_],None]"
test_add_term_using_is_operator_and_unread_operand_and_negated,"Callable[[_],None]"
test_add_term_using_is_operator_non_private_operand_and_negated,"Callable[[_],None]"
test_add_term_using_non_supported_operator_should_raise_error,"Callable[[_],None]"
test_add_term_using_topic_operator_and_lunch_operand,"Callable[[_],None]"
test_add_term_using_topic_operator_lunch_operand_and_negated,"Callable[[_],None]"
test_add_term_using_topic_operator_and_personal_operand,"Callable[[_],None]"
test_add_term_using_topic_operator_personal_operand_and_negated,"Callable[[_],None]"
test_add_term_using_sender_operator,"Callable[[_],None]"
test_add_term_using_sender_operator_and_negated,"Callable[[_],None]"
test_add_term_using_sender_operator_with_non_existing_user_as_operand,"Callable[[_],None]"
test_add_term_using_pm_with_operator_and_not_the_same_user_as_operand,"Callable[[_],None]"
test_add_term_using_pm_with_operator_not_the_same_user_as_operand_and_negated,"Callable[[_],None]"
test_add_term_using_pm_with_operator_the_same_user_as_operand,"Callable[[_],None]"
test_add_term_using_pm_with_operator_the_same_user_as_operand_and_negated,"Callable[[_],None]"
test_add_term_using_pm_with_operator_and_self_and_user_as_operand,"Callable[[_],None]"
test_add_term_using_pm_with_operator_more_than_one_user_as_operand,"Callable[[_],None]"
test_add_term_using_pm_with_operator_self_and_user_as_operand_and_negated,"Callable[[_],None]"
test_add_term_using_pm_with_operator_more_than_one_user_as_operand_and_negated,"Callable[[_],None]"
test_add_term_using_pm_with_operator_with_comma_noise,"Callable[[_],None]"
test_add_term_using_pm_with_operator_with_existing_and_non_existing_user_as_operand,"Callable[[_],None]"
test_add_term_using_id_operator,"Callable[[_],None]"
test_add_term_using_id_operator_invalid,"Callable[[_],None]"
test_add_term_using_id_operator_and_negated,"Callable[[_],None]"
test_add_term_using_group_pm_operator_and_not_the_same_user_as_operand,"Callable[[_],None]"
test_add_term_using_group_pm_operator_not_the_same_user_as_operand_and_negated,"Callable[[_],None]"
test_add_term_using_group_pm_operator_with_non_existing_user_as_operand,"Callable[[_],None]"
test_add_term_using_search_operator,"Callable[[_],None]"
test_add_term_using_search_operator_and_negated,"Callable[[_],None]"
test_add_term_using_search_operator_pgroonga,"Callable[[_],None]"
test_add_term_using_search_operator_and_negated_pgroonga,"Callable[[_],None]"
test_add_term_using_has_operator_and_attachment_operand,"Callable[[_],None]"
test_add_term_using_has_operator_attachment_operand_and_negated,"Callable[[_],None]"
test_add_term_using_has_operator_and_image_operand,"Callable[[_],None]"
test_add_term_using_has_operator_image_operand_and_negated,"Callable[[_],None]"
test_add_term_using_has_operator_and_link_operand,"Callable[[_],None]"
test_add_term_using_has_operator_link_operand_and_negated,"Callable[[_],None]"
test_add_term_using_has_operator_non_supported_operand_should_raise_error,"Callable[[_],None]"
test_add_term_using_in_operator,"Callable[[_],None]"
test_add_term_using_in_operator_and_negated,"Callable[[_],None]"
test_add_term_using_in_operator_and_all_operand,"Callable[[_],None]"
test_add_term_using_in_operator_all_operand_and_negated,"Callable[[_],None]"
test_add_term_using_in_operator_and_not_defined_operand,"Callable[[_],None]"
test_add_term_using_near_operator,"Callable[[_],None]"
_do_add_term_test,"Callable[[_, Dict[str, Any], str, Union[Dict[str, Any], None]],None]"
where_clause,str
params,"Union[Dict[str, Any], None]"
_build_query,"Callable[[_, Dict[str, Any]],Query]"
test_build_narrow_filter,"Callable[[_],None]"
test_build_narrow_filter_invalid,"Callable[[_],None]"
test_is_web_public_compatible,"Callable[[_],None]"
test_ok_to_include_history,"Callable[[_],None]"
test_basics,"Callable[[_],None]"
verify,"Callable[[List[int], int, int, int, int, bool, bool, List[int], bool, bool, bool, bool],None]"
num_before,int
num_after,int
first_visible_message_id,int
anchor,int
anchored_to_left,bool
anchored_to_right,bool
found_anchor,bool
found_oldest,bool
found_newest,bool
history_limited,bool
get_and_check_messages,"Callable[[_, Dict[str, Union[str, int]]],Dict[str, Any]]"
modified_params,"Dict[str, Union[str, int]]"
kwargs,Any
post_params,"Dict[str, Union[str, int]]"
message_visibility_test,"Callable[[_, List[Dict[str, str]], List[int], int],None]"
narrow,"List[Dict[str, str]]"
pivot_index,int
test_content_types,"Callable[[_],None]"
get_content_type,"Callable[[bool],str]"
apply_markdown,bool
test_successful_get_messages_reaction,"Callable[[_],None]"
test_successful_get_messages,"Callable[[_],None]"
test_client_avatar,"Callable[[_],None]"
test_get_messages_with_narrow_pm_with,"Callable[[_],None]"
dr_emails,"Callable[[Union[str, List[Dict[str, Any]]]],str]"
dr,"Union[str, List[Dict[str, Any]]]"
test_get_visible_messages_with_narrow_pm_with,"Callable[[_],None]"
test_get_messages_with_narrow_group_pm_with,"Callable[[_],None]"
test_get_visible_messages_with_narrow_group_pm_with,"Callable[[_],None]"
test_include_history,"Callable[[_],None]"
test_get_messages_with_narrow_stream,"Callable[[_],None]"
test_get_visible_messages_with_narrow_stream,"Callable[[_],None]"
test_get_messages_with_narrow_stream_mit_unicode_regex,"Callable[[_],None]"
test_get_messages_with_narrow_topic_mit_unicode_regex,"Callable[[_],None]"
test_get_messages_with_narrow_topic_mit_personal,"Callable[[_],None]"
test_get_messages_with_narrow_sender,"Callable[[_],None]"
_update_tsvector_index,"Callable[[_],None]"
test_messages_in_narrow,"Callable[[_],None]"
send,"Callable[[str],int]"
content,str
test_get_messages_with_search,"Callable[[_],None]"
test_get_visible_messages_with_search,"Callable[[_],None]"
test_get_messages_with_search_not_subscribed,"Callable[[_],None]"
test_get_messages_with_search_pgroonga,"Callable[[_],None]"
test_messages_in_narrow_for_non_search,"Callable[[_],None]"
send,"Callable[[str],int]"
content,str
test_get_messages_with_only_searching_anchor,"Callable[[_],None]"
test_get_visible_messages_with_anchor,"Callable[[_],None]"
messages_matches_ids,"Callable[[List[Dict[str, Any]], List[int]],None]"
messages,"List[Dict[str, Any]]"
test_missing_params,"Callable[[_],None]"
test_get_messages_limits,"Callable[[_],None]"
test_bad_int_params,"Callable[[_],None]"
test_bad_narrow_type,"Callable[[_],None]"
other_params,"List[Tuple[str, Union[int, str, bool]]]"
test_bad_narrow_operator,"Callable[[_],None]"
test_non_string_narrow_operand_in_dict,"Callable[[_],None]"
exercise_bad_narrow_operand,"Callable[[_, str, Sequence[Any], str],None]"
operator,str
error_msg,str
other_params,"List[Tuple[str, Any]]"
test_bad_narrow_stream_content,"Callable[[_],None]"
test_bad_narrow_one_on_one_email_content,"Callable[[_],None]"
test_bad_narrow_nonexistent_stream,"Callable[[_],None]"
test_bad_narrow_nonexistent_email,"Callable[[_],None]"
test_message_without_rendered_content,"Callable[[_],None]"
common_check_get_messages_query,"Callable[[_, Dict[str, object], str],None]"
expected,str
test_find_first_unread_anchor,"Callable[[_],None]"
test_use_first_unread_anchor_with_some_unread_messages,"Callable[[_],None]"
test_visible_messages_use_first_unread_anchor_with_some_unread_messages,"Callable[[_],None]"
test_use_first_unread_anchor_with_no_unread_messages,"Callable[[_],None]"
test_use_first_unread_anchor_with_muted_topics,"Callable[[_],None]"
test_exclude_muting_conditions,"Callable[[_],None]"
test_get_messages_queries,"Callable[[_],None]"
test_get_messages_with_narrow_queries,"Callable[[_],None]"
test_get_messages_with_search_queries,"Callable[[_],None]"
sql_template,str
test_get_messages_with_search_using_email,"Callable[[_],None]"
test_empty_results,"Callable[[_],None]"
test_creating_streams,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_history_public_to_subscribers_on_stream_creation,"Callable[[_],None]"
stream_dicts,"List[Mapping[str, Any]]"
test_history_public_to_subscribers_zephyr_realm,"Callable[[_],None]"
test_welcome_message,"Callable[[_],None]"
test_recipient,"Callable[[_],None]"
test_make_stream_public,"Callable[[_],None]"
test_make_stream_private,"Callable[[_],None]"
test_make_stream_public_zephyr_mirror,"Callable[[_],None]"
test_make_stream_private_with_public_history,"Callable[[_],None]"
test_try_make_stream_public_with_private_history,"Callable[[_],None]"
test_deactivate_stream_backend,"Callable[[_],None]"
test_deactivate_stream_removes_default_stream,"Callable[[_],None]"
test_vacate_private_stream_removes_default_stream,"Callable[[_],None]"
test_deactivate_stream_backend_requires_existing_stream,"Callable[[_],None]"
test_deactivate_stream_backend_requires_realm_admin,"Callable[[_],None]"
test_private_stream_live_updates,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_rename_stream,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_rename_stream_requires_realm_admin,"Callable[[_],None]"
test_realm_admin_can_update_unsub_private_stream,"Callable[[_],None]"
test_change_stream_description,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_change_stream_description_requires_realm_admin,"Callable[[_],None]"
test_change_stream_announcement_only,"Callable[[_],None]"
test_change_stream_announcement_only_requires_realm_admin,"Callable[[_],None]"
set_up_stream_for_deletion,"Callable[[_, str, bool, bool],Stream]"
stream_name,str
invite_only,bool
subscribed,bool
delete_stream,"Callable[[_, Stream],None]"
stream,Stream
events,"List[Mapping[str, Any]]"
test_you_must_be_realm_admin,"Callable[[_],None]"
test_delete_public_stream,"Callable[[_],None]"
test_delete_private_stream,"Callable[[_],None]"
test_delete_streams_youre_not_on,"Callable[[_],None]"
attempt_unsubscribe_of_principal,"Callable[[_, int, bool, bool, bool, bool, Union[List[UserProfile], None]],HttpResponse]"
query_count,int
is_admin,bool
is_subbed,bool
invite_only,bool
other_user_subbed,bool
other_sub_users,"Union[List[UserProfile], None]"
test_cant_remove_others_from_stream,"Callable[[_],None]"
test_admin_remove_others_from_public_stream,"Callable[[_],None]"
test_admin_remove_others_from_subbed_private_stream,"Callable[[_],None]"
test_admin_remove_others_from_unsubbed_private_stream,"Callable[[_],None]"
test_create_stream_by_admins_only_setting,"Callable[[_],None]"
test_create_stream_by_waiting_period_threshold,"Callable[[_],None]"
test_remove_already_not_subbed,"Callable[[_],None]"
test_remove_invalid_user,"Callable[[_],None]"
get_default_stream_names,"Callable[[_, Realm],Set[str]]"
realm,Realm
get_default_stream_descriptions,"Callable[[_, Realm],Set[str]]"
realm,Realm
test_set_default_streams,"Callable[[_],None]"
stream_dict,"Dict[str, Dict[str, Any]]"
test_set_default_streams_no_notifications_stream,"Callable[[_],None]"
stream_dict,"Dict[str, Dict[str, Any]]"
test_add_and_remove_default_stream,"Callable[[_],None]"
test_api_calls,"Callable[[_],None]"
test_create_update_and_remove_default_stream_group,"Callable[[_],None]"
get_streams,"Callable[[DefaultStreamGroup],List[Stream]]"
group,DefaultStreamGroup
test_api_calls,"Callable[[_],None]"
test_invalid_default_stream_group_name,"Callable[[_],None]"
test_set_stream_color,"Callable[[_],None]"
test_set_color_missing_stream_id,"Callable[[_],None]"
test_set_color_unsubscribed_stream_id,"Callable[[_],None]"
test_set_color_missing_color,"Callable[[_],None]"
test_set_pin_to_top,"Callable[[_],None]"
test_set_subscription_property_incorrect,"Callable[[_],None]"
test_json_subscription_property_invalid_stream,"Callable[[_],None]"
test_set_invalid_property,"Callable[[_],None]"
test_basic_add_delete,"Callable[[_],None]"
test_api_valid_property,"Callable[[_],None]"
test_api_invalid_property,"Callable[[_],None]"
test_api_invalid_stream_id,"Callable[[_],None]"
test_bad_add_parameters,"Callable[[_],None]"
check_for_error,"Callable[[Any, str],None]"
val,Any
expected_message,str
test_bad_principals,"Callable[[_],None]"
test_bad_delete_parameters,"Callable[[_],None]"
test_add_or_delete_not_specified,"Callable[[_],None]"
test_patch_enforces_valid_stream_name_check,"Callable[[_],None]"
test_stream_name_too_long,"Callable[[_],None]"
test_stream_name_contains_null,"Callable[[_],None]"
test_compose_views_rollback,"Callable[[_],None]"
method1,"Callable[[HttpRequest, UserProfile],HttpResponse]"
req,HttpRequest
user_profile,UserProfile
method2,"Callable[[HttpRequest, UserProfile],HttpResponse]"
req,HttpRequest
user_profile,UserProfile
setUp,"Callable[[_],None]"
test_successful_subscriptions_list,"Callable[[_],None]"
helper_check_subs_before_and_after_add,"Callable[[_, List[str], Dict[str, Any], List[str], List[str], str, List[str], Realm, bool],None]"
email,str
realm,Realm
invite_only,bool
test_successful_subscriptions_add,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_successful_subscriptions_add_with_announce,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_successful_subscriptions_notifies_pm,"Callable[[_],None]"
test_successful_subscriptions_notifies_stream,"Callable[[_],None]"
test_successful_cross_realm_notification,"Callable[[_],None]"
test_successful_subscriptions_notifies_with_escaping,"Callable[[_],None]"
test_non_ascii_stream_subscription,"Callable[[_],None]"
test_subscriptions_add_too_long,"Callable[[_],None]"
test_subscriptions_add_stream_with_null,"Callable[[_],None]"
test_user_settings_for_adding_streams,"Callable[[_],None]"
test_can_create_streams,"Callable[[_],None]"
test_user_settings_for_subscribing_other_users,"Callable[[_],None]"
test_can_subscribe_other_users,"Callable[[_],None]"
test_subscriptions_add_invalid_stream,"Callable[[_],None]"
assert_adding_subscriptions_for_principal,"Callable[[_, str, Realm, List[str], bool],None]"
invitee_email,str
invitee_realm,Realm
invite_only,bool
test_multi_user_subscription,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_private_stream_subscription,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_guest_user_subscribe,"Callable[[_],None]"
test_users_getting_add_peer_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_users_getting_remove_peer_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_bulk_subscribe_MIT,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_bulk_subscribe_many,"Callable[[_],None]"
test_subscriptions_add_for_principal,"Callable[[_],None]"
test_subscriptions_add_for_principal_deactivated,"Callable[[_],None]"
test_subscriptions_add_for_principal_invite_only,"Callable[[_],None]"
test_non_ascii_subscription_for_principal,"Callable[[_],None]"
test_subscription_add_invalid_principal,"Callable[[_],None]"
test_subscription_add_principal_other_realm,"Callable[[_],None]"
helper_check_subs_before_and_after_remove,"Callable[[_, List[str], Dict[str, Any], str, List[str], Realm],None]"
email,str
realm,Realm
test_successful_subscriptions_remove,"Callable[[_],None]"
test_subscriptions_remove_fake_stream,"Callable[[_],None]"
helper_subscriptions_exists,"Callable[[_, str, bool, bool],None]"
stream,str
expect_success,bool
subscribed,bool
test_successful_subscriptions_exists_subbed,"Callable[[_],None]"
test_successful_subscriptions_exists_not_subbed,"Callable[[_],None]"
test_subscriptions_does_not_exist,"Callable[[_],None]"
test_subscriptions_exist_invalid_name,"Callable[[_],None]"
test_existing_subscriptions_autosubscription,"Callable[[_],None]"
test_existing_subscriptions_autosubscription_private_stream,"Callable[[_],None]"
get_subscription,"Callable[[_, UserProfile, str],Subscription]"
user_profile,UserProfile
stream_name,str
test_subscriptions_add_notification_default_true,"Callable[[_],None]"
test_subscriptions_add_notification_default_false,"Callable[[_],None]"
test_mark_messages_as_unread_on_unsubscribe,"Callable[[_],None]"
get_unread_stream_data,"Callable[[],List[Dict[str, Any]]]"
test_gather_subscriptions_excludes_deactivated_streams,"Callable[[_],None]"
delete_stream,"Callable[[str],None]"
stream_name,str
test_validate_user_access_to_subscribers_helper,"Callable[[_],None]"
test_subscriptions_query_count,"Callable[[_],None]"
test_public_streams_api,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_get_stream_id,"Callable[[_],None]"
test_get_stream_id_wrong_name,"Callable[[_],None]"
test_must_be_subbed_to_send,"Callable[[_],None]"
test_list_respects_invite_only_bit,"Callable[[_],None]"
test_inviteonly,"Callable[[_],None]"
setUp,"Callable[[_],None]"
assert_user_got_subscription_notification,"Callable[[_, str],None]"
expected_msg,str
non_ws,"Callable[[str],str]"
s,str
check_well_formed_result,"Callable[[_, Dict[str, Any], str, Realm],None]"
stream_name,str
realm,Realm
make_subscriber_request,"Callable[[_, int, Union[str, None]],HttpResponse]"
stream_id,int
make_successful_subscriber_request,"Callable[[_, str],None]"
stream_name,str
test_subscriber,"Callable[[_],None]"
test_gather_subscriptions,"Callable[[_],None]"
test_never_subscribed_streams,"Callable[[_],None]"
create_public_streams,"Callable[[],None]"
create_private_streams,"Callable[[],None]"
get_never_subscribed,"Callable[[],List[Dict[str, Any]]]"
test_admin_case,"Callable[[],None]"
test_gather_subscribed_streams_for_guest_user,"Callable[[_],None]"
test_previously_subscribed_private_streams,"Callable[[_],None]"
test_gather_subscriptions_mit,"Callable[[_],None]"
test_nonsubscriber,"Callable[[_],None]"
test_subscriber_private_stream,"Callable[[_],None]"
test_json_get_subscribers_stream_not_exist,"Callable[[_],None]"
test_json_get_subscribers,"Callable[[_],None]"
test_nonsubscriber_private_stream,"Callable[[_],None]"
test_access_stream,"Callable[[_],None]"
test_stream_access_by_guest,"Callable[[_],None]"
test_average_weekly_stream_traffic_calculation,"Callable[[_],None]"
test_round_to_2_significant_digits,"Callable[[_],None]"
test_basic_encode,"Callable[[_],None]"
test_basic_roundtrip,"Callable[[_],None]"
test_prevent_script_breakout,"Callable[[_],None]"
test_cache_gets_flushed,"Callable[[_],None]"
test_internal_endpoint,"Callable[[_],None]"
test_default_no_words,"Callable[[_],None]"
test_add_word,"Callable[[_],None]"
test_remove_word,"Callable[[_],None]"
test_realm_words,"Callable[[_],None]"
test_json_list_default,"Callable[[_],None]"
test_json_list_nonempty,"Callable[[_],None]"
test_json_list_add,"Callable[[_],None]"
test_json_list_remove,"Callable[[_],None]"
message_does_alert,"Callable[[_, UserProfile, str],bool]"
user_profile,UserProfile
message,str
test_alert_flags,"Callable[[_],None]"
test_update_alert_words,"Callable[[_],None]"
test_cookie_data,"Callable[[_],None]"
test_redirection_for_deactivated_realm,"Callable[[_],None]"
test_redirection_for_active_realm,"Callable[[_],None]"
test_deactivation_notice_when_realm_is_active,"Callable[[_],None]"
test_deactivation_notice_when_deactivated,"Callable[[_],None]"
test_add_new_user_history_race,"Callable[[_],None]"
stream_dict,"Dict[str, Dict[str, Any]]"
test_none_initial_password_salt,"Callable[[_],None]"
test_password_reset,"Callable[[_],None]"
test_password_reset_for_non_existent_user,"Callable[[_],None]"
test_password_reset_for_deactivated_user,"Callable[[_],None]"
test_password_reset_with_deactivated_realm,"Callable[[_],None]"
test_wrong_subdomain,"Callable[[_],None]"
test_invalid_subdomain,"Callable[[_],None]"
test_ldap_auth_only,"Callable[[_],None]"
test_ldap_and_email_auth,"Callable[[_],None]"
test_redirect_endpoints,"Callable[[_],None]"
test_login,"Callable[[_],None]"
test_login_deactivated_user,"Callable[[_],None]"
test_login_bad_password,"Callable[[_],None]"
test_login_nonexist_user,"Callable[[_],None]"
test_login_wrong_subdomain,"Callable[[_],None]"
test_login_invalid_subdomain,"Callable[[_],None]"
test_register,"Callable[[_],None]"
stream_dict,"Dict[str, Dict[str, Any]]"
test_register_deactivated,"Callable[[_],None]"
test_register_deactivated_partway_through,"Callable[[_],None]"
test_login_deactivated_realm,"Callable[[_],None]"
test_logout,"Callable[[_],None]"
test_non_ascii_login,"Callable[[_],None]"
test_login_page_redirects_logged_in_user,"Callable[[_],None]"
test_options_request_to_login_page,"Callable[[_],None]"
test_login_page_redirects_logged_in_user_under_2fa,"Callable[[_],None]"
test_start_two_factor_auth,"Callable[[_],None]"
test_do_two_factor_login,"Callable[[_],None]"
check_sent_emails,"Callable[[_, List[str], Union[str, None]],None]"
invite,"Callable[[_, str, List[str], str, str],HttpResponse]"
users,str
body,str
invite_as_admin,str
test_successful_invite_user,"Callable[[_],None]"
test_newbie_restrictions,"Callable[[_],None]"
test_invite_limits,"Callable[[_],None]"
try_invite,"Callable[[],HttpResponse]"
test_successful_invite_user_as_admin_from_admin_account,"Callable[[_],None]"
test_invite_user_as_admin_from_normal_account,"Callable[[_],None]"
test_successful_invite_user_with_name,"Callable[[_],None]"
test_successful_invite_user_with_name_and_normal_one,"Callable[[_],None]"
test_require_realm_admin,"Callable[[_],None]"
test_successful_invite_user_with_notifications_stream,"Callable[[_],None]"
test_invite_user_signup_initial_history,"Callable[[_],None]"
test_multi_user_invite,"Callable[[_],None]"
test_max_invites_model,"Callable[[_],None]"
test_invite_too_many_users,"Callable[[_],None]"
test_missing_or_invalid_params,"Callable[[_],None]"
test_guest_user_invitation,"Callable[[_],None]"
test_invalid_stream,"Callable[[_],None]"
test_invite_existing_user,"Callable[[_],None]"
test_invite_some_existing_some_new,"Callable[[_],None]"
test_invite_outside_domain_in_closed_realm,"Callable[[_],None]"
test_invite_using_disposable_email,"Callable[[_],None]"
test_invite_outside_domain_in_open_realm,"Callable[[_],None]"
test_invite_outside_domain_before_closing,"Callable[[_],None]"
test_disposable_emails_before_closing,"Callable[[_],None]"
test_invite_with_email_containing_plus_before_closing,"Callable[[_],None]"
test_invalid_email_check_after_confirming_email,"Callable[[_],None]"
test_invite_with_non_ascii_streams,"Callable[[_],None]"
test_invitation_reminder_email,"Callable[[_],None]"
test_confirmation_key_of_wrong_type,"Callable[[_],None]"
test_confirmation_expired,"Callable[[_],None]"
test_successful_get_open_invitations,"Callable[[_],None]"
test_successful_delete_invitation,"Callable[[_],None]"
test_successful_resend_invitation,"Callable[[_],None]"
test_accessing_invites_in_another_realm,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_if_emails_separated_by_commas_are_parsed_and_striped_correctly,"Callable[[_],None]"
test_if_emails_separated_by_newlines_are_parsed_and_striped_correctly,"Callable[[_],None]"
test_if_emails_from_email_client_separated_by_newlines_are_parsed_correctly,"Callable[[_],None]"
test_if_emails_in_mixed_style_are_parsed_correctly,"Callable[[_],None]"
setUp,"Callable[[_],None]"
generate_multiuse_invite_link,"Callable[[_, List[Stream], Union[datetime.datetime, None]],str]"
date_sent,"Union[datetime.datetime, None]"
check_user_able_to_register,"Callable[[_, str, str],None]"
email,str
invite_link,str
test_valid_multiuse_link,"Callable[[_],None]"
test_expired_multiuse_link,"Callable[[_],None]"
test_invalid_multiuse_link,"Callable[[_],None]"
test_invalid_multiuse_link_in_open_realm,"Callable[[_],None]"
test_multiuse_link_with_specified_streams,"Callable[[_],None]"
test_create_multiuse_link_api_call,"Callable[[_],None]"
test_create_multiuse_link_with_specified_streams_api_call,"Callable[[_],None]"
test_only_admin_can_create_multiuse_link_api_call,"Callable[[_],None]"
test_create_multiuse_link_invalid_stream_api_call,"Callable[[_],None]"
test_error_unsubscribe,"Callable[[_],None]"
test_missedmessage_unsubscribe,"Callable[[_],None]"
test_welcome_unsubscribe,"Callable[[_],None]"
test_digest_unsubscribe,"Callable[[_],None]"
test_login_unsubscribe,"Callable[[_],None]"
check_able_to_create_realm,"Callable[[_, str],None]"
email,str
test_create_realm_non_existing_email,"Callable[[_],None]"
test_create_realm_existing_email,"Callable[[_],None]"
test_create_realm_as_system_bot,"Callable[[_],None]"
test_create_realm_no_creation_key,"Callable[[_],None]"
test_create_realm_with_subdomain,"Callable[[_],None]"
test_mailinator_signup,"Callable[[_],None]"
test_subdomain_restrictions,"Callable[[_],None]"
test_subdomain_restrictions_root_domain,"Callable[[_],None]"
test_subdomain_restrictions_root_domain_option,"Callable[[_],None]"
test_is_root_domain_available,"Callable[[_],None]"
test_subdomain_check_api,"Callable[[_],None]"
test_subdomain_check_management_command,"Callable[[_],None]"
_assert_redirected_to,"Callable[[_, HttpResponse, str],None]"
result,HttpResponse
url,str
test_bad_email_configuration_for_accounts_home,"Callable[[_],None]"
test_bad_email_configuration_for_create_realm,"Callable[[_],None]"
test_user_default_language_and_timezone,"Callable[[_],None]"
test_default_twenty_four_hour_time,"Callable[[_],None]"
test_signup_already_active,"Callable[[_],None]"
test_signup_system_bot,"Callable[[_],None]"
test_signup_existing_email,"Callable[[_],None]"
test_signup_invalid_name,"Callable[[_],None]"
test_signup_without_password,"Callable[[_],None]"
test_signup_without_full_name,"Callable[[_],None]"
test_signup_with_full_name,"Callable[[_],None]"
test_signup_with_default_stream_group,"Callable[[_],None]"
test_signup_with_multiple_default_stream_groups,"Callable[[_],None]"
test_signup_without_user_settings_from_another_realm,"Callable[[_],None]"
test_signup_with_user_settings_from_another_realm,"Callable[[_],None]"
test_signup_invalid_subdomain,"Callable[[_],None]"
invalid_subdomain,"Callable[[],Any]"
kwargs,Any
test_replace_subdomain_in_confirmation_link,"Callable[[_],None]"
test_failed_signup_due_to_restricted_domain,"Callable[[_],None]"
test_failed_signup_due_to_disposable_email,"Callable[[_],None]"
test_failed_signup_due_to_email_containing_plus,"Callable[[_],None]"
test_failed_signup_due_to_invite_required,"Callable[[_],None]"
test_failed_signup_due_to_nonexistent_realm,"Callable[[_],None]"
test_access_signup_page_in_root_domain_without_realm,"Callable[[_],None]"
test_ldap_registration_from_confirmation,"Callable[[_],None]"
test_ldap_registration_end_to_end,"Callable[[_],None]"
test_ldap_auto_registration_on_login,"Callable[[_],None]"
test_ldap_registration_when_names_changes_are_disabled,"Callable[[_],None]"
test_signup_with_ldap_and_email_enabled_using_email,"Callable[[_],None]"
test_registration_when_name_changes_are_disabled,"Callable[[_],None]"
test_realm_creation_through_ldap,"Callable[[_],None]"
test_registration_of_mirror_dummy_user,"Callable[[_, Any],None]"
ignored,Any
test_registration_of_active_mirror_dummy_user,"Callable[[_],None]"
test_deactivate_user,"Callable[[_],None]"
test_do_not_deactivate_final_admin,"Callable[[_],None]"
test_do_not_deactivate_final_user,"Callable[[_],None]"
test_login_page_wrong_subdomain_error,"Callable[[_],None]"
test_login_page_redirects_for_root_alias,"Callable[[_, MagicMock],None]"
mock_get_host,MagicMock
test_login_page_redirects_for_root_domain,"Callable[[_, MagicMock],None]"
mock_get_host,MagicMock
test_login_page_works_without_subdomains,"Callable[[_, MagicMock],None]"
mock_get_host,MagicMock
test_template,"Callable[[_],None]"
test_result,"Callable[[_],None]"
test_find_team_ignore_invalid_email,"Callable[[_],None]"
test_find_team_reject_invalid_email,"Callable[[_],None]"
test_find_team_zero_emails,"Callable[[_],None]"
test_find_team_one_email,"Callable[[_],None]"
test_find_team_deactivated_user,"Callable[[_],None]"
test_find_team_deactivated_realm,"Callable[[_],None]"
test_find_team_bot_email,"Callable[[_],None]"
test_find_team_more_than_ten_emails,"Callable[[_],None]"
test_confirmation_key,"Callable[[_],None]"
test_xor_hex_strings,"Callable[[_],None]"
test_is_valid_otp,"Callable[[_],None]"
test_ascii_to_hex,"Callable[[_],None]"
test_otp_encrypt_api_key,"Callable[[_],None]"
test_followup_day2_email,"Callable[[_],None]"
test_noreply_email_address,"Callable[[_],None]"
test_whitelisted_disposable_domains,"Callable[[_],None]"
get_doc,"Callable[[_, str, str],HttpResponse]"
url,str
subdomain,str
_test,"Callable[[_, str, str, List[str], List[str], bool, bool],None]"
url,str
expected_content,str
landing_page,bool
doc_html_str,bool
test_doc_endpoints,"Callable[[_],None]"
test_integration_doc_endpoints,"Callable[[_],None]"
test_email_integration,"Callable[[_],None]"
test_doc_html_str_non_ajax_call,"Callable[[_],None]"
test_help_settings_links,"Callable[[_],None]"
test_help_relative_links_for_gear,"Callable[[_],None]"
test_help_relative_links_for_stream,"Callable[[_],None]"
test_check_if_every_integration_has_logo_that_exists,"Callable[[_],None]"
test_api_url_view_subdomains_base,"Callable[[_],None]"
test_api_url_view_subdomains_homepage_base,"Callable[[_],None]"
test_api_url_view_subdomains_full,"Callable[[_],None]"
test_html_settings_links,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_endpoint,"Callable[[_],None]"
test_split_by,"Callable[[_],None]"
test_google,"Callable[[_],None]"
test_github,"Callable[[_],None]"
test_github_production_error,"Callable[[_],None]"
test_smtp_error,"Callable[[_],None]"
test_dev_direct_production_error,"Callable[[_],None]"
test_plans_auth,"Callable[[_],None]"
test_CTA_text_by_plan_type,"Callable[[_],None]"
__init__,"Callable[[_, _],None]"
self.func_calls,"List[Tuple[str, Iterable[Any]]]"
__getattr__,"Callable[[_, str],_]"
name,str
f,"Callable[[],None]"
args,Any
test_send_time,"Callable[[_],None]"
test_narrow_time,"Callable[[_],None]"
test_unnarrow_time,"Callable[[_],None]"
test_report_error,"Callable[[_],None]"
test_report_csp_violations,"Callable[[_],None]"
test_user_activation,"Callable[[_],None]"
test_change_password,"Callable[[_],None]"
test_change_email,"Callable[[_],None]"
test_change_avatar_source,"Callable[[_],None]"
test_change_full_name,"Callable[[_],None]"
test_change_tos_version,"Callable[[_],None]"
test_change_bot_owner,"Callable[[_],None]"
test_regenerate_api_key,"Callable[[_],None]"
test_get_streams_traffic,"Callable[[_],None]"
test_subscriptions,"Callable[[_],None]"
test_validation,"Callable[[_],None]"
assert_error,"Callable[[object, str],None]"
obj,object
msg,str
test_message_error_handling,"Callable[[_],None]"
test_get_widget_data_for_non_widget_messages,"Callable[[_],None]"
test_explicit_widget_content,"Callable[[_],None]"
test_tictactoe,"Callable[[_],None]"
test_poll_command_extra_data,"Callable[[_],None]"
test_webhook_http_header_header_exists,"Callable[[_],None]"
test_webhook_http_header_header_does_not_exist,"Callable[[_],None]"
test_notify_bot_owner_on_invalid_json,"Callable[[_],None]"
my_webhook_raises_exception,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
my_webhook,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
test_missing_event_header,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
test_get_raw_db_rows,"Callable[[_],None]"
get_raw_rows,"Callable[[],List[Dict[str, Any]]]"
test_endpoint_errors,"Callable[[_],None]"
test_endpoint_success,"Callable[[_],None]"
test_check_config,"Callable[[_],None]"
test_check_send_email,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_get_client,"Callable[[_],None]"
test_get_realm,"Callable[[_],None]"
test_get_user,"Callable[[_],None]"
test_get_user_profile_by_email,"Callable[[_],None]"
test_get_users,"Callable[[_],None]"
test_get_users_with_all_users_argument_enabled,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_management_commands_show_help,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_check_if_command_exits_when_fixture_param_is_empty,"Callable[[_, MagicMock],None]"
print_help_mock,MagicMock
test_check_if_command_exits_when_url_param_is_empty,"Callable[[_, MagicMock],None]"
print_help_mock,MagicMock
test_check_if_command_exits_when_fixture_path_does_not_exist,"Callable[[_, MagicMock],None]"
os_path_exists_mock,MagicMock
test_check_if_command_post_request_to_url_with_fixture,"Callable[[_, MagicMock, MagicMock, MagicMock, MagicMock],None]"
open_mock,MagicMock
ujson_mock,MagicMock
client_mock,MagicMock
os_path_exists_mock,MagicMock
test_generate_link_and_create_realm,"Callable[[_],None]"
test_generate_link_confirm_email,"Callable[[_],None]"
test_realm_creation_with_random_link,"Callable[[_],None]"
test_realm_creation_with_expired_link,"Callable[[_],None]"
test_check_if_command_calls_maybe_update_first_visible_message_id,"Callable[[_],None]"
test_if_command_sends_password_reset_email,"Callable[[_],None]"
test_if_realm_not_deactivated,"Callable[[_],None]"
test_non_existant_stream_id,"Callable[[_],None]"
test_non_web_public_stream,"Callable[[_],None]"
test_non_existant_topic,"Callable[[_],None]"
test_web_public_stream_topic,"Callable[[_],None]"
send_msg_and_get_result,"Callable[[str],HttpResponse]"
msg,str
test_get_web_public_streams,"Callable[[_],None]"
test_non_existant_stream_id,"Callable[[_],None]"
test_non_web_public_stream,"Callable[[_],None]"
test_web_public_stream,"Callable[[_],None]"
test_list,"Callable[[_],None]"
test_create,"Callable[[_],None]"
test_not_realm_admin,"Callable[[_],None]"
test_delete,"Callable[[_],None]"
test_on_open_closed,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_queue_basics,"Callable[[_],None]"
test_queue_basics_json,"Callable[[_],None]"
test_register_consumer,"Callable[[_],None]"
collect,"Callable[[Dict[str, Any]],None]"
test_register_consumer_nack,"Callable[[_],None]"
collect,"Callable[[Dict[str, Any]],None]"
test_queue_error_json,"Callable[[_],None]"
throw_connection_error_once,"Callable[[Any],None]"
self_obj,Any
args,Any
kwargs,Any
tearDown,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
fetch,"Callable[[_, str, str, int],HttpResponse]"
method,str
url,str
expected_status,int
kwargs,Any
test_accept_language_header,"Callable[[_],None]"
test_cookie,"Callable[[_],None]"
test_i18n_urls,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
test_json_error,"Callable[[_, Any],None]"
mock_gettext,Any
test_jsonable_error,"Callable[[_, Any],None]"
mock_gettext,Any
test_regexes,"Callable[[_],None]"
test_confirm_email_change_with_non_existent_key,"Callable[[_],None]"
test_confirm_email_change_with_invalid_key,"Callable[[_],None]"
test_confirm_email_change_when_time_exceeded,"Callable[[_],None]"
test_confirm_email_change,"Callable[[_],None]"
test_start_email_change_process,"Callable[[_],None]"
test_end_to_end_flow,"Callable[[_],None]"
test_unauthorized_email_change,"Callable[[_],None]"
test_email_change_already_taken,"Callable[[_],None]"
test_unauthorized_email_change_from_email_confirmation_link,"Callable[[_],None]"
test_post_invalid_email,"Callable[[_],None]"
test_post_same_email,"Callable[[_],None]"
_get_outgoing_bot,"Callable[[_],UserProfile]"
test_service_events_for_pms,"Callable[[_],None]"
test_spurious_mentions,"Callable[[_],None]"
test_service_events_for_stream_mentions,"Callable[[_],None]"
test_service_events_for_private_mentions,"Callable[[_],None]"
test_service_events_with_unexpected_bot_type,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_basic_storage_and_retrieval,"Callable[[_],None]"
test_marshaling,"Callable[[_],None]"
test_invalid_calls,"Callable[[_],None]"
test_storage_limit,"Callable[[_],None]"
test_entry_removal,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_basic_storage_and_retrieval,"Callable[[_],None]"
test_config_entry_limit,"Callable[[_],None]"
test_load_bot_config_template,"Callable[[_],None]"
test_load_bot_config_template_for_bot_without_config_data,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_trigger_on_stream_mention_from_user,"Callable[[_, mock.Mock],None]"
check_values_passed,"Callable[[Any, Union[Mapping[Any, Any], Any], Callable[[Any],None]],None]"
queue_name,Any
trigger_event,"Union[Mapping[Any, Any], Any]"
x,"Callable[[Any],None]"
test_no_trigger_on_stream_message_without_mention,"Callable[[_, mock.Mock],None]"
test_no_trigger_on_stream_mention_from_bot,"Callable[[_, mock.Mock],None]"
test_trigger_on_personal_message_from_user,"Callable[[_, mock.Mock],None]"
check_values_passed,"Callable[[Any, Union[Mapping[Any, Any], Any], Callable[[Any],None]],None]"
queue_name,Any
trigger_event,"Union[Mapping[Any, Any], Any]"
x,"Callable[[Any],None]"
test_no_trigger_on_personal_message_from_bot,"Callable[[_, mock.Mock],None]"
test_trigger_on_huddle_message_from_user,"Callable[[_, mock.Mock],None]"
check_values_passed,"Callable[[Any, Union[Mapping[Any, Any], Any], Callable[[Any],None]],None]"
queue_name,Any
trigger_event,"Union[Mapping[Any, Any], Any]"
x,"Callable[[Any],None]"
test_no_trigger_on_huddle_message_from_bot,"Callable[[_, mock.Mock],None]"
setUp,"Callable[[_],None]"
test_tutorial_status,"Callable[[_],None]"
test_single_response_to_pm,"Callable[[_],None]"
test_no_response_to_group_pm,"Callable[[_],None]"
get_username,"Callable[[_, Union[Callable[[str],str], None]],str]"
email_to_username,"Union[Callable[[str],str], None]"
verify_backend,"Callable[[_, Any, Union[Dict[str, Any], None], Union[Dict[str, Any], None]],None]"
backend,Any
good_kwargs,"Union[Dict[str, Any], None]"
bad_kwargs,"Union[Dict[str, Any], None]"
test_dummy_backend,"Callable[[_],None]"
setup_subdomain,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
test_email_auth_backend,"Callable[[_],None]"
test_email_auth_backend_disabled_password_auth,"Callable[[_],None]"
test_no_backend_enabled,"Callable[[_],None]"
test_any_backend_enabled,"Callable[[_],None]"
test_google_backend,"Callable[[_],None]"
test_ldap_backend,"Callable[[_],None]"
test_devauth_backend,"Callable[[_],None]"
test_remote_user_backend,"Callable[[_],None]"
test_remote_user_backend_invalid_realm,"Callable[[_],None]"
test_remote_user_backend_sso_append_domain,"Callable[[_],None]"
test_github_backend,"Callable[[_],None]"
patched_authenticate,"Callable[[],Any]"
args,Any
kwargs,Any
__init__,"Callable[[_, int, Any],None]"
status_code,int
data,Any
json,"Callable[[_],str]"
text,"Callable[[_],str]"
setUp,"Callable[[_],None]"
github_oauth2_test,"Callable[[_, Dict[str, str]],HttpResponse]"
email_data,"Union[List[Dict[str, Any]], None]"
next,str
test_github_oauth2_no_key,"Callable[[_],None]"
test_github_oauth2_success,"Callable[[_],None]"
test_github_when_social_auth_subdomain_is_not_set,"Callable[[_],None]"
test_github_oauth2_email_not_verified,"Callable[[_],None]"
test_github_oauth2_github_team_not_member_failed,"Callable[[_],None]"
test_github_oauth2_github_team_member_success,"Callable[[_],None]"
test_github_oauth2_github_organization_not_member_failed,"Callable[[_],None]"
test_github_oauth2_github_organization_member_success,"Callable[[_],None]"
test_github_oauth2_deactivated_user,"Callable[[_],None]"
test_github_oauth2_invalid_realm,"Callable[[_],None]"
test_github_oauth2_invalid_email,"Callable[[_],None]"
test_user_cannot_log_into_nonexisting_realm,"Callable[[_],None]"
test_user_cannot_log_into_wrong_subdomain,"Callable[[_],None]"
test_github_oauth2_mobile_success,"Callable[[_],None]"
test_github_oauth2_registration_existing_account,"Callable[[_],None]"
test_github_oauth2_registration,"Callable[[_],None]"
test_github_oauth2_registration_without_is_signup,"Callable[[_],None]"
test_github_oauth2_registration_without_is_signup_closed_realm,"Callable[[_],None]"
test_github_complete,"Callable[[_],None]"
test_github_complete_when_base_exc_is_raised,"Callable[[_],None]"
test_github_auth_enabled,"Callable[[_],None]"
google_oauth2_test,"Callable[[_, ResponseMock, ResponseMock],HttpResponse]"
token_response,ResponseMock
account_response,ResponseMock
next,str
test_google_oauth2_start,"Callable[[_],None]"
test_google_oauth2_success,"Callable[[_],None]"
test_google_oauth2_no_fullname,"Callable[[_],None]"
test_google_oauth2_mobile_success,"Callable[[_],None]"
get_log_into_subdomain,"Callable[[_, Dict[str, Any]],HttpResponse]"
subdomain,str
test_redirect_to_next_url_for_log_into_subdomain,"Callable[[_],None]"
test_redirect_to_next_url,"Callable[[str],HttpResponse]"
next,str
test_log_into_subdomain_when_signature_is_bad,"Callable[[_],None]"
test_log_into_subdomain_when_signature_is_expired,"Callable[[_],None]"
test_log_into_subdomain_when_is_signup_is_true,"Callable[[_],None]"
test_log_into_subdomain_when_is_signup_is_true_and_new_user,"Callable[[_],None]"
test_log_into_subdomain_when_is_signup_is_false_and_new_user,"Callable[[_],None]"
test_log_into_subdomain_when_using_invite_link,"Callable[[_],None]"
test_log_into_subdomain_when_email_is_none,"Callable[[_],None]"
test_user_cannot_log_into_nonexisting_realm,"Callable[[_],None]"
test_user_cannot_log_into_wrong_subdomain,"Callable[[_],None]"
test_user_cannot_log_into_wrong_subdomain_with_cookie,"Callable[[_],None]"
test_google_oauth2_registration,"Callable[[_],None]"
test_google_oauth2_subdomains_homepage,"Callable[[_],None]"
test_google_oauth2_400_token_response,"Callable[[_],None]"
test_google_oauth2_500_token_response,"Callable[[_],None]"
test_google_oauth2_400_account_response,"Callable[[_],None]"
test_google_oauth2_500_account_response,"Callable[[_],None]"
test_google_oauth2_account_response_no_email,"Callable[[_],None]"
test_google_oauth2_error_access_denied,"Callable[[_],None]"
test_google_oauth2_error_other,"Callable[[_],None]"
test_google_oauth2_missing_csrf,"Callable[[_],None]"
test_google_oauth2_csrf_malformed,"Callable[[_],None]"
test_google_oauth2_csrf_badstate,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_success,"Callable[[_],None]"
test_not_loggedin,"Callable[[_],None]"
test_wrong_password,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_success,"Callable[[_],None]"
test_invalid_email,"Callable[[_],None]"
test_wrong_password,"Callable[[_],None]"
test_google_oauth2_token_success,"Callable[[_],None]"
test_google_oauth2_token_failure,"Callable[[_],None]"
test_google_oauth2_token_unregistered,"Callable[[_],None]"
test_password_auth_disabled,"Callable[[_],None]"
test_ldap_auth_email_auth_disabled_success,"Callable[[_],None]"
test_inactive_user,"Callable[[_],None]"
test_deactivated_realm,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_success,"Callable[[_],None]"
test_invalid_email,"Callable[[_],None]"
test_unregistered_user,"Callable[[_],None]"
test_inactive_user,"Callable[[_],None]"
test_deactivated_realm,"Callable[[_],None]"
test_dev_auth_disabled,"Callable[[_],None]"
test_success,"Callable[[_],None]"
test_dev_auth_disabled,"Callable[[_],None]"
assert_on_error,"Callable[[_, Union[str, None]],None]"
test_get_server_settings,"Callable[[_],None]"
check_result,"Callable[[HttpResponse, List[Tuple[str, Validator]]],None]"
result,HttpResponse
extra_fields,"List[Tuple[str, Validator]]"
test_fetch_auth_backend_format,"Callable[[_],None]"
test_fetch_auth_backend,"Callable[[_],None]"
test_direct_dev_login_with_2fa,"Callable[[_],None]"
test_login_success,"Callable[[_],None]"
test_login_success_with_2fa,"Callable[[_],None]"
test_redirect_to_next_url,"Callable[[_],None]"
do_local_login,"Callable[[str],HttpResponse]"
formaction,str
test_login_with_subdomain,"Callable[[_],None]"
test_choose_realm,"Callable[[_],None]"
test_choose_realm_with_subdomains_enabled,"Callable[[_],None]"
test_login_failure,"Callable[[_],None]"
test_login_failure_due_to_nonexistent_user,"Callable[[_],None]"
test_login_success,"Callable[[_],None]"
test_login_success_with_sso_append_domain,"Callable[[_],None]"
test_login_failure,"Callable[[_],None]"
test_login_failure_due_to_nonexisting_user,"Callable[[_],None]"
test_login_failure_due_to_invalid_email,"Callable[[_],None]"
test_login_failure_due_to_missing_field,"Callable[[_],None]"
test_login_failure_due_to_wrong_subdomain,"Callable[[_],None]"
test_login_failure_due_to_empty_subdomain,"Callable[[_],None]"
test_login_success_under_subdomains,"Callable[[_],None]"
test_login_mobile_flow_otp_success,"Callable[[_],None]"
test_redirect_to,"Callable[[_],None]"
test_with_redirect_to_param_set_as_next,"Callable[[str],HttpResponse]"
next,str
test_login_success,"Callable[[_],None]"
test_login_failure_when_user_is_missing,"Callable[[_],None]"
test_login_failure_when_realm_is_missing,"Callable[[_],None]"
test_login_failure_when_key_does_not_exist,"Callable[[_],None]"
test_login_failure_when_key_is_missing,"Callable[[_],None]"
test_login_failure_when_bad_token_is_passed,"Callable[[_],None]"
test_login_failure_when_user_does_not_exist,"Callable[[_],None]"
test_login_failure_due_to_wrong_subdomain,"Callable[[_],None]"
test_login_failure_due_to_empty_subdomain,"Callable[[_],None]"
test_login_success_under_subdomains,"Callable[[_],None]"
setUp,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
setup_subdomain,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
test_generate_dev_ldap_dir,"Callable[[_],None]"
test_login_success,"Callable[[_],None]"
test_login_success_with_email_attr,"Callable[[_],None]"
test_login_failure_due_to_wrong_password,"Callable[[_],None]"
test_login_failure_due_to_nonexistent_user,"Callable[[_],None]"
test_ldap_permissions,"Callable[[_],None]"
test_django_to_ldap_username,"Callable[[_],None]"
test_ldap_to_django_username,"Callable[[_],None]"
test_get_or_build_user_when_user_exists,"Callable[[_],None]"
test_get_or_build_user_when_user_does_not_exist,"Callable[[_],None]"
test_get_or_build_user_when_user_has_invalid_name,"Callable[[_],None]"
test_get_or_build_user_when_realm_is_deactivated,"Callable[[_],None]"
test_get_or_build_user_when_ldap_has_no_email_attr,"Callable[[_],None]"
test_django_to_ldap_username_when_domain_does_not_match,"Callable[[_],None]"
test_login_failure_when_domain_does_not_match,"Callable[[_],None]"
test_login_failure_due_to_wrong_subdomain,"Callable[[_],None]"
test_login_failure_due_to_invalid_subdomain,"Callable[[_],None]"
test_login_success_with_valid_subdomain,"Callable[[_],None]"
test_login_failure_due_to_deactivated_user,"Callable[[_],None]"
test_login_success_when_user_does_not_exist_with_valid_subdomain,"Callable[[_],None]"
test_authenticate,"Callable[[_],None]"
test_get_user,"Callable[[_],None]"
test_password_auth_enabled_for_ldap,"Callable[[_],None]"
test_require_email_format_usernames_for_ldap_with_append_domain,"Callable[[_],None]"
test_require_email_format_usernames_for_ldap_with_email_attr,"Callable[[_],None]"
test_require_email_format_usernames_for_email_only,"Callable[[_],None]"
test_require_email_format_usernames_for_email_and_ldap_with_email_attr,"Callable[[_],None]"
test_require_email_format_usernames_for_email_and_ldap_with_append_email,"Callable[[_],None]"
test_sso_only_when_preregistration_user_does_not_exist,"Callable[[_],None]"
is_valid,"Callable[[_],bool]"
test_sso_only_when_preregistration_user_exists,"Callable[[_],None]"
is_valid,"Callable[[_],bool]"
test_change_enabled_backends,"Callable[[_],None]"
test_disable_all_backends,"Callable[[_],None]"
test_supported_backends_only_updated,"Callable[[_],None]"
test_valid_email,"Callable[[_],None]"
test_invalid_email,"Callable[[_],None]"
test_validate_email,"Callable[[_],None]"
test_non_existing_realm,"Callable[[_],None]"
test_present_provider,"Callable[[_, Any],None]"
get,Any
test_error_request,"Callable[[_, Any],None]"
get,Any
test_page_with_og,"Callable[[_],None]"
test_parser,"Callable[[_],None]"
test_extract_image,"Callable[[_],None]"
test_extract_description,"Callable[[_],None]"
test_edit_message_history,"Callable[[_],None]"
_send_message_with_test_org_url,"Callable[[_, str, bool, bool],Message]"
sender_email,str
queue_should_run,bool
relative_url,bool
test_message_update_race_condition,"Callable[[_],None]"
wrapped_queue_json_publish,"Callable[[],None]"
args,Any
kwargs,Any
test_get_link_embed_data,"Callable[[_],None]"
test_inline_url_embed_preview,"Callable[[_],None]"
test_inline_relative_url_embed_preview,"Callable[[_],None]"
test_inline_url_embed_preview_with_relative_image_url,"Callable[[_],None]"
test_http_error_get_data,"Callable[[_],None]"
test_invalid_link,"Callable[[_],None]"
test_link_embed_data_from_cache,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_first_hotspot,"Callable[[_],None]"
test_some_done_some_not,"Callable[[_],None]"
test_all_done,"Callable[[_],None]"
test_send_all,"Callable[[_],None]"
test_do_mark_hotspot_as_read,"Callable[[_],None]"
test_hotspots_url_endpoint,"Callable[[_],None]"
setUp,"Callable[[_],None]"
self.session_cookie,"Union[Dict[str, str], None]"
tearDown,"Callable[[_],None]"
self.session_cookie,"Union[Dict[str, str], None]"
get_app,"Callable[[_],Application]"
client_get,"Callable[[_, str],HTTPResponse]"
path,str
kwargs,Any
fetch_async,"Callable[[_, str, str],None]"
method,str
path,str
kwargs,Any
client_get_async,"Callable[[_, str],None]"
path,str
kwargs,Any
login,"Callable[[_],None]"
args,Any
kwargs,Any
add_session_cookie,"Callable[[_, Dict[str, Any]],None]"
create_queue,"Callable[[_],str]"
kwargs,Any
test_create_queue,"Callable[[_],None]"
test_events_async,"Callable[[_],None]"
process_events,"Callable[[],None]"
setUp,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
ws_connect,"Callable[[_, str, str, Union[Any, None]],Generator[Any, Callable[[HTTPRequest, Union[Any, None]],Any], None]]"
path,str
cookie_header,str
close,"Callable[[_, Any],None]"
ws,Any
get_app,"Callable[[_],Application]"
tornado_call,"Callable[[Callable[[HttpRequest, UserProfile],HttpResponse], UserProfile, Dict[str, Any]],HttpResponse]"
view_func,"Callable[[HttpRequest, UserProfile],HttpResponse]"
user_profile,UserProfile
get_cookie_header,"Callable[[SimpleCookie],str]"
cookies,SimpleCookie
_get_cookies,"Callable[[_, UserProfile],SimpleCookie]"
user_profile,UserProfile
_websocket_auth,"Callable[[_, Any, Dict[str, Dict[str, str]], SimpleCookie],Generator[str, str, None]]"
ws,Any
queue_events_data,"Dict[str, Dict[str, str]]"
cookies,SimpleCookie
_get_queue_events_data,"Callable[[str],Dict[str, Dict[str, str]]]"
email,str
_check_message_sending,"Callable[[_, str, str, str, UserProfile, Dict[str, Dict[str, str]]],None]"
request_id,str
ack_resp,str
msg_resp,str
profile,UserProfile
queue_events_data,"Dict[str, Dict[str, str]]"
test_sending_message_error,"Callable[[_],Any]"
wrap_get_response,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
__init__,"Callable[[_],None]"
test_update_pointer,"Callable[[_],None]"
test_api_update_pointer,"Callable[[_],None]"
test_missing_pointer,"Callable[[_],None]"
test_invalid_pointer,"Callable[[_],None]"
test_pointer_out_of_range,"Callable[[_],None]"
test_use_first_unread_anchor_interaction_with_pointer,"Callable[[_],None]"
test_visible_messages_use_first_unread_anchor,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_new_message,"Callable[[_],None]"
test_update_flags,"Callable[[_],None]"
test_mark_all_in_stream_read,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_mark_all_in_invalid_stream_read,"Callable[[_],None]"
test_mark_all_topics_unread_with_invalid_stream_name,"Callable[[_],None]"
test_mark_all_in_stream_topic_read,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_mark_all_in_invalid_topic_read,"Callable[[_],None]"
test_fix_unreads,"Callable[[_],None]"
send_message,"Callable[[str, str],int]"
stream_name,str
topic_name,str
assert_read,"Callable[[int],None]"
user_message_id,int
assert_unread,"Callable[[int],None]"
user_message_id,int
mute_stream,"Callable[[str],None]"
stream_name,str
mute_topic,"Callable[[str, str],None]"
stream_name,str
topic_name,str
force_unsubscribe,"Callable[[str],None]"
stream_name,str
get_mobile_push_notification_ids,"Callable[[_, UserProfile],List[int]]"
user_profile,UserProfile
test_track_active_mobile_push_notifications,"Callable[[_],None]"
test_do_soft_deactivate_user,"Callable[[_],None]"
test_do_soft_deactivate_users,"Callable[[_],None]"
test_get_users_for_soft_deactivation,"Callable[[_],None]"
test_do_soft_activate_users,"Callable[[_],None]"
test_missing_parameter,"Callable[[_],None]"
test_invalid_parameter,"Callable[[_],None]"
test_missing_recipient,"Callable[[_],None]"
test_invalid_recipient,"Callable[[_],None]"
test_single_recipient,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_multiple_recipients,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_send_notification_to_self_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_send_notification_to_another_user_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_send_notification_to_self_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_send_notification_to_another_user_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_recipient_for_user_ids,"Callable[[_],None]"
test_recipient_for_user_ids_non_existent_id,"Callable[[_],None]"
test_legacy_subject,"Callable[[_],None]"
test_invalid_zcommand,"Callable[[_],None]"
test_ping_zcommand,"Callable[[_],None]"
test_night_zcommand,"Callable[[_],None]"
test_day_zcommand,"Callable[[_],None]"
test_get_client_name,"Callable[[_],None]"
__init__,"Callable[[_, Dict[str, str], Dict[str, str], Dict[str, str]],None]"
test_REQ_aliases,"Callable[[_],None]"
double,"Callable[[HttpRequest, int],int]"
request,HttpRequest
x,int
test_REQ_converter,"Callable[[_],None]"
my_converter,"Callable[[str],List[int]]"
data,str
get_total,"Callable[[HttpRequest, Iterable[int]],int]"
request,HttpRequest
test_REQ_converter_and_validator_invalid,"Callable[[_],None]"
get_total,"Callable[[HttpRequest, Iterable[int]],int]"
request,HttpRequest
test_REQ_validator,"Callable[[_],None]"
get_total,"Callable[[HttpRequest, Iterable[int]],int]"
request,HttpRequest
test_REQ_str_validator,"Callable[[_],None]"
get_middle_characters,"Callable[[HttpRequest, str],str]"
request,HttpRequest
value,str
test_REQ_argument_type,"Callable[[_],None]"
get_payload,"Callable[[HttpRequest, Dict[str, Any]],Dict[str, Any]]"
request,HttpRequest
body,Any
test,"Callable[[HttpRequest, Any],None]"
request,HttpRequest
payload,Any
test_api_key_only_webhook_view,"Callable[[_],None]"
my_webhook,"Callable[[HttpRequest, UserProfile],str]"
request,HttpRequest
user_profile,UserProfile
my_webhook_raises_exception,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
test_authenticated_api_view_logging,"Callable[[_],None]"
my_webhook_raises_exception,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
test_authenticated_rest_api_view_logging,"Callable[[_],None]"
my_webhook_raises_exception,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
test_authenticated_rest_api_view_with_non_webhook_view,"Callable[[_],None]"
non_webhook_view_raises_exception,"Callable[[HttpRequest, UserProfile],None]"
request,HttpRequest
user_profile,UserProfile
test_authenticated_rest_api_view_errors,"Callable[[_],None]"
errors_disallowed,"Callable[[_],Any]"
test_internal_local_clients_skip_rate_limiting,"Callable[[_],None]"
f,"Callable[[Any],str]"
req,Any
test_debug_clients_skip_rate_limiting,"Callable[[_],None]"
f,"Callable[[Any],str]"
req,Any
test_rate_limit_setting_of_false_bypasses_rate_limiting,"Callable[[_],None]"
f,"Callable[[Any],str]"
req,Any
test_rate_limiting_happens_in_normal_case,"Callable[[_],None]"
f,"Callable[[Any],str]"
req,Any
test_check_string,"Callable[[_],None]"
x,Any
test_check_string_fixed_length,"Callable[[_],None]"
x,Any
test_check_capped_string,"Callable[[_],None]"
x,Any
test_check_short_string,"Callable[[_],None]"
x,Any
test_check_bool,"Callable[[_],None]"
x,Any
test_check_int,"Callable[[_],None]"
x,Any
test_check_to_not_negative_int_or_none,"Callable[[_],None]"
test_check_float,"Callable[[_],None]"
x,Any
test_check_list,"Callable[[_],None]"
x,Any
test_check_dict,"Callable[[_],None]"
keys,"List[Tuple[str, Validator]]"
x,Any
test_encapsulation,"Callable[[_],None]"
check_person,"Callable[[Any],Union[str, None]]"
val,Any
test_check_variable_type,"Callable[[_],None]"
x,Any
test_equals,"Callable[[_],None]"
x,Any
test_check_none_or,"Callable[[_],None]"
x,Any
test_check_url,"Callable[[_],None]"
url,Any
test_send_deactivated_realm,"Callable[[_],None]"
test_fetch_api_key_deactivated_realm,"Callable[[_],None]"
test_webhook_deactivated_realm,"Callable[[_],None]"
test_login_required,"Callable[[_],None]"
test_fetch_api_key_success,"Callable[[_],None]"
test_fetch_api_key_wrong_password,"Callable[[_],None]"
test_send_deactivated_user,"Callable[[_],None]"
test_fetch_api_key_deactivated_user,"Callable[[_],None]"
test_login_deactivated_user,"Callable[[_],None]"
test_login_deactivated_mirror_dummy,"Callable[[_],None]"
test_webhook_deactivated_user,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_webhook_bot_permissions,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_validate_api_key_if_profile_does_not_exist,"Callable[[_],None]"
test_validate_api_key_if_api_key_does_not_match_profile_api_key,"Callable[[_],None]"
test_validate_api_key_if_profile_is_not_active,"Callable[[_],None]"
test_validate_api_key_if_profile_is_incoming_webhook_and_is_webhook_is_unset,"Callable[[_],None]"
test_validate_api_key_if_profile_is_incoming_webhook_and_is_webhook_is_set,"Callable[[_],None]"
test_validate_api_key_if_email_is_case_insensitive,"Callable[[_],None]"
test_valid_api_key_if_user_is_on_wrong_subdomain,"Callable[[_],None]"
_change_is_active_field,"Callable[[_, UserProfile, bool],None]"
profile,UserProfile
value,bool
__init__,"Callable[[_, Dict[str, Any], Dict[str, Any]],None]"
internal_notify,"Callable[[_, bool, HttpRequest],HttpResponse]"
is_tornado,bool
req,HttpRequest
test_valid_internal_requests,"Callable[[_],None]"
req,HttpRequest
test_internal_requests_with_broken_secret,"Callable[[_],None]"
test_external_requests,"Callable[[_],None]"
test_is_local_address,"Callable[[_],None]"
test_human_only_endpoints,"Callable[[_],None]"
test_authenticated_json_post_view_if_everything_is_correct,"Callable[[_],None]"
test_authenticated_json_post_view_with_get_request,"Callable[[_],None]"
test_authenticated_json_post_view_if_subdomain_is_invalid,"Callable[[_],None]"
test_authenticated_json_post_view_if_user_is_incoming_webhook,"Callable[[_],None]"
test_authenticated_json_post_view_if_user_is_not_active,"Callable[[_],None]"
test_authenticated_json_post_view_if_user_realm_is_deactivated,"Callable[[_],None]"
_do_test,"Callable[[_, str],HttpResponse]"
user_email,str
_login,"Callable[[_, str, Realm, str],None]"
user_email,str
user_realm,Realm
password,str
test_authenticated_json_view_if_subdomain_is_invalid,"Callable[[_],None]"
_do_test,"Callable[[_, str],HttpResponse]"
user_email,str
test_zulip_login_required_if_subdomain_is_invalid,"Callable[[_],None]"
test_2fa_failure,"Callable[[_],None]"
test_view,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
test_2fa_success,"Callable[[_],None]"
test_view,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
test_require_server_admin_decorator,"Callable[[_],None]"
test_require_non_guest_user_decorator,"Callable[[_],None]"
test_require_non_guest_human_user_decorator,"Callable[[_],None]"
test_returns_200_if_request_method_is_head,"Callable[[_],None]"
test_function,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
test_returns_normal_response_if_request_method_is_not_head,"Callable[[_],None]"
test_function,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
test_method_not_allowed,"Callable[[_],None]"
test_options_method,"Callable[[_],None]"
test_http_accept_redirect,"Callable[[_],None]"
test_cachify_basics,"Callable[[_],None]"
add,"Callable[[Any, Any, Any, Any],Any]"
w,Any
x,Any
y,Any
z,Any
test_cachify_is_per_call,"Callable[[_],None]"
test_greetings,"Callable[[str],Tuple[List[str], List[str]]]"
greeting,str
greet,"Callable[[str, str],str]"
first_name,str
last_name,str
test_user_agent_parsing,"Callable[[_],None]"
test_cache_hit,"Callable[[_],None]"
f,"Callable[[Any],Any]"
arg,Any
clear_cache,"Callable[[],None]"
create_user_group_for_test,"Callable[[_, str, Realm],UserGroup]"
group_name,str
realm,Realm
test_user_groups_in_realm,"Callable[[_],None]"
test_user_groups_in_realm_serialized,"Callable[[_],None]"
test_get_user_groups,"Callable[[_],None]"
test_check_add_user_to_user_group,"Callable[[_],None]"
test_check_remove_user_from_user_group,"Callable[[_],None]"
test_user_group_create,"Callable[[_],None]"
test_user_group_get,"Callable[[_],None]"
test_user_group_create_by_guest_user,"Callable[[_],None]"
test_user_group_update,"Callable[[_],None]"
test_user_group_update_by_guest_user,"Callable[[_],None]"
test_user_group_update_to_already_existing_name,"Callable[[_],None]"
test_user_group_delete,"Callable[[_],None]"
test_user_group_delete_by_guest_user,"Callable[[_],None]"
test_update_members_of_user_group,"Callable[[_],None]"
test_mentions,"Callable[[_],None]"
test_with_missing_event_log_dir_setting,"Callable[[_],None]"
test_log_event_mkdir,"Callable[[_],None]"
test_events_register_endpoint,"Callable[[_],None]"
test_tornado_endpoint,"Callable[[_],None]"
tornado_call,"Callable[[_, Callable[[HttpRequest, UserProfile],HttpResponse], UserProfile, Dict[str, Any]],HttpResponse]"
view_func,"Callable[[HttpRequest, UserProfile],HttpResponse]"
user_profile,UserProfile
test_get_events,"Callable[[_],None]"
test_get_events_narrow,"Callable[[_],None]"
get_message,"Callable[[bool, bool],Dict[str, Any]]"
apply_markdown,bool
client_gravatar,bool
setUp,"Callable[[_],None]"
create_bot,"Callable[[_, str],Union[UserProfile, None]]"
email,str
extras,Any
realm_bot_schema,"Callable[[_, str, Validator],Validator]"
field_name,str
check,Validator
do_test,"Callable[[_, Callable[[],Any], Union[List[str], None], bool, bool, bool, int],List[Dict[str, Any]]]"
action,"Callable[[],Any]"
event_types,"Union[List[str], None]"
include_subscribers,bool
state_change_expected,bool
client_gravatar,bool
num_events,int
assert_on_error,"Callable[[_, Union[str, None]],None]"
match_states,"Callable[[_, Dict[str, Any], Dict[str, Any], List[Dict[str, Any]]],None]"
events,"List[Dict[str, Any]]"
normalize,"Callable[[Dict[str, Any]],None]"
check_events_dict,"Callable[[_, List[Tuple[str, Validator]]],Validator]"
required_keys,"List[Tuple[str, Validator]]"
test_mentioned_send_message_events,"Callable[[_],None]"
test_pm_send_message_events,"Callable[[_],None]"
test_huddle_send_message_events,"Callable[[_],None]"
test_stream_send_message_events,"Callable[[_],None]"
check_none,"Callable[[str, Any],Union[str, None]]"
var_name,str
val,Any
get_checker,"Callable[[Validator],Validator]"
check_gravatar,Validator
test_update_message_flags,"Callable[[_],None]"
test_update_read_flag_removes_unread_msg_ids,"Callable[[_],None]"
test_send_message_to_existing_recipient,"Callable[[_],None]"
test_add_reaction_legacy,"Callable[[_],None]"
test_remove_reaction_legacy,"Callable[[_],None]"
test_add_reaction,"Callable[[_],None]"
test_add_submessage,"Callable[[_],None]"
test_remove_reaction,"Callable[[_],None]"
test_invite_user_event,"Callable[[_],None]"
test_revoke_user_invite_event,"Callable[[_],None]"
test_invitation_accept_invite_event,"Callable[[_],None]"
test_typing_events,"Callable[[_],None]"
test_get_typing_user_profiles,"Callable[[_],None]"
test_custom_profile_fields_events,"Callable[[_],None]"
test_custom_profile_field_data_events,"Callable[[_],None]"
test_presence_events,"Callable[[_],None]"
test_presence_events_multiple_clients,"Callable[[_],None]"
test_pointer_events,"Callable[[_],None]"
test_register_events,"Callable[[_],None]"
test_alert_words_events,"Callable[[_],None]"
test_user_group_events,"Callable[[_],None]"
test_default_stream_groups_events,"Callable[[_],None]"
test_default_streams_events,"Callable[[_],None]"
test_muted_topics_events,"Callable[[_],None]"
test_change_avatar_fields,"Callable[[_],None]"
test_change_full_name,"Callable[[_],None]"
do_set_realm_property_test,"Callable[[_, str],None]"
name,str
test_change_realm_property,"Callable[[_],None]"
test_change_realm_authentication_methods,"Callable[[_],None]"
fake_backends,"Callable[[],Any]"
test_change_pin_stream,"Callable[[_],None]"
test_change_realm_message_edit_settings,"Callable[[_],None]"
test_change_realm_notifications_stream,"Callable[[_],None]"
test_change_realm_signup_notifications_stream,"Callable[[_],None]"
test_change_is_admin,"Callable[[_],None]"
do_set_user_display_settings_test,"Callable[[_, str],None]"
setting_name,str
test_set_user_display_settings,"Callable[[_],None]"
test_change_notification_settings,"Callable[[_],None]"
test_realm_emoji_events,"Callable[[_],None]"
test_realm_filter_events,"Callable[[_],None]"
test_realm_domain_events,"Callable[[_],None]"
test_create_bot,"Callable[[_],None]"
get_bot_created_checker,"Callable[[str],Validator]"
bot_type,str
test_change_bot_full_name,"Callable[[_],None]"
test_regenerate_bot_api_key,"Callable[[_],None]"
test_change_bot_avatar_source,"Callable[[_],None]"
test_change_realm_icon_source,"Callable[[_],None]"
test_change_bot_default_all_public_streams,"Callable[[_],None]"
test_change_bot_default_sending_stream,"Callable[[_],None]"
test_change_bot_default_events_register_stream,"Callable[[_],None]"
test_change_bot_owner,"Callable[[_],None]"
test_do_deactivate_user,"Callable[[_],None]"
test_do_reactivate_user,"Callable[[_],None]"
test_do_mark_hotspot_as_read,"Callable[[_],None]"
test_rename_stream,"Callable[[_],None]"
test_deactivate_stream_neversubscribed,"Callable[[_],None]"
test_subscribe_other_user_never_subscribed,"Callable[[_],None]"
test_subscribe_events,"Callable[[_],None]"
test_subscribe_events_no_include_subscribers,"Callable[[_],None]"
do_test_subscribe_events,"Callable[[_, bool],None]"
include_subscribers,bool
action,"Callable[[],Any]"
test_do_delete_message_stream,"Callable[[_],None]"
test_do_delete_message_personal,"Callable[[_],None]"
test_do_delete_message_no_max_id,"Callable[[_],None]"
test_add_attachment,"Callable[[_],None]"
do_upload,"Callable[[],None]"
test_realm_bots_non_admin,"Callable[[_],None]"
test_realm_bots_admin,"Callable[[_],None]"
test_max_message_id_with_no_history,"Callable[[_],None]"
mute_stream,"Callable[[_, UserProfile, Stream],None]"
user_profile,UserProfile
stream,Stream
mute_topic,"Callable[[_, UserProfile, str, str],None]"
user_profile,UserProfile
stream_name,str
topic_name,str
test_raw_unread_stream,"Callable[[_],None]"
test_raw_unread_huddle,"Callable[[_],None]"
test_raw_unread_personal,"Callable[[_],None]"
test_unread_msgs,"Callable[[_],None]"
get_unread_data,"Callable[[],UnreadMessagesResult]"
test_one_event,"Callable[[_],None]"
test_event_collapsing,"Callable[[_],None]"
test_flag_add_collapsing,"Callable[[_],None]"
test_flag_remove_collapsing,"Callable[[_],None]"
test_collapse_event,"Callable[[_],None]"
test_get_client_info_for_all_public_streams,"Callable[[_],None]"
test_get_client_info_for_normal_users,"Callable[[_],None]"
test_get_info,"Callable[[bool, bool],None]"
apply_markdown,bool
client_gravatar,bool
test_process_message_event_with_mocked_client_info,"Callable[[_],None]"
__init__,"Callable[[_, int, bool, bool],None]"
user_profile_id,int
apply_markdown,bool
client_gravatar,bool
self.events,"List[Dict[str, Any]]"
accepts_messages,"Callable[[_],bool]"
accepts_event,"Callable[[_, Dict[str, Any]],bool]"
add_event,"Callable[[_, Dict[str, Any]],None]"
test_queries,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_use_passed_all_public_true_default_false,"Callable[[_],None]"
test_use_passed_all_public_true_default,"Callable[[_],None]"
test_use_passed_all_public_false_default_false,"Callable[[_],None]"
test_use_passed_all_public_false_default_true,"Callable[[_],None]"
test_use_true_default_for_none,"Callable[[_],None]"
test_use_false_default_for_none,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_use_passed_narrow_no_default,"Callable[[_],None]"
test_use_passed_narrow_with_default,"Callable[[_],None]"
test_use_default_if_narrow_is_empty,"Callable[[_],None]"
test_use_narrow_if_default_is_none,"Callable[[_],None]"
assert_user_profile_cache_gets_new_name,"Callable[[_, UserProfile, str],None]"
user_profile,UserProfile
new_realm_name,str
test_do_set_realm_name_caching,"Callable[[_],None]"
test_update_realm_name_events,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_update_realm_description_events,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_update_realm_description,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_realm_description_length,"Callable[[_],None]"
test_realm_name_length,"Callable[[_],None]"
test_admin_restrictions_for_changing_realm_name,"Callable[[_],None]"
test_unauthorized_name_change,"Callable[[_],None]"
test_do_deactivate_realm_clears_user_realm_cache,"Callable[[_],None]"
test_do_change_realm_subdomain_clears_user_realm_cache,"Callable[[_],None]"
test_do_deactivate_realm_clears_scheduled_jobs,"Callable[[_],None]"
test_do_deactivate_realm_on_deactived_realm,"Callable[[_],None]"
test_realm_reactivation_link,"Callable[[_],None]"
test_do_send_realm_reactivation_email,"Callable[[_],None]"
test_realm_reactivation_with_random_link,"Callable[[_],None]"
test_change_notifications_stream,"Callable[[_],None]"
test_get_default_notifications_stream,"Callable[[_],None]"
test_change_signup_notifications_stream,"Callable[[_],None]"
test_get_default_signup_notifications_stream,"Callable[[_],None]"
test_change_realm_default_language,"Callable[[_],None]"
test_deactivate_realm_by_admin,"Callable[[_],None]"
test_deactivate_realm_by_non_admin,"Callable[[_],None]"
test_change_bot_creation_policy,"Callable[[_],None]"
test_change_video_chat_provider,"Callable[[_],None]"
test_initial_plan_type,"Callable[[_],None]"
test_change_plan_type,"Callable[[_],None]"
setUp,"Callable[[_],None]"
set_up_db,"Callable[[_, str, Any],None]"
attr,str
value,Any
update_with_api,"Callable[[_, str, int],Realm]"
name,str
value,int
do_test_realm_update_api,"Callable[[_, str],None]"
name,str
test_update_realm_properties,"Callable[[_],None]"
test_update_realm_allow_message_editing,"Callable[[_],None]"
test_update_realm_allow_message_deleting,"Callable[[_],None]"
test_scrub_realm,"Callable[[_],None]"
capture_and_throw,"Callable[[Union[str, None]],Callable[[ViewFuncT],ViewFuncT]]"
wrapper,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
wrapped_view,"Callable[[HttpRequest],NoReturn]"
request,HttpRequest
args,Any
kwargs,Any
setUp,"Callable[[_],None]"
tearDown,"Callable[[_],None]"
get_admin_zulip_handler,"Callable[[_],AdminNotifyHandler]"
test_basic,"Callable[[_, MagicMock],None]"
mock_function,MagicMock
test_long_exception_request,"Callable[[_, MagicMock],None]"
mock_function,MagicMock
test_request,"Callable[[_, MagicMock],None]"
mock_function,MagicMock
get_host_error,"Callable[[],None]"
all_loggers,"Callable[[],Iterator[logging.Logger]]"
test_django_emails_disabled,"Callable[[_],None]"
test_clean_data_from_query_parameters,"Callable[[_],None]"
rm_tree,"Callable[[str],None]"
path,str
_create_messages,"Callable[[_],None]"
test_query_chunker,"Callable[[_],None]"
setUp,"Callable[[_],None]"
_make_output_dir,"Callable[[_],str]"
_export_realm,"Callable[[_, Realm, Union[Set[int], None]],Dict[str, Any]]"
realm,Realm
exportable_user_ids,"Union[Set[int], None]"
read_file,"Callable[[str],Any]"
fn,str
test_export_files_from_local,"Callable[[_],None]"
test_export_files_from_s3,"Callable[[_],None]"
check_variable_type,"Callable[[int, int],None]"
user_profile_id,int
realm_id,int
test_zulip_realm,"Callable[[_],None]"
get_set,"Callable[[str, str],Set[str]]"
table,str
field,str
find_by_id,"Callable[[str, int],Dict[str, Any]]"
table,str
db_id,int
test_export_single_user,"Callable[[_],None]"
read_file,"Callable[[str],Any]"
fn,str
get_set,"Callable[[List[Dict[str, Any]], str],Set[str]]"
data,"List[Dict[str, Any]]"
field,str
test_import_realm,"Callable[[_],None]"
assert_realm_values,"Callable[[Callable[[Realm],Any], bool],None]"
f,"Callable[[Realm],Any]"
equal,bool
get_recipient_stream,"Callable[[Realm],Stream]"
r,Realm
get_recipient_user,"Callable[[Realm],UserProfile]"
r,Realm
get_subscribers,"Callable[[Recipient],Set[str]]"
recipient,Recipient
get_custom_profile_field_names,"Callable[[Realm],Set[str]]"
r,Realm
get_custom_profile_with_field_type_user,"Callable[[Realm],Tuple[Set[Any], Set[Any], Set[FrozenSet[str]]]]"
r,Realm
get_email,"Callable[[int],str]"
user_id,int
get_email_from_value,"Callable[[CustomProfileFieldValue],Set[str]]"
field_value,CustomProfileFieldValue
custom_profile_field_values_for,"Callable[[List[CustomProfileField]],Set[FrozenSet[str]]]"
user_emails,Set[FrozenSet[str]]
get_realm_audit_log_event_type,"Callable[[Realm],Set[str]]"
r,Realm
get_huddle_hashes,"Callable[[str],str]"
r,str
get_huddle_message,"Callable[[str],str]"
r,str
get_user_hotspots,"Callable[[str],Set[str]]"
r,str
get_muted_topics,"Callable[[Realm],Set[str]]"
r,Realm
get_user_membership,"Callable[[str],Set[str]]"
r,str
get_botstoragedata,"Callable[[Realm],Dict[str, Any]]"
r,Realm
get_botconfigdata,"Callable[[Realm],Dict[str, Any]]"
r,Realm
get_stream_messages,"Callable[[Realm],Message]"
r,Realm
get_stream_topics,"Callable[[Realm],Set[str]]"
r,Realm
get_usermessages_user,"Callable[[Realm],Set[Any]]"
r,Realm
test_import_files_from_local,"Callable[[_],None]"
test_import_files_from_s3,"Callable[[_],None]"
test_get_incoming_message_ids,"Callable[[_],None]"
test_plan_type,"Callable[[_],None]"
fetch,"Callable[[_, str, List[str], int],None]"
method,str
expected_status,int
test_public_urls,"Callable[[_],None]"
test_get_gcid_when_not_configured,"Callable[[_],None]"
test_get_gcid_when_configured,"Callable[[_],None]"
get_callback_string,"Callable[[_, django.urls.resolvers.RegexURLPattern],Union[str, None]]"
pattern,django.urls.resolvers.RegexURLPattern
check_function_exists,"Callable[[_, str, str],None]"
module_name,str
view,str
test_rest_api_url_resolution,"Callable[[_],None]"
test_non_api_url_resolution,"Callable[[_],None]"
test_bogus_http_host,"Callable[[_],None]"
test_receive_digest_email_messages,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_huddle_urls,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_multiple_stream_senders,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_inactive_users_queued_for_digest,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_disabled,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_active_users_not_enqueued,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_only_enqueue_on_valid_day,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_no_email_digest_for_bots,"Callable[[_, mock.MagicMock, mock.MagicMock],None]"
test_new_stream_link,"Callable[[_, mock.MagicMock],None]"
test_gather_new_users,"Callable[[_, mock.MagicMock],None]"
test_pm_to_feedback_bot,"Callable[[_, MagicMock],None]"
logging_info_mock,MagicMock
test_simple_quoting,"Callable[[_],None]"
test_serial_quoting,"Callable[[_],None]"
test_serial_code,"Callable[[_],None]"
test_nested_code,"Callable[[_],None]"
bugdown_convert,"Callable[[str],str]"
text,str
test_diffs_work_as_expected,"Callable[[_],None]"
test_get_possible_mentions_info,"Callable[[_],None]"
make_user,"Callable[[str, str],UserProfile]"
email,str
full_name,str
test_mention_data,"Callable[[_],None]"
test_invalid_katex_path,"Callable[[_],None]"
setUp,"Callable[[_],None]"
assertEqual,"Callable[[_, Any, Any, str],None]"
first,Any
second,Any
msg,str
load_bugdown_tests,"Callable[[_],Tuple[Dict[str, Any], List[List[str]]]]"
test_bugdown_no_ignores,"Callable[[_],None]"
test_bugdown_fixtures,"Callable[[_],None]"
replaced,"Callable[[str, str, str],str]"
payload,str
url,str
phrase,str
test_inline_file,"Callable[[_],None]"
test_inline_bitcoin,"Callable[[_],None]"
test_inline_youtube,"Callable[[_],None]"
test_inline_vimeo,"Callable[[_],None]"
test_inline_image_preview_order,"Callable[[_],None]"
test_image_preview_enabled_for_realm,"Callable[[_],None]"
test_url_embed_preview_enabled_for_realm,"Callable[[_],None]"
test_inline_dropbox,"Callable[[_],None]"
test_inline_dropbox_preview,"Callable[[_],None]"
test_inline_dropbox_negative,"Callable[[_],None]"
test_inline_dropbox_bad,"Callable[[_],None]"
test_inline_github_preview,"Callable[[_],None]"
test_twitter_id_extraction,"Callable[[_],None]"
test_inline_interesting_links,"Callable[[_],None]"
make_link,"Callable[[str],str]"
url,str
make_inline_twitter_preview,"Callable[[str, str, str],str]"
url,str
tweet_html,str
image_html,str
test_fetch_tweet_data_settings_validation,"Callable[[_],None]"
test_content_has_emoji,"Callable[[_],None]"
test_realm_emoji,"Callable[[_],None]"
emoji_img,"Callable[[str, str, int],str]"
name,str
file_name,str
realm_id,int
test_deactivated_realm_emoji,"Callable[[_],None]"
test_unicode_emoji,"Callable[[_],None]"
test_no_translate_emoticons_if_off,"Callable[[_],None]"
test_same_markup,"Callable[[_],None]"
test_realm_patterns,"Callable[[_],None]"
test_maybe_update_markdown_engines,"Callable[[_],None]"
test_flush_realm_filter,"Callable[[_],None]"
flush,"Callable[[],None]"
save_new_realm_filter,"Callable[[],None]"
test_realm_patterns_negative,"Callable[[_],None]"
test_is_status_message,"Callable[[_],None]"
test_alert_words,"Callable[[_],None]"
render,"Callable[[Message, str],str]"
msg,Message
content,str
test_mention_wildcard,"Callable[[_],None]"
test_mention_everyone,"Callable[[_],None]"
test_mention_stream,"Callable[[_],None]"
test_mention_at_wildcard,"Callable[[_],None]"
test_mention_at_everyone,"Callable[[_],None]"
test_mention_word_starting_with_at_wildcard,"Callable[[_],None]"
test_mention_at_normal_user,"Callable[[_],None]"
test_mention_single,"Callable[[_],None]"
test_possible_mentions,"Callable[[_],None]"
assert_mentions,"Callable[[str, Set[str]],None]"
content,str
test_mention_multiple,"Callable[[_],None]"
test_mention_duplicate_full_name,"Callable[[_],None]"
make_user,"Callable[[str, str],UserProfile]"
email,str
full_name,str
test_mention_invalid,"Callable[[_],None]"
create_user_group_for_test,"Callable[[_, str],UserGroup]"
user_group_name,str
test_user_group_mention_single,"Callable[[_],None]"
test_possible_user_group_mentions,"Callable[[_],None]"
assert_mentions,"Callable[[str, Set[str]],None]"
content,str
test_user_group_mention_multiple,"Callable[[_],None]"
test_user_group_mention_invalid,"Callable[[_],None]"
test_stream_single,"Callable[[_],None]"
test_stream_multiple,"Callable[[_],None]"
test_stream_case_sensitivity,"Callable[[_],None]"
test_stream_case_sensitivity_nonmatching,"Callable[[_],None]"
test_possible_stream_names,"Callable[[_],None]"
test_stream_unicode,"Callable[[_],None]"
test_stream_invalid,"Callable[[_],None]"
test_in_app_modal_link,"Callable[[_],None]"
test_image_preview_title,"Callable[[_],None]"
test_mit_rendering,"Callable[[_],None]"
test_url_to_a,"Callable[[_],None]"
test_disabled_code_block_processor,"Callable[[_],None]"
test_normal_link,"Callable[[_],None]"
test_relative_link,"Callable[[_],None]"
test_relative_link_streams_page,"Callable[[_],None]"
test_md_relative_link,"Callable[[_],None]"
test_render_message_api,"Callable[[_],None]"
test_render_mention_stream_api,"Callable[[_],None]"
test_bugdown_error_handling,"Callable[[_],None]"
test_send_message_errors,"Callable[[_],None]"
test_ultra_long_rendering,"Callable[[_],None]"
test_possible_avatar_emails,"Callable[[_],None]"
test_avatar_with_id,"Callable[[_],None]"
test_avatar_of_unregistered_user,"Callable[[_],None]"
__init__,"Callable[[_, Any],None]"
value,Any
value,"Callable[[_],Any]"
test_templates,"Callable[[_],None]"
render_templates,"Callable[[_, Iterable[str], Dict[str, Any]],None]"
kwargs,Any
test_markdown_in_template,"Callable[[_],None]"
test_markdown_tabbed_sections_extension,"Callable[[_],None]"
test_encoded_unicode_decimals_in_markdown_template,"Callable[[_],None]"
test_markdown_nested_code_blocks,"Callable[[_],None]"
test_custom_tos_template,"Callable[[_],None]"
test_custom_terms_of_service_template,"Callable[[_],None]"
test_custom_privacy_policy_template,"Callable[[_],None]"
test_custom_privacy_policy_template_with_absolute_url,"Callable[[_],None]"
setUp,"Callable[[_],None]"
custom_field_exists_in_realm,"Callable[[_, int],bool]"
field_id,int
test_list,"Callable[[_],None]"
test_list_order,"Callable[[_],None]"
test_create,"Callable[[_],None]"
test_create_choice_field,"Callable[[_],None]"
data,"Dict[str, Union[str, int]]"
test_not_realm_admin,"Callable[[_],None]"
test_delete,"Callable[[_],None]"
test_update,"Callable[[_],None]"
test_update_is_aware_of_uniqueness,"Callable[[_],None]"
assert_error_update_invalid_value,"Callable[[_, str, object, str],None]"
field_name,str
new_value,object
error_msg,str
test_reorder,"Callable[[_],None]"
test_reorder_duplicates,"Callable[[_],None]"
test_reorder_unauthorized,"Callable[[_],None]"
test_reorder_invalid,"Callable[[_],None]"
test_update_invalid_field,"Callable[[_],None]"
test_delete_field_value,"Callable[[_],None]"
data,"List[Dict[str, Union[int, str, List[int]]]]"
test_update_invalid_short_text,"Callable[[_],None]"
test_update_invalid_date,"Callable[[_],None]"
test_update_invalid_url,"Callable[[_],None]"
test_update_invalid_user_field,"Callable[[_],None]"
test_create_field_of_type_user,"Callable[[_],None]"
test_update_profile_data_successfully,"Callable[[_],None]"
expected_rendered_value,"Dict[Union[int, float, str, None], Union[str, None]]"
test_update_invalid_choice_field,"Callable[[_],None]"
test_update_choice_field_successfully,"Callable[[_],None]"
test_delete_internals,"Callable[[_],None]"
data,"List[Dict[str, Union[int, str, List[int]]]]"
test_null_value_and_rendered_value,"Callable[[_],None]"
test_is_slow_query,"Callable[[_],None]"
test_slow_query_log,"Callable[[_, Mock],None]"
mock_logging_info,Mock
test_slow_query_log_without_error_bot,"Callable[[_, Mock, Mock],None]"
mock_internal_send_message,Mock
mock_logging_info,Mock
test_get_last_message_id,"Callable[[_],None]"
test_topics_history_zephyr_mirror,"Callable[[_],None]"
test_topics_history,"Callable[[_],None]"
create_test_message,"Callable[[str],int]"
topic,str
test_bad_stream_id,"Callable[[_],None]"
make_realm,"Callable[[_, str],Realm]"
domain,str
create_user,"Callable[[_, str],UserProfile]"
email,str
test_realm_scenarios,"Callable[[_],None]"
assert_message_received,"Callable[[UserProfile, UserProfile],None]"
to_user,UserProfile
from_user,UserProfile
assert_invalid_email,"Callable[[],Any]"
test_addressee_for_user_ids,"Callable[[_],None]"
test_addressee_for_user_ids_nonexistent_id,"Callable[[_],None]"
assert_invalid_user_id,"Callable[[],Any]"
test_returns_for_internal_sends,"Callable[[_],None]"
test_error_handling,"Callable[[_],None]"
test_ensure_stream_gets_called,"Callable[[_],None]"
test_extract_recipients,"Callable[[_],None]"
test_near_pm_message_url,"Callable[[_],None]"
test_is_private_flag_not_leaked,"Callable[[_],None]"
test_auto_subbed_to_personals,"Callable[[_],None]"
test_personal_to_self,"Callable[[_],None]"
assert_personal,"Callable[[_, str, str, str],None]"
sender_email,str
receiver_email,str
content,str
test_personal,"Callable[[_],None]"
test_non_ascii_personal,"Callable[[_],None]"
assert_stream_message,"Callable[[_, str, str, str],None]"
stream_name,str
topic_name,str
content,str
test_performance,"Callable[[_],None]"
send_test_message,"Callable[[],None]"
test_not_too_many_queries,"Callable[[_],None]"
test_stream_message_dict,"Callable[[_],None]"
test_stream_message_unicode,"Callable[[_],None]"
test_message_mentions,"Callable[[_],None]"
test_is_private_flag,"Callable[[_],None]"
_send_stream_message,"Callable[[_, str, str, str],Set[int]]"
email,str
stream_name,str
content,str
test_unsub_mention,"Callable[[_],None]"
num_cordelia_messages,"Callable[[],int]"
test_message_bot_mentions,"Callable[[_],None]"
test_stream_message_mirroring,"Callable[[_],None]"
test_message_to_stream,"Callable[[_],None]"
test_non_ascii_stream_message,"Callable[[_],None]"
test_get_raw_unread_data_for_huddle_messages,"Callable[[_],None]"
test_bulk_message_fetching,"Callable[[_],None]"
test_applying_markdown,"Callable[[_],None]"
test_applying_markdown_invalid_format,"Callable[[_, Any],None]"
convert_mock,Any
test_reaction,"Callable[[_],None]"
test_missing_anchor,"Callable[[_],None]"
test_sew_messages_and_reaction,"Callable[[_],None]"
test_message_to_self,"Callable[[_],None]"
test_api_message_to_self,"Callable[[_],None]"
test_message_to_announce,"Callable[[_],None]"
test_message_fail_to_announce,"Callable[[_],None]"
test_api_message_with_default_to,"Callable[[_],None]"
test_message_to_nonexistent_stream,"Callable[[_],None]"
test_message_to_nonexistent_stream_with_bad_characters,"Callable[[_],None]"
test_personal_message,"Callable[[_],None]"
test_personal_message_copying_self,"Callable[[_],None]"
test_personal_message_to_nonexistent_user,"Callable[[_],None]"
test_personal_message_to_deactivated_user,"Callable[[_],None]"
test_invalid_type,"Callable[[_],None]"
test_empty_message,"Callable[[_],None]"
test_empty_string_topic,"Callable[[_],None]"
test_missing_topic,"Callable[[_],None]"
test_invalid_message_type,"Callable[[_],None]"
test_private_message_without_recipients,"Callable[[_],None]"
test_mirrored_huddle,"Callable[[_],None]"
test_mirrored_personal,"Callable[[_],None]"
test_mirrored_personal_to_someone_else,"Callable[[_],None]"
test_duplicated_mirrored_huddle,"Callable[[_],None]"
test_message_with_null_bytes,"Callable[[_],None]"
test_strip_message,"Callable[[_],None]"
test_long_message,"Callable[[_],None]"
test_long_topic,"Callable[[_],None]"
test_send_forged_message_as_not_superuser,"Callable[[_],None]"
test_send_message_as_not_superuser_to_different_domain,"Callable[[_],None]"
test_send_message_as_superuser_to_domain_that_dont_exist,"Callable[[_],None]"
test_send_message_when_sender_is_not_set,"Callable[[_],None]"
test_send_message_as_not_superuser_when_type_is_not_private,"Callable[[_],None]"
test_send_message_create_mirrored_message_user_returns_invalid_input,"Callable[[_, Any],None]"
create_mirrored_message_users_mock,Any
test_send_message_when_client_is_zephyr_mirror_but_string_id_is_not_zephyr,"Callable[[_, Any],None]"
create_mirrored_message_users_mock,Any
test_send_message_irc_mirror,"Callable[[_],None]"
test_unsubscribed_api_super_user,"Callable[[_],None]"
test_with,"Callable[[str, str, bool],None]"
sender_email,str
client,str
forged,bool
test_bot_can_send_to_owner_stream,"Callable[[_],None]"
test_notification_bot,"Callable[[_],None]"
test_create_mirror_user_despite_race,"Callable[[_],None]"
create_user,"Callable[[],UserProfile]"
kwargs,Any
test_guest_user,"Callable[[_],None]"
last_scheduled_message,"Callable[[_],ScheduledMessage]"
do_schedule_message,"Callable[[_, str, str, str, str, str, str, str],HttpResponse]"
msg_type,str
to,str
msg,str
defer_until,str
tz_guess,str
delivery_type,str
realm_str,str
test_schedule_message,"Callable[[_],None]"
test_scheduling_in_past,"Callable[[_],None]"
test_invalid_timestamp,"Callable[[_],None]"
test_missing_deliver_at,"Callable[[_],None]"
check_message,"Callable[[_, int, Union[str, None], Union[str, None]],Message]"
msg_id,int
test_save_message,"Callable[[_],None]"
test_fetch_raw_message,"Callable[[_],None]"
test_fetch_raw_message_stream_wrong_realm,"Callable[[_],None]"
test_fetch_raw_message_private_stream,"Callable[[_],None]"
test_edit_message_no_permission,"Callable[[_],None]"
test_edit_message_no_changes,"Callable[[_],None]"
test_edit_message_no_topic,"Callable[[_],None]"
test_edit_message_no_content,"Callable[[_],None]"
test_edit_message_history_disabled,"Callable[[_],None]"
test_edit_message_history,"Callable[[_],None]"
test_edit_link,"Callable[[_],None]"
test_edit_history_unedited,"Callable[[_],None]"
test_user_info_for_updates,"Callable[[_],None]"
test_edit_cases,"Callable[[_],None]"
test_edit_message_content_limit,"Callable[[_],None]"
set_message_editing_params,"Callable[[bool, int, bool],None]"
allow_message_editing,bool
message_content_edit_limit_seconds,int
allow_community_topic_editing,bool
do_edit_message_assert_success,"Callable[[int, str, bool],None]"
id_,int
unique_str,str
topic_only,bool
do_edit_message_assert_error,"Callable[[int, str, str, bool],None]"
id_,int
unique_str,str
error,str
topic_only,bool
test_allow_community_topic_editing,"Callable[[_],None]"
test_propagate_topic_forward,"Callable[[_],None]"
test_propagate_all_topics,"Callable[[_],None]"
test_invalid_sender,"Callable[[_],None]"
test_invalid_client,"Callable[[_],None]"
test_invalid_email,"Callable[[_],None]"
test_zephyr_mirror_new_recipient,"Callable[[_, Any],None]"
ignored,Any
test_zephyr_mirror_new_sender,"Callable[[_, Any],None]"
ignored,Any
test_irc_mirror,"Callable[[_],None]"
test_jabber_mirror,"Callable[[_],None]"
test_update_invalid_flags,"Callable[[_],None]"
change_star,"Callable[[_, List[int], bool],HttpResponse]"
add,bool
kwargs,Any
test_change_star,"Callable[[_],None]"
test_change_star_public_stream_historical,"Callable[[_],None]"
test_change_star_private_message_security,"Callable[[_],None]"
test_change_star_private_stream_security,"Callable[[_],None]"
test_new_message,"Callable[[_],None]"
test_change_star_public_stream_security_for_guest_user,"Callable[[_],None]"
test_change_star_private_stream_security_for_guest_user,"Callable[[_],None]"
test_bulk_access_messages_private_stream,"Callable[[_],None]"
test_bulk_access_messages_public_stream,"Callable[[_],None]"
test_basics,"Callable[[_],None]"
test_claim_attachment,"Callable[[_],None]"
test_presence_idle_user_ids,"Callable[[_],None]"
user_flags,"Dict[int, List[str]]"
assert_missing,"Callable[[List[int]],None]"
set_presence,"Callable[[int, str, int],None]"
user_id,int
client_name,str
ago,int
test_to_log_dict,"Callable[[_],None]"
test_basic_check_message_call,"Callable[[_],None]"
test_bot_pm_feature,"Callable[[_],None]"
test_bot_pm_error_handling,"Callable[[_],None]"
test_delete_message_by_user,"Callable[[_],None]"
set_message_deleting_params,"Callable[[bool, int],None]"
allow_message_deleting,bool
message_content_delete_limit_seconds,int
test_delete_message_by_admin,"Callable[[int],HttpResponse]"
msg_id,int
test_delete_message_by_owner,"Callable[[int],HttpResponse]"
msg_id,int
test_delete_message_by_other_user,"Callable[[int],HttpResponse]"
msg_id,int
test_maybe_catch_up_soft_deactivated_user,"Callable[[_],None]"
last_realm_audit_log_entry,"Callable[[str],RealmAuditLog]"
event_type,str
test_add_missing_messages,"Callable[[_],None]"
send_fake_message,"Callable[[str, Stream],Message]"
message_content,str
stream,Stream
test_user_message_filter,"Callable[[_],None]"
send_stream_message,"Callable[[str],None]"
content,str
send_personal_message,"Callable[[str],None]"
content,str
assert_um_count,"Callable[[UserProfile, int],None]"
user,UserProfile
count,int
assert_last_um_content,"Callable[[UserProfile, str, bool],None]"
user,UserProfile
content,str
negate,bool
test_hydrate_stream_recipient_info,"Callable[[_],None]"
test_hydrate_pm_recipient_info,"Callable[[_],None]"
test_messages_for_ids,"Callable[[_],None]"
test_update_first_visible_message_id,"Callable[[_],None]"
test_maybe_update_first_visible_message_id,"Callable[[_],None]"
setUpBeforeMigration,"Callable[[_, StateApps],None]"
apps,StateApps
send_fake_message,"Callable[[str, ModelBase],ModelBase]"
message_content,str
stream,ModelBase
test_tags_migrated,"Callable[[_],None]"
test_missing_emoji,"Callable[[_],None]"
test_add_invalid_emoji,"Callable[[_],None]"
test_add_deactivated_realm_emoji,"Callable[[_],None]"
test_valid_emoji,"Callable[[_],None]"
test_zulip_emoji,"Callable[[_],None]"
test_valid_emoji_react_historical,"Callable[[_],None]"
test_valid_realm_emoji,"Callable[[_],None]"
test_emoji_name_to_emoji_code,"Callable[[_],None]"
test_missing_message_id,"Callable[[_],None]"
test_invalid_message_id,"Callable[[_],None]"
test_inaccessible_message_id,"Callable[[_],None]"
test_add_existing_reaction,"Callable[[_],None]"
test_remove_nonexisting_reaction,"Callable[[_],None]"
test_remove_existing_reaction_with_renamed_emoji,"Callable[[_],None]"
test_remove_existing_reaction_with_deactivated_realm_emoji,"Callable[[_],None]"
test_add_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_remove_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
post_reaction,"Callable[[_, Dict[str, str], int, str],HttpResponse]"
message_id,int
sender,str
post_zulip_reaction,"Callable[[_, int, str],HttpResponse]"
message_id,int
sender,str
delete_reaction,"Callable[[_, Dict[str, str], int, str],HttpResponse]"
message_id,int
sender,str
delete_zulip_reaction,"Callable[[_, int, str],HttpResponse]"
message_id,int
sender,str
get_message_reactions,"Callable[[_, int, str, str],List[Reaction]]"
message_id,int
emoji_code,str
reaction_type,str
setUp,"Callable[[_],None]"
test_add_default_emoji_reaction,"Callable[[_],None]"
test_add_default_emoji_invalid_code,"Callable[[_],None]"
test_add_default_emoji_invalid_name,"Callable[[_],None]"
test_add_to_existing_renamed_default_emoji_reaction,"Callable[[_],None]"
test_add_duplicate_reaction,"Callable[[_],None]"
test_add_reaction_by_name,"Callable[[_],None]"
test_preserve_non_canonical_name,"Callable[[_],None]"
test_reaction_name_collapse,"Callable[[_],None]"
test_delete_default_emoji_reaction,"Callable[[_],None]"
test_delete_insufficient_arguments_reaction,"Callable[[_],None]"
test_delete_non_existing_emoji_reaction,"Callable[[_],None]"
test_delete_renamed_default_emoji,"Callable[[_],None]"
test_delete_reaction_by_name,"Callable[[_],None]"
test_react_historical,"Callable[[_],None]"
test_add_zulip_emoji_reaction,"Callable[[_],None]"
test_add_duplicate_zulip_reaction,"Callable[[_],None]"
test_add_invalid_extra_emoji,"Callable[[_],None]"
test_add_invalid_emoji_name,"Callable[[_],None]"
test_delete_zulip_emoji,"Callable[[_],None]"
test_delete_non_existent_zulip_reaction,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_add_realm_emoji,"Callable[[_],None]"
test_add_realm_emoji_invalid_code,"Callable[[_],None]"
test_add_realm_emoji_invalid_name,"Callable[[_],None]"
test_add_deactivated_realm_emoji,"Callable[[_],None]"
test_add_to_existing_deactivated_realm_emoji_reaction,"Callable[[_],None]"
test_remove_realm_emoji_reaction,"Callable[[_],None]"
test_remove_deactivated_realm_emoji_reaction,"Callable[[_],None]"
test_remove_non_existent_realm_emoji_reaction,"Callable[[_],None]"
test_invalid_reaction_type,"Callable[[_],None]"
test_add_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
test_remove_event,"Callable[[_],None]"
events,"List[Mapping[str, Any]]"
__init__,"Callable[[_],None]"
self.info_dict,"Dict[str, Dict[str, Any]]"
handle_message_data,"Callable[[_, int, int, int, Dict[str, Any], str],Union[str, None]]"
realm_id,int
message_id,int
sender_id,int
files_dir,str
write_info,"Callable[[_, str, int],None]"
output_dir,str
realm_id,int
attachments,"List[Dict[str, Any]]"
uploads_records,"List[Dict[str, Any]]"
add_attachment,"Callable[[Dict[str, Any]],None]"
add_upload,"Callable[[Dict[str, Any]],None]"
make_full_target_path,"Callable[[Dict[str, Any]],str]"
copy_file,"Callable[[Dict[str, Any]],None]"
_seq,"Callable[[],Callable[[],int]]"
next_one,"Callable[[],int]"
sequencer,"Callable[[],Callable[[str],int]]"
seq_dict,"Dict[str, Callable[[],int]]"
next_one,"Callable[[str],int]"
name,str
is_int,"Callable[[Any],bool]"
key,Any
__init__,"Callable[[_],None]"
has,"Callable[[_, Any],bool]"
their_id,Any
get,"Callable[[_, Any],int]"
their_id,Any
__init__,"Callable[[_],None]"
self.id_to_user_map,"Dict[int, Dict[str, Any]]"
self.name_to_mirror_user_map,"Dict[str, Dict[str, Any]]"
add_user,"Callable[[_, Dict[str, Any]],None]"
get_user,"Callable[[_, int],Dict[str, Any]]"
user_id,int
get_mirror_user,"Callable[[_, int, str],Dict[str, Any]]"
realm_id,int
name,str
_new_mirror_user_id,"Callable[[_],int]"
get_normal_users,"Callable[[_],List[Dict[str, Any]]]"
get_all_users,"Callable[[_],List[Dict[str, Any]]]"
__init__,"Callable[[_],None]"
self.stream_info,"Dict[int, Set[int]]"
set_info,"Callable[[_, int, Set[int]],None]"
stream_id,int
get_users,"Callable[[_, int],Set[int]]"
stream_id,int
build_zerver_realm,"Callable[[int, str, float, str],List[ZerverFieldsT]]"
realm_id,int
realm_subdomain,str
time,float
other_product,str
build_user_profile,"Callable[[str, Any, str, str, str, int, bool, bool, bool, bool, int, str, Union[str, None]],ZerverFieldsT]"
avatar_source,str
date_joined,Any
delivery_email,str
email,str
full_name,str
id,int
is_active,bool
is_realm_admin,bool
is_guest,bool
is_mirror_dummy,bool
realm_id,int
short_name,str
build_avatar,"Callable[[int, int, str, str, Any, List[ZerverFieldsT]],None]"
zulip_user_id,int
realm_id,int
email,str
avatar_url,str
timestamp,Any
make_subscriber_map,"Callable[[List[ZerverFieldsT]],Dict[int, Set[int]]]"
subscriber_map,"Dict[int, Set[int]]"
build_subscription,"Callable[[int, int, int],ZerverFieldsT]"
recipient_id,int
user_id,int
subscription_id,int
build_recipient,"Callable[[int, int, int],ZerverFieldsT]"
type_id,int
recipient_id,int
type,int
build_realm,"Callable[[List[ZerverFieldsT], int, str],ZerverFieldsT]"
realm_id,int
domain_name,str
build_usermessages,"Callable[[List[ZerverFieldsT], Dict[int, Set[int]], int, List[int], int],None]"
subscriber_map,"Dict[int, Set[int]]"
recipient_id,int
message_id,int
build_user_message,"Callable[[int, int, bool, bool],ZerverFieldsT]"
user_id,int
message_id,int
is_private,bool
is_mentioned,bool
build_defaultstream,"Callable[[int, int, int],ZerverFieldsT]"
realm_id,int
stream_id,int
defaultstream_id,int
build_stream,"Callable[[Any, int, str, str, int, bool, bool],ZerverFieldsT]"
date_created,Any
realm_id,int
name,str
description,str
stream_id,int
deactivated,bool
invite_only,bool
build_message,"Callable[[str, float, int, str, Union[str, None], int, int, bool, bool, bool],ZerverFieldsT]"
topic_name,str
pub_date,float
message_id,int
content,str
user_id,int
recipient_id,int
has_image,bool
has_link,bool
has_attachment,bool
build_attachment,"Callable[[int, Set[int], int, ZerverFieldsT, str, List[ZerverFieldsT]],None]"
realm_id,int
user_id,int
fileinfo,ZerverFieldsT
s3_path,str
process_avatars,"Callable[[List[ZerverFieldsT], str, int, int, str],List[ZerverFieldsT]]"
avatar_dir,str
realm_id,int
threads,int
size_url_suffix,str
get_avatar,"Callable[[List[str]],int]"
write_avatar_png,"Callable[[str, int, int, bytes],ZerverFieldsT]"
avatar_folder,str
realm_id,int
user_id,int
bits,bytes
process_uploads,"Callable[[List[ZerverFieldsT], str, int],List[ZerverFieldsT]]"
upload_dir,str
threads,int
get_uploads,"Callable[[List[str]],int]"
build_realm_emoji,"Callable[[int, str, int, str],ZerverFieldsT]"
realm_id,int
name,str
id,int
file_name,str
process_emojis,"Callable[[List[ZerverFieldsT], str, ZerverFieldsT, int],List[ZerverFieldsT]]"
emoji_dir,str
emoji_url_map,ZerverFieldsT
threads,int
get_emojis,"Callable[[List[str]],int]"
create_converted_data_files,"Callable[[Any, str, str],None]"
data,Any
output_dir,str
file_path,str
get_user_full_name,"Callable[[ZerverFieldsT],str]"
user,ZerverFieldsT
convert_to_zulip_markdown,"Callable[[str, List[ZerverFieldsT], AddedChannelsT, AddedUsersT],Tuple[str, List[int], bool]]"
text,str
added_channels,AddedChannelsT
added_users,AddedUsersT
get_user_mentions,"Callable[[str, List[ZerverFieldsT], AddedUsersT],Tuple[str, Union[int, None]]]"
token,str
added_users,AddedUsersT
convert_markdown_syntax,"Callable[[str, str, str],str]"
text,str
regex,str
zulip_keyword,str
convert_link_format,"Callable[[str],Tuple[str, bool]]"
text,str
convert_mailto_format,"Callable[[str],Tuple[str, bool]]"
text,str
str_date_to_float,"Callable[[str],float]"
date_str,str
untar_input_file,"Callable[[str],str]"
tar_file,str
read_user_data,"Callable[[str],List[ZerverFieldsT]]"
data_dir,str
convert_user_data,"Callable[[UserHandler, bool, IdMapper, List[ZerverFieldsT], int],None]"
user_handler,UserHandler
slim_mode,bool
user_id_mapper,IdMapper
realm_id,int
process,"Callable[[ZerverFieldsT],ZerverFieldsT]"
in_dict,ZerverFieldsT
convert_avatar_data,"Callable[[str, List[ZerverFieldsT], IdMapper, int],List[ZerverFieldsT]]"
avatar_folder,str
user_id_mapper,IdMapper
realm_id,int
read_room_data,"Callable[[str],List[ZerverFieldsT]]"
data_dir,str
convert_room_data,"Callable[[List[ZerverFieldsT], SubscriberHandler, IdMapper, IdMapper, int],List[ZerverFieldsT]]"
subscriber_handler,SubscriberHandler
stream_id_mapper,IdMapper
user_id_mapper,IdMapper
realm_id,int
get_invite_only,"Callable[[str],bool]"
v,str
make_realm,"Callable[[int],ZerverFieldsT]"
realm_id,int
write_avatar_data,"Callable[[List[ZerverFieldsT], str, IdMapper, int],None]"
output_dir,str
user_id_mapper,IdMapper
realm_id,int
write_emoticon_data,"Callable[[int, str, str],List[ZerverFieldsT]]"
realm_id,int
data_dir,str
output_dir,str
process,"Callable[[ZerverFieldsT],ZerverFieldsT]"
data,ZerverFieldsT
write_message_data,"Callable[[int, bool, str, List[ZerverFieldsT], Dict[int, Set[int]], str, str, bool, IdMapper, IdMapper, UserHandler, AttachmentHandler],None]"
realm_id,int
slim_mode,bool
message_key,str
subscriber_map,"Dict[int, Set[int]]"
data_dir,str
output_dir,str
masking_content,bool
stream_id_mapper,IdMapper
user_id_mapper,IdMapper
user_handler,UserHandler
attachment_handler,AttachmentHandler
get_stream_recipient_id,"Callable[[ZerverFieldsT],int]"
raw_message,ZerverFieldsT
get_pm_recipient_id,"Callable[[ZerverFieldsT],int]"
raw_message,ZerverFieldsT
get_hipchat_sender_id,"Callable[[int, bool, Dict[str, Any], IdMapper, UserHandler],Union[int, None]]"
realm_id,int
slim_mode,bool
user_id_mapper,IdMapper
user_handler,UserHandler
process_message_file,"Callable[[int, bool, str, str, str, Callable[[ZerverFieldsT],int], str, Dict[int, Set[int]], str, str, bool, bool, IdMapper, UserHandler, AttachmentHandler],None]"
realm_id,int
slim_mode,bool
fn,str
fn_id,str
files_dir,str
get_recipient_id,"Callable[[ZerverFieldsT],int]"
message_key,str
subscriber_map,"Dict[int, Set[int]]"
data_dir,str
output_dir,str
is_pm_data,bool
masking_content,bool
user_id_mapper,IdMapper
user_handler,UserHandler
attachment_handler,AttachmentHandler
get_raw_messages,"Callable[[str],List[ZerverFieldsT]]"
fn,str
process_batch,"Callable[[List[Any]],None]"
process_raw_message_batch,"Callable[[int, List[Dict[str, Any]], Dict[int, Set[int]], IdMapper, UserHandler, AttachmentHandler, Callable[[ZerverFieldsT],int], bool, str],None]"
realm_id,int
raw_messages,"List[Dict[str, Any]]"
subscriber_map,"Dict[int, Set[int]]"
user_id_mapper,IdMapper
user_handler,UserHandler
attachment_handler,AttachmentHandler
get_recipient_id,"Callable[[ZerverFieldsT],int]"
is_pm_data,bool
output_dir,str
fix_mentions,"Callable[[str, Set[int]],str]"
content,str
mention_map,"Dict[int, Set[int]]"
make_user_messages,"Callable[[List[ZerverFieldsT], Dict[int, Set[int]], bool, Dict[int, Set[int]]],List[ZerverFieldsT]]"
subscriber_map,"Dict[int, Set[int]]"
is_pm_data,bool
mention_map,"Dict[int, Set[int]]"
do_convert_data,"Callable[[str, str, bool],None]"
input_tar_file,str
output_dir,str
masking_content,bool
rm_tree,"Callable[[str],None]"
path,str
slack_workspace_to_realm,"Callable[[str, int, List[ZerverFieldsT], str, str, ZerverFieldsT],Tuple[ZerverFieldsT, AddedUsersT, AddedRecipientsT, AddedChannelsT, List[ZerverFieldsT], ZerverFieldsT]]"
domain_name,str
realm_id,int
realm_subdomain,str
slack_data_dir,str
custom_emoji_list,ZerverFieldsT
build_realmemoji,"Callable[[ZerverFieldsT, int],Tuple[List[ZerverFieldsT], ZerverFieldsT]]"
custom_emoji_list,ZerverFieldsT
realm_id,int
users_to_zerver_userprofile,"Callable[[str, List[ZerverFieldsT], int, Any, str],Tuple[List[ZerverFieldsT], List[ZerverFieldsT], AddedUsersT, List[ZerverFieldsT], List[ZerverFieldsT]]]"
slack_data_dir,str
realm_id,int
timestamp,Any
domain_name,str
slack_user_custom_field_map,ZerverFieldsT
custom_field_map,ZerverFieldsT
build_customprofile_field,"Callable[[List[ZerverFieldsT], ZerverFieldsT, int, int, ZerverFieldsT],Tuple[ZerverFieldsT, int]]"
fields,ZerverFieldsT
customprofilefield_id,int
realm_id,int
custom_field_map,ZerverFieldsT
process_slack_custom_fields,"Callable[[ZerverFieldsT, ZerverFieldsT],None]"
user,ZerverFieldsT
slack_user_custom_field_map,ZerverFieldsT
build_customprofilefields_values,"Callable[[ZerverFieldsT, ZerverFieldsT, int, int, List[ZerverFieldsT]],int]"
custom_field_map,ZerverFieldsT
fields,ZerverFieldsT
user_id,int
custom_field_id,int
process_customprofilefields,"Callable[[List[ZerverFieldsT], List[ZerverFieldsT]],None]"
get_user_email,"Callable[[ZerverFieldsT, str],str]"
user,ZerverFieldsT
domain_name,str
build_avatar_url,"Callable[[str, str, str],str]"
slack_user_id,str
team_id,str
avatar_hash,str
get_admin,"Callable[[ZerverFieldsT],bool]"
user,ZerverFieldsT
get_user_timezone,"Callable[[ZerverFieldsT],str]"
user,ZerverFieldsT
channels_to_zerver_stream,"Callable[[str, int, AddedUsersT, List[ZerverFieldsT]],Tuple[List[ZerverFieldsT], List[ZerverFieldsT], AddedChannelsT, List[ZerverFieldsT], List[ZerverFieldsT], AddedRecipientsT]]"
slack_data_dir,str
realm_id,int
added_users,AddedUsersT
get_subscription,"Callable[[List[str], List[ZerverFieldsT], int, AddedUsersT, int],int]"
recipient_id,int
added_users,AddedUsersT
subscription_id,int
convert_slack_workspace_messages,"Callable[[str, List[ZerverFieldsT], int, AddedUsersT, AddedRecipientsT, AddedChannelsT, ZerverFieldsT, List[ZerverFieldsT], str, str, int],Tuple[List[ZerverFieldsT], List[ZerverFieldsT], List[ZerverFieldsT]]]"
slack_data_dir,str
realm_id,int
added_users,AddedUsersT
added_recipient,AddedRecipientsT
added_channels,AddedChannelsT
realm,ZerverFieldsT
domain_name,str
output_dir,str
chunk_size,int
get_all_messages,"Callable[[str, AddedChannelsT],List[ZerverFieldsT]]"
slack_data_dir,str
added_channels,AddedChannelsT
channel_message_to_zerver_message,"Callable[[int, List[ZerverFieldsT], AddedUsersT, AddedRecipientsT, List[ZerverFieldsT], List[ZerverFieldsT], Dict[int, Set[int]], AddedChannelsT, str],Tuple[List[ZerverFieldsT], List[ZerverFieldsT], List[ZerverFieldsT], List[ZerverFieldsT], List[ZerverFieldsT]]]"
realm_id,int
added_users,AddedUsersT
added_recipient,AddedRecipientsT
subscriber_map,"Dict[int, Set[int]]"
added_channels,AddedChannelsT
domain_name,str
process_message_files,"Callable[[ZerverFieldsT, str, int, int, str, List[ZerverFieldsT], AddedUsersT, List[ZerverFieldsT], List[ZerverFieldsT]],Dict[str, Any]]"
message,ZerverFieldsT
domain_name,str
realm_id,int
message_id,int
user,str
added_users,AddedUsersT
get_attachment_path_and_content,"Callable[[ZerverFieldsT, int],Tuple[str, str]]"
fileinfo,ZerverFieldsT
realm_id,int
build_reactions,"Callable[[List[ZerverFieldsT], List[ZerverFieldsT], AddedUsersT, int, ZerverFieldsT, List[ZerverFieldsT]],None]"
added_users,AddedUsersT
message_id,int
name_to_codepoint,ZerverFieldsT
build_uploads,"Callable[[int, int, str, ZerverFieldsT, str, List[ZerverFieldsT]],None]"
user_id,int
realm_id,int
email,str
fileinfo,ZerverFieldsT
s3_path,str
get_message_sending_user,"Callable[[ZerverFieldsT],Union[str, None]]"
message,ZerverFieldsT
do_convert_data,"Callable[[str, str, str, int],None]"
slack_zip_file,str
output_dir,str
token,str
threads,int
get_data_file,"Callable[[str],Any]"
path,str
get_slack_api_data,"Callable[[str, str, str],Any]"
token,str
slack_api_url,str
get_param,str
gitter_workspace_to_realm,"Callable[[str, GitterDataT, str],Tuple[ZerverFieldsT, List[ZerverFieldsT], Dict[str, int]]]"
domain_name,str
gitter_data,GitterDataT
realm_subdomain,str
build_userprofile,"Callable[[Any, str, GitterDataT],Tuple[List[ZerverFieldsT], List[ZerverFieldsT], Dict[str, int]]]"
timestamp,Any
domain_name,str
gitter_data,GitterDataT
get_user_email,"Callable[[ZerverFieldsT, str],str]"
user_data,ZerverFieldsT
domain_name,str
build_stream_and_defaultstream,"Callable[[Any],Tuple[List[ZerverFieldsT], List[ZerverFieldsT]]]"
timestamp,Any
build_recipient_and_subscription,"Callable[[List[ZerverFieldsT], List[ZerverFieldsT]],Tuple[List[ZerverFieldsT], List[ZerverFieldsT]]]"
convert_gitter_workspace_messages,"Callable[[GitterDataT, str, Dict[int, Set[int]], Dict[str, int], Dict[str, str], int],None]"
gitter_data,GitterDataT
output_dir,str
subscriber_map,"Dict[int, Set[int]]"
chunk_size,int
do_convert_data,"Callable[[str, str, int],None]"
gitter_data_file,str
output_dir,str
threads,int
attachment,"Dict[str, List[Any]]"
write_data_to_file,"Callable[[str, Any],None]"
output_file,str
data,Any
assign_queue,"Callable[[str, bool, str],Callable[[Type[ConcreteQueueWorker]],Type[ConcreteQueueWorker]]]"
queue_name,str
enabled,bool
queue_type,str
worker_classes,"Dict[str, Type[QueueProcessingWorker]]"
queues,"Dict[str, Dict[str, Type[QueueProcessingWorker]]]"
register_worker,"Callable[[str, Type[QueueProcessingWorker], str],None]"
queue_name,str
queue_type,str
get_worker,"Callable[[str],QueueProcessingWorker]"
queue_name,str
check_and_send_restart_signal,"Callable[[],None]"
retry_send_email_failures,"Callable[[Callable[[ConcreteQueueWorker, Dict[str, Any]],None]],Callable[[QueueProcessingWorker, Dict[str, Any]],None]]"
func,"Callable[[ConcreteQueueWorker, Dict[str, Any]],None]"
wrapper,"Callable[[ConcreteQueueWorker, Dict[str, Any]],None]"
worker,ConcreteQueueWorker
on_failure,"Callable[[Dict[str, Any]],None]"
queue_name,str
__init__,"Callable[[_],None]"
self.q,SimpleQueueClient
consume,"Callable[[_, Dict[str, Any]],None]"
consume_wrapper,"Callable[[_, Dict[str, Any]],None]"
_log_problem,"Callable[[_],None]"
setup,"Callable[[_],None]"
start,"Callable[[_],None]"
stop,"Callable[[_],None]"
start,"Callable[[_],None]"
consume_batch,"Callable[[_, List[Dict[str, Any]]],None]"
event,"List[Dict[str, Any]]"
consume,"Callable[[_, Dict[str, Any]],None]"
consume,"Callable[[_, Dict[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
events_by_recipient,"Dict[int, List[Dict[str, Any]]]"
consume,"Callable[[_, Dict[str, Any]],None]"
ensure_timer,"Callable[[_],None]"
stop_timer,"Callable[[_],None]"
maybe_send_batched_emails,"Callable[[_],None]"
consume,"Callable[[_, Dict[str, Any]],None]"
start,"Callable[[_],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume_batch,"Callable[[_, List[Any]],None]"
__init__,"Callable[[_],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
get_bot_api_client,"Callable[[_, UserProfile],EmbeddedBotHandler]"
user_profile,UserProfile
consume,"Callable[[_, Mapping[str, Any]],None]"
consume,"Callable[[_, Mapping[str, Any]],None]"
create_parser,"Callable[[_],ArgumentParser]"
args,Any
kwargs,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
options,str
stream_dict,"Dict[str, Dict[str, Any]]"
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
options,Any
error,"Callable[[],None]"
args,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
strip_whitespaces,"Callable[[str],str]"
src,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
handle_frontend_locales,"Callable[[_],None]"
frontend_source,str
frontend_output,str
frontend_namespace,str
all,bool
options,Any
handle_django_locales,"Callable[[_],None]"
args,Any
options,Any
my_templatize,"Callable[[str],str]"
src,str
args,Any
kwargs,Any
extract_strings,"Callable[[_, str],List[str]]"
data,str
ignore_javascript_comments,"Callable[[_, str],str]"
data,str
get_template_dir,"Callable[[_],str]"
get_namespace,"Callable[[_],str]"
get_base_path,"Callable[[_],str]"
get_new_strings,"Callable[[_, Mapping[str, str], List[str], str],Dict[str, str]]"
locale,str
write_translation_strings,"Callable[[_, List[str]],None]"
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
do_destroy_and_rebuild_database,"Callable[[_, str],None]"
db_name,str
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
create_parser,"Callable[[_],ArgumentParser]"
args,Any
kwargs,Any
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
purge_queue,"Callable[[str],None]"
queue_name,str
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
create_language_name_map,"Callable[[_],None]"
get_po_filename,"Callable[[_, str, str],str]"
locale_path,str
locale,str
get_json_filename,"Callable[[_, str, str],str]"
locale_path,str
locale,str
get_name_from_po_file,"Callable[[_, str, str],str]"
po_filename,str
locale,str
extract_language_options,"Callable[[_],None]"
data,"Dict[str, List[Dict[str, Any]]]"
get_translation_percentage,"Callable[[_, str, str],int]"
locale_path,str
locale,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
handle_callback_exception,"Callable[[_],None]"
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_, str],None]"
addrport,str
options,bool
inner_run,"Callable[[],None]"
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
fix_all_users,"Callable[[_, Realm],None]"
realm,Realm
fix_emails,"Callable[[_, Union[Realm, None], List[str]],None]"
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
do_update,"Callable[[Iterable[int]],None]"
construct_message,"Callable[[_, ScheduledMessage],Dict[str, Any]]"
scheduled_message,ScheduledMessage
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, argparse.ArgumentParser],None]"
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, argparse.ArgumentParser],None]"
handle,"Callable[[_],None]"
args,Any
options,Any
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
send,"Callable[[_, List[UserProfile]],None]"
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
_check_within_range,"Callable[[_, str, Callable[[],int], Union[Callable[[str, int],None], None]],None]"
key,str
count_func,"Callable[[],int]"
trim_func,"Union[Callable[[str, int],None], None]"
handle,"Callable[[_],None]"
args,Any
options,Any
trim_func,"Union[Callable[[str, int],None], None]"
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
options,str
_does_fixture_path_exist,"Callable[[_, str],bool]"
fixture_path,str
_get_fixture_as_json,"Callable[[_, str],str]"
fixture_path,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, argparse.ArgumentParser],None]"
handle,"Callable[[_],None]"
args,Any
options,Any
create_index_if_not_exist,"Callable[[str, str, str, str],None]"
index_name,str
table_name,str
column_string,str
where_clause,str
create_indexes,"Callable[[],None]"
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
exit_with_three,"Callable[[int, FrameType],None]"
signal,int
frame,FrameType
run_threaded_workers,"Callable[[List[str], logging.Logger],None]"
signal_handler,"Callable[[int, FrameType],None]"
signal,int
frame,FrameType
__init__,"Callable[[_, str],None]"
queue_name,str
run,"Callable[[_],None]"
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
handle,"Callable[[_],None]"
args,Any
kwargs,str
sync_ldap_user_data,"Callable[[],None]"
handle,"Callable[[_],None]"
args,Any
options,Any
get_unread_messages,"Callable[[UserProfile],List[Dict[str, Any]]]"
user_profile,UserProfile
get_muted_streams,"Callable[[UserProfile, Set[int]],Set[int]]"
user_profile,UserProfile
show_all_unread,"Callable[[UserProfile],None]"
user_profile,UserProfile
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
bulk_delete_cache_keys,"Callable[[List[int]],None]"
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
create_users,"Callable[[Realm, Iterable[Tuple[str, str]], Union[int, None]],None]"
realm,Realm
name_list,"Iterable[Tuple[str, str]]"
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
handle,"Callable[[_],None]"
args,Any
options,str
handle,"Callable[[_],None]"
args,Any
options,Any
create_parser,"Callable[[_],ArgumentParser]"
args,Any
kwargs,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
query_ldap,"Callable[[],None]"
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
and_n_others,"Callable[[List[str], int],str]"
limit,int
display_list,"Callable[[List[str], int],str]"
display_limit,int
md_extensions,"Union[List[Any], None]"
render_markdown_path,"Callable[[str, Union[Dict[Any, Any], None], Union[bool, None]],str]"
markdown_file_path,str
context,"Union[Dict[Any, Any], None]"
__init__,"Callable[[_, str, str],None]"
sourcefile,str
csp_nonce,str
render,"Callable[[_, Dict[str, Any]],str]"
hash_util_encode,"Callable[[str],str]"
string,str
encode_stream,"Callable[[int, str],str]"
stream_id,int
stream_name,str
personal_narrow_url,"Callable[[Realm, UserProfile],str]"
realm,Realm
sender,UserProfile
huddle_narrow_url,"Callable[[Realm, List[int]],str]"
realm,Realm
stream_narrow_url,"Callable[[Realm, Stream],str]"
realm,Realm
stream,Stream
topic_narrow_url,"Callable[[Realm, Stream, str],str]"
realm,Realm
stream,Stream
topic,str
near_message_url,"Callable[[Realm, Dict[str, Any]],str]"
realm,Realm
near_stream_message_url,"Callable[[Realm, Dict[str, Any]],str]"
realm,Realm
near_pm_message_url,"Callable[[Realm, Dict[str, Any]],str]"
realm,Realm
run_parallel,"Callable[[Callable[[JobData],int], Iterable[JobData], int],Iterator[Tuple[int, JobData]]]"
job,"Callable[[JobData],int]"
threads,int
wait_and_print,"Callable[[int],int]"
x,int
get_raw_user_data,"Callable[[int, bool],Dict[int, Dict[str, str]]]"
realm_id,int
client_gravatar,bool
profiles_by_user_id,"Dict[int, Dict[str, Any]]"
always_want,"Callable[[str],bool]"
msg_type,str
fetch_initial_state_data,"Callable[[UserProfile, Union[Iterable[str], None], str, bool, bool],Dict[str, Any]]"
user_profile,UserProfile
event_types,"Union[Iterable[str], None]"
queue_id,str
client_gravatar,bool
include_subscribers,bool
want,"Callable[[str],bool]"
remove_message_id_from_unread_mgs,"Callable[[Dict[str, Dict[str, Any]], int],None]"
state,"Dict[str, Dict[str, Any]]"
message_id,int
apply_events,"Callable[[Dict[str, Any], Iterable[Dict[str, Any]], UserProfile, bool, bool, Union[Iterable[str], None]],None]"
events,"Iterable[Dict[str, Any]]"
user_profile,UserProfile
client_gravatar,bool
include_subscribers,bool
fetch_event_types,"Union[Iterable[str], None]"
apply_event,"Callable[[Dict[str, Any], Dict[str, Any], UserProfile, bool, bool],None]"
user_profile,UserProfile
client_gravatar,bool
include_subscribers,bool
name,"Callable[[Dict[str, Any]],str]"
do_events_register,"Callable[[UserProfile, Client, bool, bool, Union[Iterable[str], None], int, bool, bool, Iterable[Sequence[str]], Union[Iterable[str], None]],Dict[str, Any]]"
user_profile,UserProfile
user_client,Client
apply_markdown,bool
client_gravatar,bool
event_types,"Union[Iterable[str], None]"
queue_lifespan_secs,int
all_public_streams,bool
include_subscribers,bool
narrow,Iterable[Sequence[str]]
fetch_event_types,"Union[Iterable[str], None]"
event_types_set,"Union[Set[str], None]"
post_process_state,"Callable[[Dict[str, Any]],None]"
messages_for_ids,"Callable[[List[int], Dict[int, List[str]], Dict[int, Dict[str, str]], bool, bool, bool],List[Dict[str, Any]]]"
user_message_flags,"Dict[int, List[str]]"
search_fields,"Dict[int, Dict[str, str]]"
apply_markdown,bool
client_gravatar,bool
allow_edit_history,bool
message_list,"List[Dict[str, Any]]"
sew_messages_and_reactions,"Callable[[List[Dict[str, Any]], List[Dict[str, Any]]],List[Dict[str, Any]]]"
messages,"List[Dict[str, Any]]"
reactions,"List[Dict[str, Any]]"
sew_messages_and_submessages,"Callable[[List[Dict[str, Any]], List[Dict[str, Any]]],None]"
messages,"List[Dict[str, Any]]"
submessages,"List[Dict[str, Any]]"
extract_message_dict,"Callable[[bytes],Dict[str, Any]]"
message_bytes,bytes
stringify_message_dict,"Callable[[Dict[str, Any]],bytes]"
message_to_dict_json,"Callable[[Message],bytes]"
message,Message
save_message_rendered_content,"Callable[[Message, str],str]"
message,Message
content,str
wide_dict,"Callable[[Message],Dict[str, Any]]"
message,Message
post_process_dicts,"Callable[[List[Dict[str, Any]], bool, bool],None]"
objs,"List[Dict[str, Any]]"
apply_markdown,bool
client_gravatar,bool
finalize_payload,"Callable[[Dict[str, Any], bool, bool],None]"
apply_markdown,bool
client_gravatar,bool
to_dict_uncached,"Callable[[Message],bytes]"
message,Message
to_dict_uncached_helper,"Callable[[Message],Dict[str, Any]]"
message,Message
get_raw_db_rows,"Callable[[List[int]],List[Dict[str, Any]]]"
build_message_dict,"Callable[[Union[Message, None], int, Union[datetime.datetime, None], Union[str, None], str, str, datetime.datetime, Union[str, None], Union[int, None], int, int, str, int, int, int, List[Dict[str, Any]], List[Dict[str, Any]]],Dict[str, Any]]"
message_id,int
last_edit_time,"Union[datetime.datetime, None]"
content,str
topic_name,str
sender_id,int
sender_realm_id,int
sending_client_name,str
recipient_id,int
recipient_type,int
recipient_type_id,int
reactions,"List[Dict[str, Any]]"
submessages,"List[Dict[str, Any]]"
bulk_hydrate_sender_info,"Callable[[List[Dict[str, Any]]],None]"
objs,"List[Dict[str, Any]]"
hydrate_recipient_info,"Callable[[Dict[str, Any]],None]"
set_sender_avatar,"Callable[[Dict[str, Any], bool],None]"
client_gravatar,bool
access_message,"Callable[[UserProfile, int],Tuple[Message, Union[UserMessage, None]]]"
user_profile,UserProfile
message_id,int
has_message_access,"Callable[[UserProfile, Message, Union[UserMessage, None]],bool]"
user_profile,UserProfile
message,Message
bulk_access_messages,"Callable[[UserProfile, Sequence[Message]],List[Message]]"
user_profile,UserProfile
render_markdown,"Callable[[Message, str, Union[Realm, None], Union[RealmAlertWords, None], Union[Set[int], None], Union[bugdown.MentionData, None], Union[bool, None]],str]"
message,Message
content,str
user_ids,"Union[Set[int], None]"
mention_data,"Union[bugdown.MentionData, None]"
do_render_markdown,"Callable[[Message, str, Realm, RealmAlertWords, Set[int], bool, bool, Union[bugdown.MentionData, None], Union[bool, None]],str]"
message,Message
content,str
realm,Realm
realm_alert_words,RealmAlertWords
sent_by_bot,bool
translate_emoticons,bool
mention_data,"Union[bugdown.MentionData, None]"
huddle_users,"Callable[[int],str]"
recipient_id,int
display_recipient,"Union[str, List[Dict[str, Any]]]"
aggregate_message_dict,"Callable[[Dict[int, Dict[str, Any]], List[str], bool],List[Dict[str, Any]]]"
input_dict,"Dict[int, Dict[str, Any]]"
collect_senders,bool
get_inactive_recipient_ids,"Callable[[UserProfile],List[int]]"
user_profile,UserProfile
get_muted_stream_ids,"Callable[[UserProfile],List[int]]"
user_profile,UserProfile
get_starred_message_ids,"Callable[[UserProfile],List[int]]"
user_profile,UserProfile
get_raw_unread_data,"Callable[[UserProfile],RawUnreadMessagesResult]"
user_profile,UserProfile
is_row_muted,"Callable[[int, int, str],bool]"
stream_id,int
recipient_id,int
topic,str
get_huddle_users,"Callable[[int],str]"
recipient_id,int
aggregate_unread_data,"Callable[[RawUnreadMessagesResult],UnreadMessagesResult]"
raw_data,RawUnreadMessagesResult
result,UnreadMessagesResult
apply_unread_message_event,"Callable[[UserProfile, Dict[str, Any], Dict[str, Any], List[str]],None]"
user_profile,UserProfile
estimate_recent_messages,"Callable[[Realm, int],int]"
realm,Realm
hours,int
get_first_visible_message_id,"Callable[[Realm],int]"
realm,Realm
maybe_update_first_visible_message_id,"Callable[[Realm, int],None]"
realm,Realm
lookback_hours,int
update_first_visible_message_id,"Callable[[Realm],None]"
realm,Realm
__init__,"Callable[[_, str, UserProfile, str],None]"
token,str
user_profile,UserProfile
service_name,str
self.token,str
self.user_profile,UserProfile
self.service_name,str
send_data_to_server,"Callable[[_, str, Any],Response]"
base_url,str
request_data,Any
process_success,"Callable[[_, Dict[str, Any], Dict[str, Any]],Union[Dict[str, Any], None]]"
send_data_to_server,"Callable[[_, str, Any],Response]"
base_url,str
request_data,Any
process_success,"Callable[[_, Dict[str, Any], Dict[str, Any]],Union[Dict[str, Any], None]]"
get_service_interface_class,"Callable[[str],Any]"
interface,str
get_outgoing_webhook_service_handler,"Callable[[Service],Any]"
service,Service
send_response_message,"Callable[[str, Dict[str, Any], Dict[str, Any]],None]"
bot_id,str
fail_with_message,"Callable[[Dict[str, Any], str],None]"
failure_message,str
get_message_url,"Callable[[Dict[str, Any]],str]"
notify_bot_owner,"Callable[[Dict[str, Any], Dict[str, Any], Union[int, None], Union[AnyStr, None], Union[str, None], Union[Exception, None]],None]"
request_retry,"Callable[[Dict[str, Any], Dict[str, Any], Union[str, None]],None]"
failure_processor,"Callable[[Dict[str, Any]],None]"
process_success_response,"Callable[[Dict[str, Any], Any, Response],None]"
service_handler,Any
response,Response
do_rest_call,"Callable[[str, Any, Dict[str, Any], Any],None]"
base_url,str
request_data,Any
service_handler,Any
b64_to_hex,"Callable[[bytes],str]"
data,bytes
hex_to_b64,"Callable[[str],bytes]"
data,str
get_apns_client,"Callable[[],Any]"
apns_enabled,"Callable[[],bool]"
send_apple_push_notification,"Callable[[int, List[DeviceToken], Dict[str, Any], bool],None]"
user_id,int
remote,bool
client,APNsClient
gcm_enabled,"Callable[[],bool]"
send_android_push_notification_to_user,"Callable[[UserProfile, Dict[str, Any]],None]"
user_profile,UserProfile
send_android_push_notification,"Callable[[List[DeviceToken], Dict[str, Any], bool],None]"
remote,bool
uses_notification_bouncer,"Callable[[],bool]"
send_notifications_to_bouncer,"Callable[[int, Dict[str, Any], Dict[str, Any]],None]"
user_profile_id,int
send_json_to_push_bouncer,"Callable[[str, str, Dict[str, Any]],None]"
method,str
endpoint,str
send_to_push_bouncer,"Callable[[str, str, Union[str, Dict[str, Any]], Union[Dict[str, Any], None]],None]"
method,str
endpoint,str
post_data,"Union[str, Dict[str, Any]]"
extra_headers,"Union[Dict[str, Any], None]"
num_push_devices_for_user,"Callable[[UserProfile, Union[int, None]],PushDeviceToken]"
user_profile,UserProfile
add_push_device_token,"Callable[[UserProfile, bytes, int, Union[str, None]],None]"
user_profile,UserProfile
token_str,bytes
kind,int
remove_push_device_token,"Callable[[UserProfile, bytes, int],None]"
user_profile,UserProfile
token_str,bytes
kind,int
push_notifications_enabled,"Callable[[],bool]"
initialize_push_notifications,"Callable[[],None]"
get_gcm_alert,"Callable[[Message],str]"
message,Message
get_mobile_push_content,"Callable[[str],str]"
rendered_content,str
get_text,"Callable[[LH.HtmlElement],str]"
format_as_quote,"Callable[[str],str]"
quote_text,str
process,"Callable[[LH.HtmlElement],str]"
truncate_content,"Callable[[str],Tuple[str, bool]]"
content,str
get_common_payload,"Callable[[Message],Dict[str, Any]]"
message,Message
get_apns_alert_title,"Callable[[Message],str]"
message,Message
get_apns_alert_subtitle,"Callable[[Message],str]"
message,Message
get_apns_payload,"Callable[[UserProfile, Message],Dict[str, Any]]"
user_profile,UserProfile
message,Message
get_gcm_payload,"Callable[[UserProfile, Message],Dict[str, Any]]"
user_profile,UserProfile
message,Message
handle_remove_push_notification,"Callable[[int, int],None]"
user_profile_id,int
message_id,int
failure_processor,"Callable[[Dict[str, Any]],None]"
handle_push_notification,"Callable[[int, Dict[str, Any]],None]"
user_profile_id,int
failure_processor,"Callable[[Dict[str, Any]],None]"
attachment_url_to_path_id,"Callable[[str],str]"
attachment_url,str
sanitize_name,"Callable[[str],str]"
value,str
random_name,"Callable[[int],str]"
bytes,int
exif_rotate,"Callable[[Image],Image]"
image,Image
resize_avatar,"Callable[[bytes, int],bytes]"
image_data,bytes
size,int
resize_gif,"Callable[[GifImageFile, int],bytes]"
im,GifImageFile
size,int
resize_emoji,"Callable[[bytes, int],bytes]"
image_data,bytes
size,int
upload_message_file,"Callable[[_, str, int, Union[str, None], bytes, UserProfile, Union[Realm, None]],str]"
uploaded_file_name,str
uploaded_file_size,int
file_data,bytes
user_profile,UserProfile
upload_avatar_image,"Callable[[_, File, UserProfile, UserProfile],None]"
user_file,File
acting_user_profile,UserProfile
target_user_profile,UserProfile
delete_avatar_image,"Callable[[_, UserProfile],None]"
user,UserProfile
delete_message_image,"Callable[[_, str],bool]"
path_id,str
get_avatar_url,"Callable[[_, str, bool],str]"
hash_key,str
medium,bool
copy_avatar,"Callable[[_, UserProfile, UserProfile],None]"
source_profile,UserProfile
target_profile,UserProfile
ensure_medium_avatar_image,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
upload_realm_icon_image,"Callable[[_, File, UserProfile],None]"
icon_file,File
user_profile,UserProfile
get_realm_icon_url,"Callable[[_, int, int],str]"
realm_id,int
version,int
upload_emoji_image,"Callable[[_, File, str, UserProfile],None]"
emoji_file,File
emoji_file_name,str
user_profile,UserProfile
get_emoji_url,"Callable[[_, str, int],str]"
emoji_file_name,str
realm_id,int
get_bucket,"Callable[[S3Connection, str],Bucket]"
conn,S3Connection
bucket_name,str
upload_image_to_s3,"Callable[[str, str, Union[str, None], UserProfile, bytes],None]"
bucket_name,str
file_name,str
user_profile,UserProfile
contents,bytes
headers,"Union[Dict[str, str], None]"
currently_used_upload_space,"Callable[[Realm],int]"
realm,Realm
check_upload_within_quota,"Callable[[Realm, int],None]"
realm,Realm
uploaded_file_size,int
get_file_info,"Callable[[HttpRequest, File],Tuple[str, int, Union[str, None]]]"
request,HttpRequest
user_file,File
get_signed_upload_url,"Callable[[str],str]"
path,str
get_realm_for_filename,"Callable[[str],Union[int, None]]"
path,str
delete_file_from_s3,"Callable[[_, str, str],bool]"
path_id,str
bucket_name,str
upload_message_file,"Callable[[_, str, int, Union[str, None], bytes, UserProfile, Union[Realm, None]],str]"
uploaded_file_name,str
uploaded_file_size,int
file_data,bytes
user_profile,UserProfile
delete_message_image,"Callable[[_, str],bool]"
path_id,str
write_avatar_images,"Callable[[_, str, UserProfile, bytes, Union[str, None]],None]"
s3_file_name,str
target_user_profile,UserProfile
image_data,bytes
upload_avatar_image,"Callable[[_, File, UserProfile, UserProfile],None]"
user_file,File
acting_user_profile,UserProfile
target_user_profile,UserProfile
delete_avatar_image,"Callable[[_, UserProfile],None]"
user,UserProfile
get_avatar_key,"Callable[[_, str],Key]"
file_name,str
copy_avatar,"Callable[[_, UserProfile, UserProfile],None]"
source_profile,UserProfile
target_profile,UserProfile
get_avatar_url,"Callable[[_, str, bool],str]"
hash_key,str
medium,bool
upload_realm_icon_image,"Callable[[_, File, UserProfile],None]"
icon_file,File
user_profile,UserProfile
get_realm_icon_url,"Callable[[_, int, int],str]"
realm_id,int
version,int
ensure_medium_avatar_image,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
upload_emoji_image,"Callable[[_, File, str, UserProfile],None]"
emoji_file,File
emoji_file_name,str
user_profile,UserProfile
get_emoji_url,"Callable[[_, str, int],str]"
emoji_file_name,str
realm_id,int
write_local_file,"Callable[[str, str, bytes],None]"
type,str
path,str
file_data,bytes
read_local_file,"Callable[[str, str],bytes]"
type,str
path,str
delete_local_file,"Callable[[str, str],bool]"
type,str
path,str
get_local_file_path,"Callable[[str],Union[str, None]]"
path_id,str
upload_message_file,"Callable[[_, str, int, Union[str, None], bytes, UserProfile, Union[Realm, None]],str]"
uploaded_file_name,str
uploaded_file_size,int
file_data,bytes
user_profile,UserProfile
delete_message_image,"Callable[[_, str],bool]"
path_id,str
write_avatar_images,"Callable[[_, str, bytes],None]"
file_path,str
image_data,bytes
upload_avatar_image,"Callable[[_, File, UserProfile, UserProfile],None]"
user_file,File
acting_user_profile,UserProfile
target_user_profile,UserProfile
delete_avatar_image,"Callable[[_, UserProfile],None]"
user,UserProfile
get_avatar_url,"Callable[[_, str, bool],str]"
hash_key,str
medium,bool
copy_avatar,"Callable[[_, UserProfile, UserProfile],None]"
source_profile,UserProfile
target_profile,UserProfile
upload_realm_icon_image,"Callable[[_, File, UserProfile],None]"
icon_file,File
user_profile,UserProfile
get_realm_icon_url,"Callable[[_, int, int],str]"
realm_id,int
version,int
ensure_medium_avatar_image,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
upload_emoji_image,"Callable[[_, File, str, UserProfile],None]"
emoji_file,File
emoji_file_name,str
user_profile,UserProfile
get_emoji_url,"Callable[[_, str, int],str]"
emoji_file_name,str
realm_id,int
upload_backend,ZulipUploadBackend
delete_message_image,"Callable[[str],bool]"
path_id,str
upload_avatar_image,"Callable[[File, UserProfile, UserProfile],None]"
user_file,File
acting_user_profile,UserProfile
target_user_profile,UserProfile
delete_avatar_image,"Callable[[UserProfile],None]"
user_profile,UserProfile
copy_avatar,"Callable[[UserProfile, UserProfile],None]"
source_profile,UserProfile
target_profile,UserProfile
upload_icon_image,"Callable[[File, UserProfile],None]"
user_file,File
user_profile,UserProfile
upload_emoji_image,"Callable[[File, str, UserProfile],None]"
emoji_file,File
emoji_file_name,str
user_profile,UserProfile
upload_message_file,"Callable[[str, int, Union[str, None], bytes, UserProfile, Union[Realm, None]],str]"
uploaded_file_name,str
uploaded_file_size,int
file_data,bytes
user_profile,UserProfile
claim_attachment,"Callable[[UserProfile, str, Message, bool],Attachment]"
user_profile,UserProfile
path_id,str
message,Message
is_message_realm_public,bool
create_attachment,"Callable[[str, str, UserProfile, int],bool]"
file_name,str
path_id,str
user_profile,UserProfile
file_size,int
upload_message_image_from_request,"Callable[[HttpRequest, File, UserProfile],str]"
request,HttpRequest
user_file,File
user_profile,UserProfile
run_db_migrations,"Callable[[str],None]"
platform,str
run_generate_fixtures_if_required,"Callable[[bool],None]"
use_force,bool
database_exists,"Callable[[str],bool]"
database_name,str
options,Any
get_migration_status,"Callable[[],str]"
options,Any
extract_migrations_as_list,"Callable[[str],List[str]]"
migration_status,str
what_to_do_with_migrations,"Callable[[str],str]"
migration_file,str
options,Any
_get_hash_file_path,"Callable[[str, str],str]"
source_file_path,str
status_dir,str
_check_hash,"Callable[[str, str],bool]"
source_hash_file,str
target_content,str
check_file_hash,"Callable[[str, str],bool]"
target_file_path,str
status_dir,str
check_setting_hash,"Callable[[str, str],bool]"
setting_name,str
status_dir,str
template_database_status,"Callable[[str, Union[str, None], str, Union[str, None], Union[List[str], None], Union[List[str], None]],str]"
database_name,str
settings,str
check_files,"Union[List[str], None]"
check_settings,"Union[List[str], None]"
__init__,"Callable[[_, int, str],None]"
stream_id,int
topic_name,str
get_active_subscriptions,"Callable[[_],QuerySet]"
__init__,"Callable[[_, str, str, List[str], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[bool, None]],None]"
name,str
client_name,str
is_enabled,"Callable[[_],bool]"
__init__,"Callable[[_, str, List[str], Union[str, None], Union[str, None], Union[str, None], Union[str, None]],None]"
name,str
is_enabled,"Callable[[_],bool]"
__init__,"Callable[[_, str, List[str], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[bool, None]],None]"
name,str
url_object,"Callable[[_],LocaleRegexProvider]"
__init__,"Callable[[_, str, List[str], Union[str, None], Union[str, None], Union[str, None], Union[str, None], bool],None]"
name,str
legacy,bool
__init__,"Callable[[_, str, List[str], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[bool, None]],None]"
name,str
url_object,"Callable[[_],None]"
__init__,"Callable[[_, str],None]"
name,str
args,Any
kwargs,Any
validate_domain,"Callable[[str],None]"
domain,str
format_subject,"Callable[[str],str]"
subject,str
logger_repr,"Callable[[Dict[str, Any]],str]"
user_info_str,"Callable[[Dict[str, Any]],str]"
deployment_repr,"Callable[[Dict[str, Any]],str]"
notify_browser_error,"Callable[[Dict[str, Any]],None]"
email_browser_error,"Callable[[Dict[str, Any]],None]"
zulip_browser_error,"Callable[[Dict[str, Any]],None]"
notify_server_error,"Callable[[Dict[str, Any], Union[bool, None]],None]"
zulip_server_error,"Callable[[Dict[str, Any]],None]"
email_server_error,"Callable[[Dict[str, Any]],None]"
do_report_error,"Callable[[str, str, Dict[str, Any]],HttpResponse]"
deployment_name,str
type,str
gravatar_hash,"Callable[[str],str]"
email,str
user_avatar_hash,"Callable[[str],str]"
uid,str
user_avatar_path,"Callable[[UserProfile],str]"
user_profile,UserProfile
user_avatar_path_from_ids,"Callable[[int, int],str]"
user_profile_id,int
realm_id,int
diff_strings,"Callable[[str, str],str]"
output,str
expected_output,str
__init__,"Callable[[_],None]"
populate_for_stream_ids,"Callable[[_, List[int]],None]"
populate_for_recipient_ids,"Callable[[_, List[int]],None]"
_process_query,"Callable[[_, str],None]"
query,str
recipient_id_for,"Callable[[_, int],int]"
stream_id,int
stream_id_for,"Callable[[_, int],int]"
recip_id,int
__init__,"Callable[[_, Union[int, None]],None]"
self.consumers,"Dict[str, Set[Consumer]]"
_connect,"Callable[[_],None]"
_reconnect,"Callable[[_],None]"
_generate_ctag,"Callable[[_, str],str]"
queue_name,str
_reconnect_consumer_callback,"Callable[[_, str, Consumer],None]"
queue,str
consumer,Consumer
_reconnect_consumer_callbacks,"Callable[[_],None]"
close,"Callable[[_],None]"
ready,"Callable[[_],bool]"
ensure_queue,"Callable[[_, str, Callable[[],None]],None]"
queue_name,str
callback,"Callable[[],None]"
publish,"Callable[[_, str, str],None]"
queue_name,str
body,str
do_publish,"Callable[[],None]"
json_publish,"Callable[[_, str, Union[Mapping[str, Any], str]],None]"
queue_name,str
body,"Union[Mapping[str, Any], str]"
register_consumer,"Callable[[_, str, Consumer],None]"
queue_name,str
consumer,Consumer
wrapped_consumer,"Callable[[BlockingChannel, Basic.Deliver, pika.BasicProperties, str],None]"
ch,BlockingChannel
body,str
register_json_consumer,"Callable[[_, str, Callable[[Dict[str, Any]],None]],None]"
queue_name,str
callback,"Callable[[Dict[str, Any]],None]"
wrapped_callback,"Callable[[BlockingChannel, Basic.Deliver, pika.BasicProperties, str],None]"
ch,BlockingChannel
body,str
drain_queue,"Callable[[_, str, bool],List[Dict[str, Any]]]"
queue_name,str
json,bool
opened,"Callable[[],None]"
start_consuming,"Callable[[_],None]"
stop_consuming,"Callable[[_],None]"
_adapter_disconnect,"Callable[[_],None]"
__init__,"Callable[[_],None]"
self._on_open_cbs,"List[Callable[[],None]]"
_connect,"Callable[[_],None]"
_reconnect,"Callable[[_],None]"
_on_connection_open_error,"Callable[[_, pika.connection.Connection, Union[str, None]],None]"
connection,pika.connection.Connection
_on_connection_closed,"Callable[[_, pika.connection.Connection, int, str],None]"
connection,pika.connection.Connection
reply_code,int
reply_text,str
_on_open,"Callable[[_, pika.connection.Connection],None]"
connection,pika.connection.Connection
_on_channel_open,"Callable[[_, BlockingChannel],None]"
channel,BlockingChannel
ensure_queue,"Callable[[_, str, Callable[[],None]],None]"
queue_name,str
callback,"Callable[[],None]"
finish,"Callable[[Any],None]"
frame,Any
register_consumer,"Callable[[_, str, Consumer],None]"
queue_name,str
consumer,Consumer
wrapped_consumer,"Callable[[BlockingChannel, Basic.Deliver, pika.BasicProperties, str],None]"
ch,BlockingChannel
body,str
get_queue_client,"Callable[[],SimpleQueueClient]"
queue_json_publish,"Callable[[str, Union[Dict[str, Any], str], Callable[[Any],None]],None]"
queue_name,str
event,"Union[Dict[str, Any], str]"
processor,"Callable[[Any],None]"
retry_event,"Callable[[str, Dict[str, Any], Callable[[Dict[str, Any]],None]],None]"
queue_name,str
failure_processor,"Callable[[Dict[str, Any]],None]"
raw_pm_with_emails,"Callable[[str, str],List[str]]"
email_str,str
my_email,str
get_user_profiles,"Callable[[Iterable[str], Realm],List[UserProfile]]"
realm,Realm
get_user_profiles_by_ids,"Callable[[Iterable[int], Realm],List[UserProfile]]"
realm,Realm
__init__,"Callable[[_, str, Union[Sequence[UserProfile], None], Union[str, None], Union[str, None]],None]"
msg_type,str
user_profiles,"Union[Sequence[UserProfile], None]"
is_stream,"Callable[[_],bool]"
is_private,"Callable[[_],bool]"
stream_name,"Callable[[_],str]"
topic,"Callable[[_],str]"
legacy_build,"Callable[[UserProfile, str, Sequence[str], str, Union[Realm, None]],Addressee]"
sender,UserProfile
message_type_name,str
topic_name,str
for_stream,"Callable[[str, str],Addressee]"
stream_name,str
topic,str
for_private,"Callable[[Sequence[str], Realm],Addressee]"
realm,Realm
for_user_ids,"Callable[[Sequence[int], Realm],Addressee]"
realm,Realm
for_user_profile,"Callable[[UserProfile],Addressee]"
user_profile,UserProfile
ID_MAP,"Dict[str, Dict[int, int]]"
id_map_to_list,"Dict[str, Dict[int, List[int]]]"
path_maps,"Dict[str, Dict[str, str]]"
update_id_map,"Callable[[TableName, int, int],None]"
table,TableName
old_id,int
new_id,int
fix_datetime_fields,"Callable[[TableData, TableName],None]"
data,TableData
table,TableName
fix_upload_links,"Callable[[TableData, TableName],None]"
data,TableData
message_table,TableName
create_subscription_events,"Callable[[TableData, int],None]"
data,TableData
realm_id,int
fix_service_tokens,"Callable[[TableData, TableName],None]"
data,TableData
table,TableName
process_huddle_hash,"Callable[[TableData, TableName],None]"
data,TableData
table,TableName
get_huddles_from_subscription,"Callable[[TableData, TableName],None]"
data,TableData
table,TableName
fix_customprofilefield,"Callable[[TableData],None]"
data,TableData
fix_message_rendered_content,"Callable[[Realm, Dict[int, Record], List[Record]],None]"
realm,Realm
realm_alert_words,RealmAlertWords
current_table_ids,"Callable[[TableData, TableName],List[int]]"
data,TableData
table,TableName
idseq,"Callable[[Any],str]"
model_class,Any
allocate_ids,"Callable[[Any, int],List[int]]"
model_class,Any
count,int
convert_to_id_fields,"Callable[[TableData, TableName, Field],None]"
data,TableData
table,TableName
field_name,Field
re_map_foreign_keys,"Callable[[TableData, TableName, Field, TableName, bool, bool, bool, bool],None]"
data,TableData
table,TableName
field_name,Field
related_table,TableName
verbose,bool
id_field,bool
recipient_field,bool
reaction_field,bool
re_map_foreign_keys_internal,"Callable[[List[Record], TableName, Field, TableName, bool, bool, bool, bool],None]"
table,TableName
field_name,Field
related_table,TableName
verbose,bool
id_field,bool
recipient_field,bool
reaction_field,bool
re_map_foreign_keys_many_to_many,"Callable[[TableData, TableName, Field, TableName, bool],None]"
data,TableData
table,TableName
field_name,Field
related_table,TableName
verbose,bool
re_map_foreign_keys_many_to_many_internal,"Callable[[TableName, Field, TableName, List[int], bool],List[int]]"
table,TableName
field_name,Field
related_table,TableName
verbose,bool
fix_bitfield_keys,"Callable[[TableData, TableName, Field],None]"
data,TableData
table,TableName
field_name,Field
fix_realm_authentication_bitfield,"Callable[[TableData, TableName, Field],None]"
data,TableData
table,TableName
field_name,Field
get_db_table,"Callable[[Any],str]"
model_class,Any
update_model_ids,"Callable[[Any, TableData, TableName],None]"
model,Any
data,TableData
related_table,TableName
bulk_import_user_message_data,"Callable[[TableData, int],None]"
data,TableData
dump_file_id,int
process_batch,"Callable[[List[Dict[str, Any]]],None]"
items,"List[Dict[str, Any]]"
bulk_import_model,"Callable[[TableData, Any, Union[str, None]],None]"
data,TableData
model,Any
bulk_import_client,"Callable[[TableData, Any, TableName],None]"
data,TableData
model,Any
table,TableName
import_uploads_local,"Callable[[Path, bool, bool],None]"
import_dir,Path
processing_avatars,bool
processing_emojis,bool
import_uploads_s3,"Callable[[str, Path, bool, bool],None]"
bucket_name,str
import_dir,Path
processing_avatars,bool
processing_emojis,bool
import_uploads,"Callable[[Path, bool, bool],None]"
import_dir,Path
processing_avatars,bool
processing_emojis,bool
do_import_realm,"Callable[[Path, str],Realm]"
import_dir,Path
subdomain,str
do_import_system_bots,"Callable[[Any],None]"
realm,Any
create_users,"Callable[[Realm, Iterable[Tuple[str, str]], Union[int, None]],None]"
realm,Realm
name_list,"Iterable[Tuple[str, str]]"
update_message_foreign_keys,"Callable[[Path, bool],None]"
import_dir,Path
sort_by_date,bool
get_incoming_message_ids,"Callable[[Path, bool],List[int]]"
import_dir,Path
sort_by_date,bool
tups,"List[Tuple[int, int]]"
import_message_data,"Callable[[Realm, Dict[int, Record], Path],None]"
realm,Realm
import_dir,Path
import_attachments,"Callable[[TableData],None]"
data,TableData
m2m_row,Record
m2m_data,TableData
seconds_usage_between,"Callable[[UserProfile, datetime, datetime],timedelta]"
user_profile,UserProfile
begin,datetime
end,datetime
get_widget_data,"Callable[[str],Tuple[Union[str, None], Union[str, None]]]"
content,str
get_extra_data_from_widget_type,"Callable[[List[str], Union[str, None]],Any]"
do_widget_post_save_actions,"Callable[[MutableMapping[str, Any]],None]"
statsd_key,"Callable[[Any, bool],str]"
val,Any
clean_periods,bool
_our_gauge,"Callable[[_, str, float, float, bool],None]"
stat,str
value,float
rate,float
delta,bool
__getattr__,"Callable[[_, str],Any]"
name,str
run_in_batches,"Callable[[Sequence[T], int, Callable[[Sequence[T]],None], int, Union[Callable[[str],None], None]],None]"
batch_size,int
callback,"Callable[[Sequence[T]],None]"
sleep_time,int
logger,"Union[Callable[[str],None], None]"
make_safe_digest,"Callable[[str, Callable[[bytes],Any]],str]"
string,str
hash_func,"Callable[[bytes],Any]"
log_statsd_event,"Callable[[str],None]"
name,str
generate_random_token,"Callable[[int],str]"
length,int
generate_api_key,"Callable[[],str]"
query_chunker,"Callable[[List[Any], Union[Set[int], None], int, Union[int, None]],Iterable[Any]]"
id_collector,"Union[Set[int], None]"
chunk_size,int
chunkify,"Callable[[Any, int],Iterable[Tuple[int, int, Any]]]"
q,Any
i,int
process_list_in_batches,"Callable[[List[Any], int, Callable[[List[Any]],None]],None]"
chunk_size,int
process_batch,"Callable[[List[Any]],None]"
split_by,"Callable[[List[Any], int, Any],List[List[Any]]]"
group_size,int
filler,Any
is_remote_server,"Callable[[str],bool]"
identifier,str
flush_caches_for_testing,"Callable[[],None]"
setUpClass,"Callable[[Any],None]"
cls,Any
args,Any
kwargs,Any
tearDown,"Callable[[_],None]"
set_http_host,"Callable[[_, Dict[str, Any]],None]"
client_patch,"Callable[[_, str, Dict[str, Any]],HttpResponse]"
url,str
kwargs,Any
client_patch_multipart,"Callable[[_, str, Dict[str, Any]],HttpResponse]"
url,str
kwargs,Any
client_put,"Callable[[_, str, Dict[str, Any]],HttpResponse]"
url,str
kwargs,Any
client_delete,"Callable[[_, str, Dict[str, Any]],HttpResponse]"
url,str
kwargs,Any
client_options,"Callable[[_, str, Dict[str, Any]],HttpResponse]"
url,str
kwargs,Any
client_head,"Callable[[_, str, Dict[str, Any]],HttpResponse]"
url,str
kwargs,Any
client_post,"Callable[[_, str, Dict[str, Any]],HttpResponse]"
url,str
kwargs,Any
client_post_request,"Callable[[_, str, Any],HttpResponse]"
url,str
req,Any
client_get,"Callable[[_, str, Dict[str, Any]],HttpResponse]"
url,str
kwargs,Any
nonreg_user,"Callable[[_, str],UserProfile]"
name,str
example_user,"Callable[[_, str],UserProfile]"
name,str
mit_user,"Callable[[_, str],UserProfile]"
name,str
lear_user,"Callable[[_, str],UserProfile]"
name,str
nonreg_email,"Callable[[_, str],str]"
name,str
example_email,"Callable[[_, str],str]"
name,str
mit_email,"Callable[[_, str],str]"
name,str
notification_bot,"Callable[[_],UserProfile]"
create_test_bot,"Callable[[_, str, UserProfile, str],Union[UserProfile, None]]"
short_name,str
user_profile,UserProfile
assert_json_error_msg,str
extras,Any
login_with_return,"Callable[[_, str, Union[str, None]],HttpResponse]"
email,str
kwargs,Any
login,"Callable[[_, str, Union[str, None], bool, Union[Realm, None]],HttpResponse]"
email,str
fails,bool
login_2fa,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
logout,"Callable[[_],None]"
register,"Callable[[_, str, str],HttpResponse]"
email,str
password,str
kwargs,Any
submit_reg_form_for_user,"Callable[[_, str, str, Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[List[str], None], Union[str, None]],HttpResponse]"
email,str
password,str
default_stream_groups,"Union[List[str], None]"
kwargs,Any
get_confirmation_url_from_outbox,"Callable[[_, str],str]"
email_address,str
url_pattern,str
encode_credentials,"Callable[[_, str, str],str]"
identifier,str
realm,str
api_get,"Callable[[_, str],HttpResponse]"
email,str
args,Any
kwargs,Any
api_post,"Callable[[_, str],HttpResponse]"
identifier,str
args,Any
kwargs,Any
api_patch,"Callable[[_, str],HttpResponse]"
email,str
args,Any
kwargs,Any
api_put,"Callable[[_, str],HttpResponse]"
email,str
args,Any
kwargs,Any
api_delete,"Callable[[_, str],HttpResponse]"
email,str
args,Any
kwargs,Any
get_streams,"Callable[[_, str, Realm],List[str]]"
email,str
realm,Realm
send_personal_message,"Callable[[_, str, str, str, str],int]"
from_email,str
to_email,str
content,str
sender_realm,str
send_huddle_message,"Callable[[_, str, List[str], str, str],int]"
from_email,str
content,str
sender_realm,str
send_stream_message,"Callable[[_, str, str, str, str, str],int]"
sender_email,str
stream_name,str
content,str
topic_name,str
sender_realm,str
get_messages_response,"Callable[[_, int, int, int, bool],Dict[str, List[Dict[str, Any]]]]"
anchor,int
num_before,int
num_after,int
use_first_unread_anchor,bool
get_messages,"Callable[[_, int, int, int, bool],List[Dict[str, Any]]]"
anchor,int
num_before,int
num_after,int
use_first_unread_anchor,bool
users_subscribed_to_stream,"Callable[[_, str, Realm],List[UserProfile]]"
stream_name,str
realm,Realm
assert_url_serves_contents_of_file,"Callable[[_, str, bytes],None]"
url,str
result,bytes
assert_json_success,"Callable[[_, HttpResponse],Dict[str, Any]]"
result,HttpResponse
get_json_error,"Callable[[_, HttpResponse, int],Dict[str, Any]]"
result,HttpResponse
status_code,int
assert_json_error,"Callable[[_, HttpResponse, str, int],None]"
result,HttpResponse
msg,str
status_code,int
assert_length,"Callable[[_, List[Any], int],None]"
count,int
assert_json_error_contains,"Callable[[_, HttpResponse, str, int],None]"
result,HttpResponse
msg_substring,str
status_code,int
assert_in_response,"Callable[[_, str, HttpResponse],None]"
substring,str
response,HttpResponse
assert_in_success_response,"Callable[[_, List[str], HttpResponse],None]"
response,HttpResponse
assert_not_in_success_response,"Callable[[_, List[str], HttpResponse],None]"
response,HttpResponse
webhook_fixture_data,"Callable[[_, str, str, str],str]"
type,str
action,str
file_type,str
fixture_data,"Callable[[_, str, str],str]"
file_name,str
type,str
make_stream,"Callable[[_, str, Union[Realm, None], Union[bool, None], Union[bool, None]],Stream]"
stream_name,str
subscribe,"Callable[[_, UserProfile, str],Stream]"
user_profile,UserProfile
stream_name,str
unsubscribe,"Callable[[_, UserProfile, str],None]"
user_profile,UserProfile
stream_name,str
common_subscribe_to_streams,"Callable[[_, str, Iterable[str], Dict[str, Any], bool],HttpResponse]"
email,str
invite_only,bool
kwargs,Any
check_user_subscribed_only_to_streams,"Callable[[_, str, List[Stream]],None]"
user_name,str
send_json_payload,"Callable[[_, UserProfile, str, Union[str, Dict[str, Any]], Union[str, None]],Message]"
user_profile,UserProfile
url,str
payload,"Union[str, Dict[str, Any]]"
post_params,Any
get_last_message,"Callable[[_],Message]"
get_second_to_last_message,"Callable[[_],Message]"
create_default_device,"Callable[[_, UserProfile, str],None]"
user_profile,UserProfile
number,str
test_user,"Callable[[_],UserProfile]"
setUp,"Callable[[_],None]"
api_stream_message,"Callable[[_, str],HttpResponse]"
email,str
args,Any
kwargs,Any
send_and_test_stream_message,"Callable[[_, str, Union[str, None], Union[str, None], Union[str, None]],Message]"
fixture_name,str
kwargs,Any
send_and_test_private_message,"Callable[[_, str, str, str, str],Message]"
fixture_name,str
expected_topic,str
expected_message,str
content_type,str
kwargs,Any
build_webhook_url,"Callable[[_],str]"
args,Any
kwargs,Any
get_body,"Callable[[_, str],Union[str, Dict[str, str]]]"
fixture_name,str
do_test_topic,"Callable[[_, Message, Union[str, None]],None]"
msg,Message
do_test_message,"Callable[[_, Message, Union[str, None]],None]"
msg,Message
app,"Callable[[_],str]"
setUp,"Callable[[_],None]"
migrate_from,"List[Tuple[str, str]]"
migrate_to,"List[Tuple[str, str]]"
setUpBeforeMigration,"Callable[[_, StateApps],None]"
apps,StateApps
check_full_name,"Callable[[str],str]"
full_name_raw,str
check_bot_name_available,"Callable[[int, str],None]"
realm_id,int
full_name,str
check_short_name,"Callable[[str],str]"
short_name_raw,str
check_valid_bot_config,"Callable[[str, Dict[str, str]],None]"
service_name,str
add_service,"Callable[[str, UserProfile, Union[str, None], Union[int, None], Union[str, None]],None]"
name,str
user_profile,UserProfile
check_bot_creation_policy,"Callable[[UserProfile, int],None]"
user_profile,UserProfile
bot_type,int
check_valid_bot_type,"Callable[[UserProfile, int],None]"
user_profile,UserProfile
bot_type,int
check_valid_interface_type,"Callable[[Union[int, None]],None]"
user_ids_to_users,"Callable[[List[int], Realm],List[UserProfile]]"
realm,Realm
access_bot_by_id,"Callable[[UserProfile, int],UserProfile]"
user_profile,UserProfile
user_id,int
access_user_by_id,"Callable[[UserProfile, int, bool, bool],UserProfile]"
user_profile,UserProfile
user_id,int
allow_deactivated,bool
allow_bots,bool
get_accounts_for_email,"Callable[[str],List[Dict[str, Union[str, None]]]]"
email,str
get_api_key,"Callable[[UserProfile],str]"
user_profile,UserProfile
get_all_api_keys,"Callable[[UserProfile],List[str]]"
user_profile,UserProfile
validate_user_custom_profile_data,"Callable[[int, List[Dict[str, Union[int, str, List[int]]]]],None]"
realm_id,int
profile_data,"List[Dict[str, Union[int, str, List[int]]]]"
compute_mit_user_fullname,"Callable[[str],str]"
email,str
build_topic_mute_checker,"Callable[[CursorObj, UserProfile],Callable[[int, str],bool]]"
cursor,CursorObj
user_profile,UserProfile
is_muted,"Callable[[int, str],bool]"
recipient_id,int
topic,str
update_unread_flags,"Callable[[CursorObj, List[int]],None]"
cursor,CursorObj
get_timing,"Callable[[str, Callable[[],None]],None]"
message,str
f,"Callable[[],None]"
fix_unsubscribed,"Callable[[CursorObj, UserProfile],None]"
cursor,CursorObj
user_profile,UserProfile
find_recipients,"Callable[[],None]"
find,"Callable[[],None]"
fix,"Callable[[],None]"
fix_pre_pointer,"Callable[[CursorObj, UserProfile],None]"
cursor,CursorObj
user_profile,UserProfile
find_non_muted_recipients,"Callable[[],None]"
find_old_ids,"Callable[[],None]"
fix,"Callable[[],None]"
fix,"Callable[[UserProfile],None]"
user_profile,UserProfile
__init__,"Callable[[_, str],None]"
path,str
reload,"Callable[[_],None]"
get_openapi_fixture,"Callable[[str, str, Union[str, None]],Dict[str, Any]]"
endpoint,str
method,str
get_openapi_parameters,"Callable[[str, str],List[Dict[str, Any]]]"
endpoint,str
method,str
validate_against_openapi_schema,"Callable[[Dict[str, Any], str, str, str],None]"
endpoint,str
method,str
response,str
to_python_type,"Callable[[str],type]"
py_type,str
get_timezone,"Callable[[str],pytz.datetime.tzinfo]"
tz,str
process_zcommands,"Callable[[str, UserProfile],Dict[str, Any]]"
content,str
user_profile,UserProfile
relative_to_full_url,"Callable[[str, str],str]"
base_url,str
content,str
fix_emojis,"Callable[[str, str, str],str]"
content,str
base_url,str
emojiset,str
make_emoji_img_elem,"Callable[[CSSSelector],Dict[str, Any]]"
emoji_span_elem,CSSSelector
build_message_list,"Callable[[UserProfile, List[Message]],List[Dict[str, Any]]]"
user_profile,UserProfile
messages_to_render,"List[Dict[str, Any]]"
sender_string,"Callable[[Message],str]"
message,Message
fix_plaintext_image_urls,"Callable[[str],str]"
content,str
build_message_payload,"Callable[[Message],Dict[str, str]]"
message,Message
build_sender_payload,"Callable[[Message],Dict[str, Any]]"
message,Message
message_header,"Callable[[UserProfile, Message],Dict[str, Any]]"
user_profile,UserProfile
message,Message
do_send_missedmessage_events_reply_in_zulip,"Callable[[UserProfile, List[Dict[str, Any]], int],None]"
user_profile,UserProfile
missed_messages,"List[Dict[str, Any]]"
message_count,int
from_name,str
handle_missedmessage_emails,"Callable[[int, Iterable[Dict[str, Any]]],None]"
user_profile_id,int
missed_email_events,"Iterable[Dict[str, Any]]"
messages_by_bucket,"Dict[Tuple[int, str], List[Message]]"
bucket_tups,"List[Tuple[Tuple[int, str], int]]"
clear_scheduled_invitation_emails,"Callable[[str],None]"
email,str
clear_scheduled_emails,"Callable[[int, Union[int, None]],None]"
user_id,int
log_digest_event,"Callable[[str],None]"
msg,str
followup_day2_email_delay,"Callable[[UserProfile],timedelta]"
user,UserProfile
enqueue_welcome_emails,"Callable[[UserProfile, bool],None]"
user,UserProfile
realm_creation,bool
convert_html_to_markdown,"Callable[[str],str]"
html,str
wrapper_execute,"Callable[[CursorObj, Callable[[str, Union[ParamsT, None]],CursorObj], str, Union[ParamsT, None]],CursorObj]"
self,CursorObj
action,"Callable[[str, Union[ParamsT, None]],CursorObj]"
sql,str
execute,"Callable[[_, str, Union[ParamsT, None]],TimeTrackingCursor]"
query,str
executemany,"Callable[[_, str, Iterable[Any]],TimeTrackingCursor]"
query,str
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
self.queries,"List[Dict[str, str]]"
cursor,"Callable[[_],TimeTrackingCursor]"
args,Any
kwargs,Any
reset_queries,"Callable[[],None]"
is_thumbor_enabled,"Callable[[],bool]"
user_uploads_or_external,"Callable[[str],bool]"
url,str
get_source_type,"Callable[[str],str]"
url,str
generate_thumbnail_url,"Callable[[str, str],str]"
path,str
size,str
get_session_user,"Callable[[Session],Union[int, None]]"
session,Session
user_sessions,"Callable[[UserProfile],List[Session]]"
user_profile,UserProfile
delete_session,"Callable[[Session],None]"
session,Session
delete_user_sessions,"Callable[[UserProfile],None]"
user_profile,UserProfile
delete_realm_user_sessions,"Callable[[Realm],None]"
realm,Realm
delete_all_user_sessions,"Callable[[],None]"
delete_all_deactivated_user_sessions,"Callable[[],None]"
user_attachments,"Callable[[UserProfile],List[Dict[str, Any]]]"
user_profile,UserProfile
access_attachment_by_id,"Callable[[UserProfile, int, bool],Attachment]"
user_profile,UserProfile
attachment_id,int
needs_owner,bool
remove_attachment,"Callable[[UserProfile, Attachment],None]"
user_profile,UserProfile
attachment,Attachment
get_bot_config,"Callable[[UserProfile],Dict[str, str]]"
bot_profile,UserProfile
get_bot_configs,"Callable[[List[int]],Dict[int, Dict[str, str]]]"
entries_by_uid,"Dict[int, Dict[str, str]]"
get_bot_config_size,"Callable[[UserProfile, Union[str, None]],int]"
bot_profile,UserProfile
set_bot_config,"Callable[[UserProfile, str, str],None]"
bot_profile,UserProfile
key,str
value,str
load_bot_config_template,"Callable[[str],Dict[str, str]]"
bot,str
is_integer_string,"Callable[[str],bool]"
val,str
check_config,"Callable[[],None]"
sleep_forever,"Callable[[],None]"
add_realm_args,"Callable[[_, ArgumentParser, bool, Union[str, None]],None]"
parser,ArgumentParser
required,bool
add_user_list_args,"Callable[[_, ArgumentParser, str, str],None]"
parser,ArgumentParser
help,str
all_users_help,str
get_user,"Callable[[_, str, Union[Realm, None]],UserProfile]"
email,str
get_client,"Callable[[_],Client]"
interactive_debug,"Callable[[int, FrameType],None]"
sig,int
frame,FrameType
interactive_debug_listen,"Callable[[],None]"
tracemalloc_dump,"Callable[[],None]"
tracemalloc_listen_sock,"Callable[[socket.socket],None]"
tracemalloc_listen,"Callable[[],None]"
maybe_tracemalloc_listen,"Callable[[],None]"
alert_words_in_realm,"Callable[[Realm],Dict[int, List[str]]]"
realm,Realm
user_alert_words,"Callable[[UserProfile],List[str]]"
user_profile,UserProfile
add_user_alert_words,"Callable[[UserProfile, Iterable[str]],List[str]]"
user_profile,UserProfile
remove_user_alert_words,"Callable[[UserProfile, Iterable[str]],List[str]]"
user_profile,UserProfile
set_user_alert_words,"Callable[[UserProfile, List[str]],None]"
user_profile,UserProfile
get_remote_cache_time,"Callable[[],float]"
get_remote_cache_requests,"Callable[[],int]"
remote_cache_stats_start,"Callable[[],None]"
remote_cache_stats_finish,"Callable[[],None]"
get_or_create_key_prefix,"Callable[[],str]"
KEY_PREFIX,str
bounce_key_prefix_for_testing,"Callable[[str],None]"
test_name,str
get_cache_backend,"Callable[[Union[str, None]],BaseCache]"
args,Any
kwargs,Any
func_with_caching,"Callable[[],ReturnT]"
args,Any
kwargs,Any
cache_set,"Callable[[str, Any, Union[str, None], Union[int, None]],None]"
key,str
val,Any
cache_get,"Callable[[str, Union[str, None]],Any]"
key,str
cache_set_many,"Callable[[Dict[str, Any], Union[str, None], Union[int, None]],None]"
cache_delete,"Callable[[str, Union[str, None]],None]"
key,str
cache_delete_many,"Callable[[Iterable[str], Union[str, None]],None]"
default_extractor,"Callable[[CompressedItemT],ItemT]"
obj,CompressedItemT
default_setter,"Callable[[ItemT],CompressedItemT]"
obj,ItemT
default_id_fetcher,"Callable[[ItemT],ObjKT]"
obj,ItemT
default_cache_transformer,"Callable[[ItemT],ItemT]"
obj,ItemT
generic_bulk_cached_fetch,"Callable[[Callable[[ObjKT],str], Callable[[List[ObjKT]],Iterable[Any]], Iterable[ObjKT], Callable[[CompressedItemT],ItemT], Callable[[ItemT],CompressedItemT], Callable[[ItemT],ObjKT], Callable[[ItemT],ItemT]],Dict[ObjKT, ItemT]]"
cache_key_function,"Callable[[ObjKT],str]"
extractor,"Callable[[CompressedItemT],ItemT]"
setter,"Callable[[ItemT],CompressedItemT]"
id_fetcher,"Callable[[ItemT],ObjKT]"
cache_transformer,"Callable[[ItemT],ItemT]"
cached_objects_compressed,"Dict[str, Tuple[CompressedItemT]]"
items_for_remote_cache,"Dict[str, Tuple[CompressedItemT]]"
keyfunc,"Callable[[],str]"
args,Any
kwargs,Any
preview_url_cache_key,"Callable[[str],str]"
url,str
display_recipient_cache_key,"Callable[[int],str]"
recipient_id,int
user_profile_by_email_cache_key,"Callable[[str],str]"
email,str
user_profile_cache_key_id,"Callable[[str, int],str]"
email,str
realm_id,int
user_profile_cache_key,"Callable[[str, Realm],str]"
email,str
realm,Realm
bot_profile_cache_key,"Callable[[str],str]"
email,str
user_profile_by_id_cache_key,"Callable[[int],str]"
user_profile_id,int
user_profile_by_api_key_cache_key,"Callable[[str],str]"
api_key,str
realm_user_dicts_cache_key,"Callable[[int],str]"
realm_id,int
active_user_ids_cache_key,"Callable[[int],str]"
realm_id,int
active_non_guest_user_ids_cache_key,"Callable[[int],str]"
realm_id,int
bot_dicts_in_realm_cache_key,"Callable[[Realm],str]"
realm,Realm
get_stream_cache_key,"Callable[[str, int],str]"
stream_name,str
realm_id,int
delete_user_profile_caches,"Callable[[Iterable[UserProfile]],None]"
delete_display_recipient_cache,"Callable[[UserProfile],None]"
user_profile,UserProfile
flush_user_profile,"Callable[[Any],None]"
sender,Any
kwargs,Any
changed,"Callable[[List[str]],bool]"
flush_realm,"Callable[[Any],None]"
sender,Any
kwargs,Any
realm_alert_words_cache_key,"Callable[[Realm],str]"
realm,Realm
realm_first_visible_message_id_cache_key,"Callable[[Realm],str]"
realm,Realm
flush_stream,"Callable[[Any],None]"
sender,Any
kwargs,Any
to_dict_cache_key_id,"Callable[[int],str]"
message_id,int
to_dict_cache_key,"Callable[[Message],str]"
message,Message
flush_message,"Callable[[Any],None]"
sender,Any
kwargs,Any
flush_submessage,"Callable[[Any],None]"
sender,Any
kwargs,Any
ignore_unhashable_lru_cache,"Callable[[int, bool],DECORATOR]"
maxsize,int
typed,bool
wrapper,"Callable[[],Any]"
args,Any
kwargs,Any
__str__,"Callable[[_],str]"
timeout,"Callable[[float, _],ResultT]"
timeout,float
args,Any
kwargs,Any
__init__,"Callable[[_],None]"
self.exc_info,"Union[Tuple[Union[Type[BaseException], None], Union[BaseException, None], Union[TracebackType, None]], None]"
run,"Callable[[_],None]"
raise_async_timeout,"Callable[[_],None]"
rest_dispatch,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
kwargs,Any
status,"Callable[[_],str]"
_do_return_conn,"Callable[[_, sqlalchemy.engine.base.Connection],None]"
conn,sqlalchemy.engine.base.Connection
recreate,"Callable[[_],NonClosingPool]"
get_sqlalchemy_connection,"Callable[[],sqlalchemy.engine.base.Connection]"
get_dj_conn,"Callable[[],TimeTrackingConnection]"
get_topic_from_message_info,"Callable[[Dict[str, Any]],str]"
topic_match_sa,"Callable[[str],Any]"
topic_name,str
topic_column_sa,"Callable[[],Any]"
filter_by_exact_message_topic,"Callable[[QuerySet, Message],QuerySet]"
query,QuerySet
message,Message
filter_by_topic_name_via_message,"Callable[[QuerySet, str],QuerySet]"
query,QuerySet
topic_name,str
messages_for_topic,"Callable[[int, str],QuerySet]"
stream_id,int
topic_name,str
save_message_for_edit_use_case,"Callable[[Message],None]"
message,Message
user_message_exists_for_topic,"Callable[[UserProfile, Recipient, str],bool]"
user_profile,UserProfile
recipient,Recipient
topic_name,str
update_messages_for_topic_edit,"Callable[[Message, str, str, str],List[Message]]"
message,Message
propagate_mode,str
orig_topic_name,str
topic_name,str
generate_topic_history_from_db_rows,"Callable[[List[Tuple[str, int]]],List[Dict[str, Any]]]"
rows,"List[Tuple[str, int]]"
canonical_topic_names,"Dict[str, Tuple[int, str]]"
get_topic_history_for_stream,"Callable[[UserProfile, Recipient, bool],List[Dict[str, Any]]]"
user_profile,UserProfile
recipient,Recipient
public_history,bool
get_topic_history_for_web_public_stream,"Callable[[Recipient],List[Dict[str, Any]]]"
recipient,Recipient
get_turtle_message,"Callable[[List[int]],Message]"
message_cache_items,"Callable[[Dict[str, Tuple[bytes]], Message],None]"
items_for_remote_cache,"Dict[str, Tuple[bytes]]"
message,Message
user_cache_items,"Callable[[Dict[str, Tuple[UserProfile]], UserProfile],None]"
items_for_remote_cache,"Dict[str, Tuple[UserProfile]]"
user_profile,UserProfile
stream_cache_items,"Callable[[Dict[str, Tuple[Stream]], Stream],None]"
items_for_remote_cache,"Dict[str, Tuple[Stream]]"
stream,Stream
client_cache_items,"Callable[[Dict[str, Tuple[Client]], Client],None]"
items_for_remote_cache,"Dict[str, Tuple[Client]]"
client,Client
huddle_cache_items,"Callable[[Dict[str, Tuple[Huddle]], Huddle],None]"
items_for_remote_cache,"Dict[str, Tuple[Huddle]]"
huddle,Huddle
recipient_cache_items,"Callable[[Dict[str, Tuple[Recipient]], Recipient],None]"
items_for_remote_cache,"Dict[str, Tuple[Recipient]]"
recipient,Recipient
session_cache_items,"Callable[[Dict[str, str], Session],None]"
session,Session
cache_fillers,"Dict[str, Tuple[Callable[[],List[Any]], Callable[[Dict[str, Any], Any],None], int, int]]"
fill_remote_cache,"Callable[[str],None]"
cache,str
__new__,"Callable[[Type[AbstractEnum]],AbstractEnum]"
__repr__,"Callable[[_],str]"
value,"Callable[[_],None]"
__reduce_ex__,"Callable[[_, int],NoReturn]"
proto,int
code,ErrorCode
http_status_code,int
__init__,"Callable[[_, str],None]"
msg,str
self._msg,str
msg_format,"Callable[[],str]"
msg,"Callable[[_],str]"
__str__,"Callable[[_],str]"
__init__,"Callable[[_, str],None]"
stream,str
msg_format,"Callable[[],str]"
__init__,"Callable[[_, bool],None]"
is_last_admin,bool
msg_format,"Callable[[],str]"
__init__,"Callable[[_, str],None]"
msg,str
msg_format,"Callable[[],str]"
__init__,"Callable[[_, str, str],None]"
var_name1,str
var_name2,str
self.var_name1,str
self.var_name2,str
msg_format,"Callable[[],str]"
__init__,"Callable[[_, str],None]"
var_name,str
self.var_name,str
msg_format,"Callable[[],str]"
__init__,"Callable[[_, str, Any],None]"
var_name,str
bad_value,Any
self.var_name,str
msg_format,"Callable[[],str]"
__init__,"Callable[[_, str],None]"
whence,str
converter,"Callable[[Any],Any]"
default,Any
validator,"Callable[[Any],Any]"
str_validator,"Callable[[Any],Any]"
argument_type,str
type,Type
aliases,"Union[List[str], None]"
self.func_var_name,str
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
get_stream_title,"Callable[[Dict[str, Any]],str]"
parse_file,"Callable[[Dict[str, Any], Dict[str, Any], str],List[str]]"
corpus_file,str
get_flair_gen,"Callable[[int],List[str]]"
length,int
add_md,"Callable[[str, str],str]"
mode,str
text,str
add_emoji,"Callable[[str, str],str]"
text,str
emoji,str
add_link,"Callable[[str, str],str]"
text,str
link,str
remove_line_breaks,"Callable[[Any],List[str]]"
fh,Any
write_file,"Callable[[List[str], str],None]"
filename,str
create_test_data,"Callable[[],None]"
with_language,"Callable[[str, str],str]"
string,str
language,str
get_language_list,"Callable[[],List[Dict[str, Any]]]"
get_language_list_for_templates,"Callable[[str],List[Dict[str, Dict[str, str]]]]"
default_language,str
get_language_name,"Callable[[str],Union[str, None]]"
code,str
get_language_translation_data,"Callable[[str],Dict[str, str]]"
language,str
user_mention_matches_wildcard,"Callable[[str],bool]"
mention,str
extract_mention_text,"Callable[[str],Union[str, None]]"
s,str
possible_mentions,"Callable[[str],Set[str]]"
content,str
extract_user_group,"Callable[[str],str]"
matched_text,str
possible_user_group_mentions,"Callable[[str],Set[str]]"
content,str
filter_by_subscription_history,"Callable[[UserProfile, DefaultDict[int, List[Message]], DefaultDict[int, List[RealmAuditLog]]],List[UserMessage]]"
user_profile,UserProfile
all_stream_messages,"DefaultDict[int, List[Message]]"
all_stream_subscription_logs,"DefaultDict[int, List[RealmAuditLog]]"
store_user_message_to_insert,"Callable[[Message],None]"
message,Message
add_missing_messages,"Callable[[UserProfile],None]"
user_profile,UserProfile
all_stream_subscription_logs,"DefaultDict[int, List[RealmAuditLog]]"
stream_messages,"DefaultDict[int, List[Message]]"
do_soft_deactivate_user,"Callable[[UserProfile],None]"
user_profile,UserProfile
maybe_catch_up_soft_deactivated_user,"Callable[[UserProfile],Union[UserProfile, None]]"
user_profile,UserProfile
get_users_for_soft_deactivation,"Callable[[int, Any],List[UserProfile]]"
inactive_for_days,int
filter_kwargs,Any
wrapped_func,"Callable[[],ReturnT]"
args,Any
kwargs,Any
retval,ReturnT
access_user_group_by_id,"Callable[[int, UserProfile],UserGroup]"
user_group_id,int
user_profile,UserProfile
user_groups_in_realm,"Callable[[Realm],List[UserGroup]]"
realm,Realm
user_groups_in_realm_serialized,"Callable[[Realm],List[Dict[str, Any]]]"
realm,Realm
get_user_groups,"Callable[[UserProfile],List[UserGroup]]"
user_profile,UserProfile
check_add_user_to_user_group,"Callable[[UserProfile, UserGroup],bool]"
user_profile,UserProfile
user_group,UserGroup
remove_user_from_user_group,"Callable[[UserProfile, UserGroup],int]"
user_profile,UserProfile
user_group,UserGroup
check_remove_user_from_user_group,"Callable[[UserProfile, UserGroup],bool]"
user_profile,UserProfile
user_group,UserGroup
create_user_group,"Callable[[str, List[UserProfile], Realm, str],UserGroup]"
name,str
realm,Realm
description,str
get_user_group_members,"Callable[[UserGroup],List[UserProfile]]"
user_group,UserGroup
get_memberships_of_users,"Callable[[UserGroup, List[UserProfile]],List[int]]"
user_group,UserGroup
get_bot_handler,"Callable[[str],Any]"
service_name,str
bot_module,Any
storage_size_limit,int
__init__,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
get,"Callable[[_, str],str]"
key,str
put,"Callable[[_, str, str],None]"
key,str
value,str
remove,"Callable[[_, str],None]"
key,str
contains,"Callable[[_, str],bool]"
key,str
__init__,"Callable[[_, UserProfile],None]"
user_profile,UserProfile
send_message,"Callable[[_, Dict[str, Any]],None]"
send_reply,"Callable[[_, Dict[str, Any], str],None]"
response,str
get_config_info,"Callable[[_, str, bool],Dict[str, str]]"
bot_name,str
optional,bool
quit,"Callable[[_, str],None]"
message,str
encode,"Callable[[_, Any],str]"
o,Any
iterencode,"Callable[[_, Any, bool],Iterator[str]]"
o,Any
_one_shot,bool
setup_realm_internal_bots,"Callable[[Realm],None]"
realm,Realm
create_if_missing_realm_internal_bots,"Callable[[],None]"
send_initial_pms,"Callable[[UserProfile],None]"
user,UserProfile
setup_initial_streams,"Callable[[Realm],None]"
realm,Realm
stream_dicts,"List[Mapping[str, Any]]"
send_initial_realm_messages,"Callable[[Realm],None]"
realm,Realm
welcome_messages,"List[Dict[str, str]]"
get_topic_mutes,"Callable[[UserProfile],List[List[str]]]"
user_profile,UserProfile
set_topic_mutes,"Callable[[UserProfile, List[List[str]]],None]"
user_profile,UserProfile
muted_topics,List[List[str]]
add_topic_mute,"Callable[[UserProfile, int, int, str],None]"
user_profile,UserProfile
stream_id,int
recipient_id,int
topic_name,str
remove_topic_mute,"Callable[[UserProfile, int, str],None]"
user_profile,UserProfile
stream_id,int
topic_name,str
topic_is_muted,"Callable[[UserProfile, int, str],bool]"
user_profile,UserProfile
stream_id,int
topic_name,str
exclude_topic_mutes,"Callable[[List[Selectable], UserProfile, Union[int, None]],List[Selectable]]"
user_profile,UserProfile
mute_cond,"Callable[[Dict[str, Any]],Selectable]"
build_topic_mute_checker,"Callable[[UserProfile],Callable[[int, str],bool]]"
user_profile,UserProfile
is_muted,"Callable[[int, str],bool]"
recipient_id,int
topic,str
render_tex,"Callable[[str, bool],Union[str, None]]"
tex,str
is_inline,bool
slow,"Callable[[str],_]"
slowness_reason,str
decorator,"Callable[[Any],ReturnT]"
f,Any
is_known_slow_test,"Callable[[Any],bool]"
test_method,Any
full_test_name,"Callable[[TestCase],str]"
test,TestCase
get_test_method,"Callable[[TestCase],Callable[[],None]]"
test,TestCase
TEST_TIMINGS,"List[Tuple[float, str, str]]"
report_slow_tests,"Callable[[],None]"
enforce_timely_test_completion,"Callable[[Any, str, float, TestResult],None]"
test_method,Any
test_name,str
delay,float
result,TestResult
fast_tests_only,"Callable[[],bool]"
run_test,"Callable[[TestCase, TestResult],bool]"
test,TestCase
result,TestResult
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
addInfo,"Callable[[_, TestCase, str],None]"
test,TestCase
msg,str
addInstrumentation,"Callable[[_, TestCase, Dict[str, Any]],None]"
test,TestCase
startTest,"Callable[[_, TestCase],None]"
test,TestCase
addSuccess,"Callable[[_],None]"
args,Any
kwargs,Any
addError,"Callable[[_],None]"
args,Any
kwargs,Any
addFailure,"Callable[[_],None]"
args,Any
kwargs,Any
addSkip,"Callable[[_, TestCase, str],None]"
test,TestCase
reason,str
addInfo,"Callable[[_, TestCase, str],None]"
test,TestCase
msg,str
addInstrumentation,"Callable[[_, TestCase, Dict[str, Any]],None]"
test,TestCase
process_instrumented_calls,"Callable[[Callable[[Dict[str, Any]],None]],None]"
func,"Callable[[Dict[str, Any]],None]"
run_subsuite,"Callable[[SubsuiteArgs],Tuple[int, Any]]"
args,SubsuiteArgs
_replacement_destroy_test_db,"Callable[[DatabaseCreation, str, Any],None]"
self,DatabaseCreation
test_database_name,str
verbosity,Any
destroy_test_databases,"Callable[[Union[int, None]],None]"
create_test_databases,"Callable[[int],None]"
database_id,int
init_worker,"Callable[[Synchronized],None]"
counter,Synchronized
is_upload_avatar_url,"Callable[[RegexURLPattern],bool]"
url,RegexURLPattern
run,"Callable[[_, TestResult, Union[bool, None]],TestResult]"
result,TestResult
__init__,"Callable[[_, TestSuite, int, bool],None]"
suite,TestSuite
processes,int
failfast,bool
check_import_error,"Callable[[str],None]"
test_name,str
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
on_template_rendered,"Callable[[_, Any, Dict[str, Any]],None]"
sender,Any
kwargs,Any
setup_test_environment,"Callable[[_],Any]"
args,Any
kwargs,Any
teardown_test_environment,"Callable[[_],Any]"
args,Any
kwargs,Any
test_imports,"Callable[[_, List[str], unittest.TestSuite],None]"
run_tests,"Callable[[_, List[str], Union[List[TestCase], None], bool],Tuple[bool, List[str]]]"
extra_tests,"Union[List[TestCase], None]"
full_suite,bool
kwargs,Any
get_tests_from_suite,"Callable[[TestSuite],TestCase]"
suite,TestSuite
serialize_suite,"Callable[[TestSuite],Tuple[Type[TestSuite], List[str]]]"
suite,TestSuite
deserialize_suite,"Callable[[Tuple[Type[TestSuite], List[str]]],TestSuite]"
args,"Tuple[Type[TestSuite], List[str]]"
__init__,"Callable[[_, List[TestSuite]],None]"
__getitem__,"Callable[[_, Any],Any]"
index,Any
has_enough_time_expired_since_last_message,"Callable[[str, float],bool]"
sender_email,str
min_delay,float
get_ticket_number,"Callable[[],int]"
deliver_feedback_by_zulip,"Callable[[Mapping[str, Any]],None]"
handle_feedback,"Callable[[Mapping[str, Any]],None]"
highlight_with_class,"Callable[[str, str],str]"
text,str
klass,str
highlight_html_differences,"Callable[[str, str, Union[int, None]],str]"
s1,str
s2,str
__init__,"Callable[[_, List[str]],None]"
self._indices,"Dict[str, sourcemap.SourceMapDecoder]"
_index_for,"Callable[[_, str],sourcemap.SourceMapDecoder]"
minified_src,str
annotate_stacktrace,"Callable[[_, str],str]"
stacktrace,str
out,str
filter,"Callable[[_, logging.LogRecord],bool]"
filter,"Callable[[_, logging.LogRecord],bool]"
filter,"Callable[[_, logging.LogRecord],bool]"
filter,"Callable[[_, logging.LogRecord],bool]"
skip_200_and_304,"Callable[[logging.LogRecord],bool]"
skip_boring_404s,"Callable[[logging.LogRecord],bool]"
skip_site_packages_logs,"Callable[[logging.LogRecord],bool]"
find_log_origin,"Callable[[logging.LogRecord],str]"
abbrev_log_levelname,"Callable[[str],str]"
levelname,str
__init__,"Callable[[_],None]"
_compute_fmt,"Callable[[_],str]"
format,"Callable[[_, logging.LogRecord],str]"
log_to_file,"Callable[[Logger, str, str],None]"
logger,Logger
filename,str
log_format,str
check_string,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_required_string,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_short_string,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_capped_string,"Callable[[int],Validator]"
max_length,int
validator,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_string_fixed_length,"Callable[[int],Validator]"
length,int
validator,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_long_string,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_date,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_int,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_float,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_bool,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_none_or,"Callable[[Validator],Validator]"
sub_validator,Validator
f,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_list,"Callable[[Union[Validator, None], Union[int, None]],Validator]"
f,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_dict,"Callable[[Iterable[Tuple[str, Validator]], Union[Validator, None], bool],Validator]"
required_keys,"Iterable[Tuple[str, Validator]]"
_allow_only_listed_keys,bool
f,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
check_dict_only,"Callable[[Iterable[Tuple[str, Validator]]],Validator]"
required_keys,"Iterable[Tuple[str, Validator]]"
check_variable_type,"Callable[[Iterable[Validator]],Validator]"
enumerated_type_check,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
equals,"Callable[[object],Validator]"
expected_val,object
f,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
validate_login_email,"Callable[[str],None]"
email,str
check_url,"Callable[[str, object],Union[str, None]]"
var_name,str
val,object
validate_field_data,"Callable[[ProfileFieldData],Union[str, None]]"
field_data,ProfileFieldData
validate_choice_field,"Callable[[str, str, object],None]"
var_name,str
field_data,str
value,object
check_widget_content,"Callable[[object],Union[str, None]]"
widget_content,object
get_bot_storage,"Callable[[UserProfile, str],str]"
bot_profile,UserProfile
key,str
get_bot_storage_size,"Callable[[UserProfile, Union[str, None]],int]"
bot_profile,UserProfile
set_bot_storage,"Callable[[UserProfile, List[Tuple[str, str]]],None]"
bot_profile,UserProfile
entries,"List[Tuple[str, str]]"
remove_bot_storage,"Callable[[UserProfile, List[str]],None]"
bot_profile,UserProfile
is_key_in_bot_storage,"Callable[[UserProfile, str],bool]"
bot_profile,UserProfile
key,str
get_keys_in_bot_storage,"Callable[[UserProfile],List[str]]"
bot_profile,UserProfile
copy_user_settings,"Callable[[UserProfile, UserProfile],None]"
source_profile,UserProfile
target_profile,UserProfile
create_user_profile,"Callable[[Realm, str, Union[str, None], bool, Union[int, None], str, str, Union[UserProfile, None], bool, Union[str, None], Union[str, None], Union[str, None], bool],UserProfile]"
realm,Realm
email,str
active,bool
full_name,str
short_name,str
is_mirror_dummy,bool
enter_sends,bool
create_user,"Callable[[str, Union[str, None], Realm, str, str, bool, bool, Union[int, None], Union[UserProfile, None], Union[str, None], str, str, bool, Union[Stream, None], Union[Stream, None], Union[bool, None], Union[UserProfile, None]],UserProfile]"
email,str
realm,Realm
full_name,str
short_name,str
active,bool
is_realm_admin,bool
timezone,str
avatar_source,str
is_mirror_dummy,bool
force_bytes,"Callable[[Union[str, bytes], str],bytes]"
encoding,str
der_encode_length,"Callable[[int],bytes]"
length,int
der_encode_tlv,"Callable[[int, bytes],bytes]"
tag,int
value,bytes
der_encode_integer_value,"Callable[[int],bytes]"
val,int
der_encode_integer,"Callable[[int],bytes]"
val,int
der_encode_int32,"Callable[[int],bytes]"
val,int
der_encode_uint32,"Callable[[int],bytes]"
val,int
der_encode_string,"Callable[[str],bytes]"
val,str
der_encode_octet_string,"Callable[[bytes],bytes]"
val,bytes
der_encode_sequence,"Callable[[List[Union[bytes, None]], Union[bool, None]],bytes]"
tlvs,"List[Union[bytes, None]]"
der_encode_ticket,"Callable[[Dict[str, Any]],bytes]"
ccache_counted_octet_string,"Callable[[bytes],bytes]"
data,bytes
ccache_principal,"Callable[[Dict[str, str], str],bytes]"
realm,str
ccache_key,"Callable[[Dict[str, str]],bytes]"
flags_to_uint32,"Callable[[List[str]],int]"
ccache_credential,"Callable[[Dict[str, Any]],bytes]"
make_ccache,"Callable[[Dict[str, Any]],bytes]"
stub_event_queue_user_events,"Callable[[Any, Any],Iterator[None]]"
event_queue_return,Any
user_events_return,Any
tornado_redirected_to_list,"Callable[[List[Mapping[str, Any]]],Iterator[None]]"
lst,"List[Mapping[str, Any]]"
simulated_empty_cache,"Callable[[],Generator[List[Tuple[str, Union[str, List[str]], str]], None, None]]"
cache_queries,"List[Tuple[str, Union[str, List[str]], str]]"
my_cache_get,"Callable[[str, Union[str, None]],Union[Dict[str, Any], None]]"
key,str
queries_captured,"Callable[[Union[bool, None]],Generator[List[Dict[str, Union[str, bytes]]], None, None]]"
queries,"List[Dict[str, Union[str, bytes]]]"
wrapper_execute,"Callable[[TimeTrackingCursor, Callable[[str, Iterable[Any]],None], str, Iterable[Any]],None]"
self,TimeTrackingCursor
action,"Callable[[str, Iterable[Any]],None]"
sql,str
cursor_execute,"Callable[[TimeTrackingCursor, str, Iterable[Any]],None]"
self,TimeTrackingCursor
sql,str
cursor_executemany,"Callable[[TimeTrackingCursor, str, Iterable[Any]],None]"
self,TimeTrackingCursor
sql,str
stdout_suppressed,"Callable[[],Iterator[IO[str]]]"
get_test_image_file,"Callable[[str],IO[Any]]"
filename,str
avatar_disk_path,"Callable[[UserProfile, bool, bool],str]"
user_profile,UserProfile
medium,bool
original,bool
make_client,"Callable[[str],Client]"
name,str
find_key_by_email,"Callable[[str],Union[str, None]]"
address,str
message_stream_count,"Callable[[UserProfile],int]"
user_profile,UserProfile
most_recent_usermessage,"Callable[[UserProfile],UserMessage]"
user_profile,UserProfile
most_recent_message,"Callable[[UserProfile],Message]"
user_profile,UserProfile
get_subscription,"Callable[[str, UserProfile],Subscription]"
stream_name,str
user_profile,UserProfile
get_user_messages,"Callable[[UserProfile],List[Message]]"
user_profile,UserProfile
__init__,"Callable[[_],None]"
__init__,"Callable[[_, Dict[str, Any], Union[UserProfile, None]],None]"
__init__,"Callable[[_, UserProfile, str],None]"
user_profile,UserProfile
host,str
get_host,"Callable[[_],str]"
__init__,"Callable[[_, str, int],None]"
text,str
status_code,int
ok,"Callable[[_],bool]"
INSTRUMENTED_CALLS,"List[Dict[str, Any]]"
append_instrumentation_data,"Callable[[Dict[str, Any]],None]"
instrument_url,"Callable[[UrlFuncT],UrlFuncT]"
f,UrlFuncT
wrapper,"Callable[[ZulipTestCase, str, Dict[str, Any]],HttpResponse]"
self,ZulipTestCase
url,str
kwargs,Any
write_instrumentation_reports,"Callable[[bool],None]"
full_suite,bool
re_strip,"Callable[[Any],str]"
r,Any
find_patterns,"Callable[[List[Any], List[str]],None]"
cleanup_url,"Callable[[str],str]"
url,str
find_pattern,"Callable[[Any, List[str]],None]"
pattern,Any
is_valid_template,"Callable[[str, str],bool]"
p,str
n,str
process,"Callable[[str, str, Iterable[str]],None]"
template_dir,str
dirname,str
load_subdomain_token,"Callable[[HttpResponse],Dict[str, Any]]"
response,HttpResponse
use_s3_backend,"Callable[[FuncT],FuncT]"
method,FuncT
new_method,"Callable[[],Any]"
args,Any
kwargs,Any
method_patched_with_mock,"Callable[[MigrationsTestCase, StateApps],None]"
self,MigrationsTestCase
apps,StateApps
log_event,"Callable[[MutableMapping[str, Any]],None]"
can_access_stream_user_ids,"Callable[[Stream],Set[int]]"
stream,Stream
private_stream_user_ids,"Callable[[int],Set[int]]"
stream_id,int
public_stream_user_ids,"Callable[[Stream],Set[int]]"
stream,Stream
bot_owner_user_ids,"Callable[[UserProfile],Set[int]]"
user_profile,UserProfile
realm_user_count,"Callable[[Realm],int]"
realm,Realm
activity_change_requires_seat_update,"Callable[[UserProfile],bool]"
user,UserProfile
send_signup_message,"Callable[[UserProfile, str, UserProfile, bool, Union[Realm, None]],None]"
sender,UserProfile
admin_realm_signup_notifications_stream,str
user_profile,UserProfile
internal,bool
notify_invites_changed,"Callable[[UserProfile],None]"
user_profile,UserProfile
notify_new_user,"Callable[[UserProfile, bool],None]"
user_profile,UserProfile
internal,bool
add_new_user_history,"Callable[[UserProfile, Iterable[Stream]],None]"
user_profile,UserProfile
process_new_human_user,"Callable[[UserProfile, Union[PreregistrationUser, None], Union[Dict[str, str], None], List[DefaultStreamGroup], bool],None]"
user_profile,UserProfile
newsletter_data,"Union[Dict[str, str], None]"
realm_creation,bool
notify_created_user,"Callable[[UserProfile],None]"
user_profile,UserProfile
created_bot_event,"Callable[[UserProfile],Dict[str, Any]]"
user_profile,UserProfile
notify_created_bot,"Callable[[UserProfile],None]"
user_profile,UserProfile
create_users,"Callable[[Realm, Iterable[Tuple[str, str]], int],None]"
realm,Realm
name_list,"Iterable[Tuple[str, str]]"
bot_type,int
do_create_user,"Callable[[str, Union[str, None], Realm, str, str, bool, Union[int, None], Union[UserProfile, None], Union[str, None], str, str, Union[Stream, None], Union[Stream, None], Union[bool, None], Union[PreregistrationUser, None], Union[Dict[str, str], None], List[DefaultStreamGroup], Union[UserProfile, None], bool],UserProfile]"
email,str
realm,Realm
full_name,str
short_name,str
is_realm_admin,bool
timezone,str
avatar_source,str
newsletter_data,"Union[Dict[str, str], None]"
realm_creation,bool
do_activate_user,"Callable[[UserProfile],None]"
user_profile,UserProfile
do_reactivate_user,"Callable[[UserProfile, Union[UserProfile, None]],None]"
user_profile,UserProfile
active_humans_in_realm,"Callable[[Realm],Sequence[UserProfile]]"
realm,Realm
do_set_realm_property,"Callable[[Realm, str, Any],None]"
realm,Realm
name,str
value,Any
do_set_realm_authentication_methods,"Callable[[Realm, Dict[str, bool]],None]"
realm,Realm
do_set_realm_message_editing,"Callable[[Realm, bool, int, bool],None]"
realm,Realm
allow_message_editing,bool
message_content_edit_limit_seconds,int
allow_community_topic_editing,bool
do_set_realm_message_deleting,"Callable[[Realm, int],None]"
realm,Realm
message_content_delete_limit_seconds,int
do_set_realm_notifications_stream,"Callable[[Realm, Stream, int],None]"
realm,Realm
stream,Stream
stream_id,int
do_set_realm_signup_notifications_stream,"Callable[[Realm, Stream, int],None]"
realm,Realm
stream,Stream
stream_id,int
do_deactivate_realm,"Callable[[Realm],None]"
realm,Realm
do_reactivate_realm,"Callable[[Realm],None]"
realm,Realm
do_change_realm_subdomain,"Callable[[Realm, str],None]"
realm,Realm
new_subdomain,str
do_scrub_realm,"Callable[[Realm],None]"
realm,Realm
do_deactivate_user,"Callable[[UserProfile, Union[UserProfile, None], bool],None]"
user_profile,UserProfile
_cascade,bool
do_deactivate_stream,"Callable[[Stream, bool],None]"
stream,Stream
log,bool
do_change_user_email,"Callable[[UserProfile, str],None]"
user_profile,UserProfile
new_email,str
do_start_email_change_process,"Callable[[UserProfile, str],None]"
user_profile,UserProfile
new_email,str
compute_irc_user_fullname,"Callable[[str],str]"
email,str
compute_jabber_user_fullname,"Callable[[str],str]"
email,str
create_mirror_user_if_needed,"Callable[[Realm, str, Callable[[str],str]],UserProfile]"
realm,Realm
email,str
email_to_fullname,"Callable[[str],str]"
send_welcome_bot_response,"Callable[[MutableMapping[str, Any]],None]"
render_incoming_message,"Callable[[Message, str, Set[int], Realm, Union[bugdown.MentionData, None], Union[bool, None]],str]"
message,Message
content,str
realm,Realm
mention_data,"Union[bugdown.MentionData, None]"
get_typing_user_profiles,"Callable[[Recipient, int],List[UserProfile]]"
recipient,Recipient
sender_id,int
get_recipient_info,"Callable[[Recipient, int, Union[StreamTopicTarget, None], Union[Set[int], None]],RecipientInfoResult]"
recipient,Recipient
sender_id,int
possibly_mentioned_user_ids,"Union[Set[int], None]"
get_ids_for,"Callable[[Callable[[Dict[str, Any]],bool]],Set[int]]"
f,"Callable[[Dict[str, Any]],bool]"
is_service_bot,"Callable[[Dict[str, Any]],bool]"
info,RecipientInfoResult
get_service_bot_events,"Callable[[UserProfile, List[Tuple[int, int]], Set[int], Set[int], int],Dict[str, List[Dict[str, Any]]]]"
sender,UserProfile
service_bot_tuples,"List[Tuple[int, int]]"
recipient_type,int
event_dict,"Dict[str, List[Dict[str, Any]]]"
maybe_add_event,"Callable[[int, int],None]"
user_profile_id,int
bot_type,int
do_schedule_messages,"Callable[[Sequence[Mapping[str, Any]]],List[int]]"
messages,"Sequence[Mapping[str, Any]]"
do_send_messages,"Callable[[Sequence[Union[MutableMapping[str, Any], None]], Union[bool, None]],List[int]]"
messages_maybe_none,"Sequence[Union[MutableMapping[str, Any], None]]"
new_messages,"List[MutableMapping[str, Any]]"
user_message_flags,"Dict[int, Dict[int, List[str]]]"
__init__,"Callable[[_, int, int, int],None]"
user_profile_id,int
message_id,int
flags,int
create_user_messages,"Callable[[Message, Set[int], Set[int], Set[int], Set[int], Set[int]],List[UserMessageLite]]"
message,Message
bulk_insert_ums,"Callable[[List[UserMessageLite]],None]"
do_add_submessage,"Callable[[Realm, int, int, str, str],None]"
realm,Realm
sender_id,int
message_id,int
msg_type,str
content,str
notify_reaction_update,"Callable[[UserProfile, Message, Reaction, str],None]"
user_profile,UserProfile
message,Message
reaction,Reaction
op,str
do_add_reaction_legacy,"Callable[[UserProfile, Message, str],None]"
user_profile,UserProfile
message,Message
emoji_name,str
do_remove_reaction_legacy,"Callable[[UserProfile, Message, str],None]"
user_profile,UserProfile
message,Message
emoji_name,str
do_add_reaction,"Callable[[UserProfile, Message, str, str, str],None]"
user_profile,UserProfile
message,Message
emoji_name,str
emoji_code,str
reaction_type,str
do_remove_reaction,"Callable[[UserProfile, Message, str, str],None]"
user_profile,UserProfile
message,Message
emoji_code,str
reaction_type,str
do_send_typing_notification,"Callable[[Realm, Dict[str, Any]],None]"
realm,Realm
check_send_typing_notification,"Callable[[UserProfile, Sequence[str], str],None]"
sender,UserProfile
operator,str
check_typing_notification,"Callable[[UserProfile, Sequence[str], str],Dict[str, Any]]"
sender,UserProfile
operator,str
stream_welcome_message,"Callable[[Stream],str]"
stream,Stream
prep_stream_welcome_message,"Callable[[Stream],Union[Dict[str, Any], None]]"
stream,Stream
send_stream_creation_event,"Callable[[Stream, List[int]],None]"
stream,Stream
get_default_value_for_history_public_to_subscribers,"Callable[[Realm, bool, Union[bool, None]],bool]"
realm,Realm
invite_only,bool
create_stream_if_needed,"Callable[[Realm, str],Tuple[Stream, bool]]"
realm,Realm
stream_name,str
invite_only,bool
is_announcement_only,bool
stream_description,str
ensure_stream,"Callable[[Realm, str, bool, str],Stream]"
realm,Realm
stream_name,str
invite_only,bool
stream_description,str
create_streams_if_needed,"Callable[[Realm, List[Mapping[str, Any]]],Tuple[List[Stream], List[Stream]]]"
realm,Realm
stream_dicts,"List[Mapping[str, Any]]"
get_recipient_from_user_ids,"Callable[[Set[int], bool, Union[UserProfile, None], UserProfile],Recipient]"
not_forged_mirror_message,bool
sender,UserProfile
validate_recipient_user_profiles,"Callable[[List[UserProfile], UserProfile],Set[int]]"
sender,UserProfile
recipient_for_emails,"Callable[[Iterable[str], bool, Union[UserProfile, None], UserProfile],Recipient]"
not_forged_mirror_message,bool
sender,UserProfile
recipient_for_user_ids,"Callable[[Iterable[int], UserProfile],Recipient]"
sender,UserProfile
recipient_for_user_profiles,"Callable[[List[UserProfile], bool, Union[UserProfile, None], UserProfile],Recipient]"
not_forged_mirror_message,bool
sender,UserProfile
already_sent_mirrored_message_id,"Callable[[Message],Union[int, None]]"
message,Message
extract_recipients,"Callable[[Union[str, Iterable[str]]],List[str]]"
s,"Union[str, Iterable[str]]"
check_send_stream_message,"Callable[[UserProfile, Client, str, str, str],int]"
sender,UserProfile
client,Client
stream_name,str
topic,str
body,str
check_send_private_message,"Callable[[UserProfile, Client, UserProfile, str],int]"
sender,UserProfile
client,Client
receiving_user,UserProfile
body,str
check_send_message,"Callable[[UserProfile, Client, str, Sequence[str], Union[str, None], str, Union[Realm, None], bool, Union[float, None], Union[UserProfile, None], Union[str, None], Union[str, None], Union[str, None]],int]"
sender,UserProfile
client,Client
message_type_name,str
message_content,str
forged,bool
check_schedule_message,"Callable[[UserProfile, Client, str, Sequence[str], Union[str, None], str, str, datetime.datetime, Union[Realm, None], Union[UserProfile, None]],int]"
sender,UserProfile
client,Client
message_type_name,str
message_content,str
delivery_type,str
check_stream_name,"Callable[[str],None]"
stream_name,str
check_default_stream_group_name,"Callable[[str],None]"
group_name,str
send_rate_limited_pm_notification_to_bot_owner,"Callable[[UserProfile, Realm, str],None]"
sender,UserProfile
realm,Realm
content,str
send_pm_if_empty_stream,"Callable[[UserProfile, Union[Stream, None], str, Realm],None]"
sender,UserProfile
stream_name,str
realm,Realm
validate_sender_can_write_to_stream,"Callable[[UserProfile, Stream, Union[UserProfile, None]],None]"
sender,UserProfile
stream,Stream
check_message,"Callable[[UserProfile, Client, Addressee, str, Union[Realm, None], bool, Union[float, None], Union[UserProfile, None], Union[str, None], Union[str, None], Union[str, None]],Dict[str, Any]]"
sender,UserProfile
client,Client
addressee,Addressee
message_content_raw,str
forged,bool
_internal_prep_message,"Callable[[Realm, UserProfile, Addressee, str],Union[Dict[str, Any], None]]"
realm,Realm
sender,UserProfile
addressee,Addressee
content,str
internal_prep_stream_message,"Callable[[Realm, UserProfile, str, str, str],Union[Dict[str, Any], None]]"
realm,Realm
sender,UserProfile
stream_name,str
topic,str
content,str
internal_prep_private_message,"Callable[[Realm, UserProfile, UserProfile, str],Union[Dict[str, Any], None]]"
realm,Realm
sender,UserProfile
recipient_user,UserProfile
content,str
internal_send_message,"Callable[[Realm, str, str, str, str, str, Union[bool, None]],None]"
realm,Realm
sender_email,str
recipient_type_name,str
recipients,str
topic_name,str
content,str
internal_send_private_message,"Callable[[Realm, UserProfile, UserProfile, str],None]"
realm,Realm
sender,UserProfile
recipient_user,UserProfile
content,str
internal_send_stream_message,"Callable[[Realm, UserProfile, str, str, str],None]"
realm,Realm
sender,UserProfile
stream_name,str
topic,str
content,str
internal_send_huddle_message,"Callable[[Realm, UserProfile, List[str], str],None]"
realm,Realm
sender,UserProfile
content,str
pick_color,"Callable[[UserProfile, Iterable[Subscription]],str]"
user_profile,UserProfile
validate_user_access_to_subscribers,"Callable[[Union[UserProfile, None], Stream],None]"
stream,Stream
validate_user_access_to_subscribers_helper,"Callable[[Union[UserProfile, None], Mapping[str, Any], Callable[[],bool]],None]"
check_user_subscribed,"Callable[[],bool]"
bulk_get_subscriber_user_ids,"Callable[[Iterable[Mapping[str, Any]], UserProfile, Mapping[int, bool], StreamRecipientMap],Dict[int, List[int]]]"
stream_dicts,"Iterable[Mapping[str, Any]]"
user_profile,UserProfile
stream_recipient,StreamRecipientMap
result,"Dict[int, List[int]]"
get_subscribers_query,"Callable[[Stream, Union[UserProfile, None]],QuerySet]"
stream,Stream
get_subscriber_emails,"Callable[[Stream, Union[UserProfile, None]],List[str]]"
stream,Stream
notify_subscriptions_added,"Callable[[UserProfile, Iterable[Tuple[Subscription, Stream]], Callable[[Stream],List[int]], Dict[int, int], bool],None]"
user_profile,UserProfile
sub_pairs,"Iterable[Tuple[Subscription, Stream]]"
stream_user_ids,"Callable[[Stream],List[int]]"
no_log,bool
get_peer_user_ids_for_stream_change,"Callable[[Stream, Iterable[int], Iterable[int]],Set[int]]"
stream,Stream
get_user_ids_for_streams,"Callable[[Iterable[Stream]],Dict[int, List[int]]]"
all_subscribers_by_stream,"Dict[int, List[int]]"
get_last_message_id,"Callable[[],int]"
bulk_add_subscriptions,"Callable[[Iterable[Stream], Iterable[UserProfile], bool, Union[UserProfile, None]],SubT]"
from_stream_creation,bool
subs_by_user,"Dict[int, List[Subscription]]"
already_subscribed,"List[Tuple[UserProfile, Stream]]"
subs_to_activate,"List[Tuple[Subscription, Stream]]"
new_subs,"List[Tuple[UserProfile, int, Stream]]"
subs_to_add,"List[Tuple[Subscription, Stream]]"
fetch_stream_subscriber_user_ids,"Callable[[Stream],List[int]]"
stream,Stream
sub_tuples_by_user,"Dict[int, List[Tuple[Subscription, Stream]]]"
new_streams,"Set[Tuple[int, int]]"
notify_subscriptions_removed,"Callable[[UserProfile, Iterable[Stream], bool],None]"
user_profile,UserProfile
no_log,bool
bulk_remove_subscriptions,"Callable[[Iterable[UserProfile], Iterable[Stream], Client, Union[UserProfile, None]],SubAndRemovedT]"
acting_client,Client
get_non_subscribed_tups,"Callable[[],List[Tuple[UserProfile, Stream]]]"
not_subscribed,"List[Tuple[UserProfile, Stream]]"
subs_to_deactivate,"List[Tuple[Subscription, Stream]]"
altered_user_dict,"Dict[int, List[UserProfile]]"
streams_by_user,"Dict[int, List[Stream]]"
send_peer_remove_event,"Callable[[Stream],None]"
stream,Stream
log_subscription_property_change,"Callable[[str, str, str, Any],None]"
user_email,str
stream_name,str
property,str
value,Any
do_change_subscription_property,"Callable[[UserProfile, Subscription, Stream, str, Any],None]"
user_profile,UserProfile
sub,Subscription
stream,Stream
property_name,str
value,Any
do_change_password,"Callable[[UserProfile, str, bool],None]"
user_profile,UserProfile
password,str
commit,bool
do_change_full_name,"Callable[[UserProfile, str, Union[UserProfile, None]],None]"
user_profile,UserProfile
full_name,str
check_change_full_name,"Callable[[UserProfile, str, UserProfile],str]"
user_profile,UserProfile
full_name_raw,str
acting_user,UserProfile
check_change_bot_full_name,"Callable[[UserProfile, str, UserProfile],None]"
user_profile,UserProfile
full_name_raw,str
acting_user,UserProfile
do_change_bot_owner,"Callable[[UserProfile, UserProfile, UserProfile],None]"
user_profile,UserProfile
bot_owner,UserProfile
acting_user,UserProfile
do_change_tos_version,"Callable[[UserProfile, str],None]"
user_profile,UserProfile
tos_version,str
do_regenerate_api_key,"Callable[[UserProfile, UserProfile],None]"
user_profile,UserProfile
acting_user,UserProfile
do_change_avatar_fields,"Callable[[UserProfile, str],None]"
user_profile,UserProfile
avatar_source,str
do_delete_avatar_image,"Callable[[UserProfile],None]"
user,UserProfile
do_change_icon_source,"Callable[[Realm, str, bool],None]"
realm,Realm
icon_source,str
log,bool
do_change_plan_type,"Callable[[UserProfile, int],None]"
user,UserProfile
plan_type,int
do_change_default_sending_stream,"Callable[[UserProfile, Union[Stream, None], bool],None]"
user_profile,UserProfile
log,bool
do_change_default_events_register_stream,"Callable[[UserProfile, Union[Stream, None], bool],None]"
user_profile,UserProfile
log,bool
do_change_default_all_public_streams,"Callable[[UserProfile, bool, bool],None]"
user_profile,UserProfile
value,bool
log,bool
do_change_is_admin,"Callable[[UserProfile, bool, str],None]"
user_profile,UserProfile
value,bool
permission,str
do_change_is_guest,"Callable[[UserProfile, bool],None]"
user_profile,UserProfile
value,bool
do_change_stream_invite_only,"Callable[[Stream, bool, Union[bool, None]],None]"
stream,Stream
invite_only,bool
do_change_stream_web_public,"Callable[[Stream, bool],None]"
stream,Stream
is_web_public,bool
do_change_stream_announcement_only,"Callable[[Stream, bool],None]"
stream,Stream
is_announcement_only,bool
do_rename_stream,"Callable[[Stream, str, bool],Dict[str, str]]"
stream,Stream
new_name,str
log,bool
do_change_stream_description,"Callable[[Stream, str],None]"
stream,Stream
new_description,str
do_create_realm,"Callable[[str, str, Union[bool, None]],Realm]"
string_id,str
name,str
do_change_notification_settings,"Callable[[UserProfile, str, bool, bool],None]"
user_profile,UserProfile
name,str
value,bool
log,bool
do_change_enter_sends,"Callable[[UserProfile, bool],None]"
user_profile,UserProfile
enter_sends,bool
do_set_user_display_setting,"Callable[[UserProfile, str, Union[bool, str]],None]"
user_profile,UserProfile
setting_name,str
lookup_default_stream_groups,"Callable[[List[str], Realm],List[DefaultStreamGroup]]"
realm,Realm
set_default_streams,"Callable[[Realm, Dict[str, Dict[str, Any]]],None]"
realm,Realm
stream_dict,"Dict[str, Dict[str, Any]]"
notify_default_streams,"Callable[[Realm],None]"
realm,Realm
notify_default_stream_groups,"Callable[[Realm],None]"
realm,Realm
do_add_default_stream,"Callable[[Stream],None]"
stream,Stream
do_remove_default_stream,"Callable[[Stream],None]"
stream,Stream
do_create_default_stream_group,"Callable[[Realm, str, str, List[Stream]],None]"
realm,Realm
group_name,str
description,str
do_add_streams_to_default_stream_group,"Callable[[Realm, DefaultStreamGroup, List[Stream]],None]"
realm,Realm
group,DefaultStreamGroup
do_remove_streams_from_default_stream_group,"Callable[[Realm, DefaultStreamGroup, List[Stream]],None]"
realm,Realm
group,DefaultStreamGroup
do_change_default_stream_group_name,"Callable[[Realm, DefaultStreamGroup, str],None]"
realm,Realm
group,DefaultStreamGroup
new_group_name,str
do_change_default_stream_group_description,"Callable[[Realm, DefaultStreamGroup, str],None]"
realm,Realm
group,DefaultStreamGroup
new_description,str
do_remove_default_stream_group,"Callable[[Realm, DefaultStreamGroup],None]"
realm,Realm
group,DefaultStreamGroup
get_default_streams_for_realm,"Callable[[int],List[Stream]]"
realm_id,int
get_default_subs,"Callable[[UserProfile],List[Stream]]"
user_profile,UserProfile
streams_to_dicts_sorted,"Callable[[List[Stream]],List[Dict[str, Any]]]"
default_stream_groups_to_dicts_sorted,"Callable[[List[DefaultStreamGroup]],List[Dict[str, Any]]]"
do_update_user_activity_interval,"Callable[[UserProfile, datetime.datetime],None]"
user_profile,UserProfile
do_update_user_activity,"Callable[[UserProfile, Client, str, datetime.datetime],None]"
user_profile,UserProfile
client,Client
query,str
send_presence_changed,"Callable[[UserProfile, UserPresence],None]"
user_profile,UserProfile
presence,UserPresence
consolidate_client,"Callable[[Client],Client]"
client,Client
do_update_user_presence,"Callable[[UserProfile, Client, datetime.datetime, int],None]"
user_profile,UserProfile
client,Client
status,int
update_user_activity_interval,"Callable[[UserProfile, datetime.datetime],None]"
user_profile,UserProfile
update_user_presence,"Callable[[UserProfile, Client, datetime.datetime, int, bool],None]"
user_profile,UserProfile
client,Client
status,int
new_user_input,bool
do_update_pointer,"Callable[[UserProfile, Client, int, bool],None]"
user_profile,UserProfile
client,Client
pointer,int
update_flags,bool
do_mark_all_as_read,"Callable[[UserProfile, Client],int]"
user_profile,UserProfile
client,Client
do_mark_stream_messages_as_read,"Callable[[UserProfile, Client, Stream, Union[str, None]],int]"
user_profile,UserProfile
client,Client
stream,Stream
do_clear_mobile_push_notifications_for_ids,"Callable[[UserProfile, List[int]],None]"
user_profile,UserProfile
do_update_message_flags,"Callable[[UserProfile, Client, str, str, List[int]],int]"
user_profile,UserProfile
client,Client
operation,str
flag,str
subscribed_to_stream,"Callable[[UserProfile, int],bool]"
user_profile,UserProfile
stream_id,int
truncate_content,"Callable[[str, int, str],str]"
content,str
max_length,int
truncation_message,str
truncate_body,"Callable[[str],str]"
body,str
truncate_topic,"Callable[[str],str]"
topic,str
get_user_info_for_message_updates,"Callable[[int],MessageUpdateUserInfoResult]"
message_id,int
update_user_message_flags,"Callable[[Message, Iterable[UserMessage]],None]"
message,Message
update_flag,"Callable[[UserMessage, bool, int],None]"
um,UserMessage
should_set,bool
flag,int
do_update_embedded_data,"Callable[[UserProfile, Message, Union[str, None], Union[str, None]],None]"
user_profile,UserProfile
message,Message
user_info,"Callable[[UserMessage],Dict[str, Any]]"
um,UserMessage
do_update_message,"Callable[[UserProfile, Message, Union[str, None], str, Union[str, None], Union[str, None], Set[int], Set[int]],int]"
user_profile,UserProfile
message,Message
propagate_mode,str
user_info,"Callable[[UserMessage],Dict[str, Any]]"
um,UserMessage
do_delete_message,"Callable[[UserProfile, Message],None]"
user_profile,UserProfile
message,Message
do_delete_messages,"Callable[[UserProfile],None]"
user,UserProfile
round_to_2_significant_digits,"Callable[[int],int]"
number,int
get_average_weekly_stream_traffic,"Callable[[int, datetime.datetime, Dict[int, int]],Union[int, None]]"
stream_id,int
is_old_stream,"Callable[[datetime.datetime],bool]"
encode_email_address,"Callable[[Stream],str]"
stream,Stream
encode_email_address_helper,"Callable[[str, str],str]"
name,str
email_token,str
get_email_gateway_message_string_from_address,"Callable[[str],Union[str, None]]"
address,str
decode_email_address,"Callable[[str],Union[Tuple[str, str], None]]"
email,str
get_web_public_subs,"Callable[[Realm],SubHelperT]"
realm,Realm
get_next_color,"Callable[[],str]"
gather_subscriptions_helper,"Callable[[UserProfile, bool],SubHelperT]"
user_profile,UserProfile
include_subscribers,bool
subscriber_map,"Mapping[int, Union[List[int], None]]"
subscribers,"Union[List[int], None]"
gather_subscriptions,"Callable[[UserProfile],Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]]"
user_profile,UserProfile
get_active_presence_idle_user_ids,"Callable[[Realm, int, str, Set[int], Dict[int, List[str]]],List[int]]"
realm,Realm
sender_id,int
message_type,str
user_flags,"Dict[int, List[str]]"
get_status_dict,"Callable[[UserProfile],Dict[str, Dict[str, Dict[str, Any]]]]"
requesting_user_profile,UserProfile
get_cross_realm_dicts,"Callable[[],List[Dict[str, Any]]]"
do_send_confirmation_email,"Callable[[PreregistrationUser, UserProfile],None]"
invitee,PreregistrationUser
referrer,UserProfile
email_not_system_bot,"Callable[[str],None]"
email,str
validate_email_for_realm,"Callable[[Realm, str],None]"
target_realm,Realm
email,str
validate_email,"Callable[[UserProfile, str],Tuple[Union[str, None], Union[str, None]]]"
user_profile,UserProfile
email,str
__init__,"Callable[[_, str, List[Tuple[str, str]], bool],None]"
msg,str
errors,"List[Tuple[str, str]]"
sent_invitations,bool
self._msg,str
self.errors,"List[Tuple[str, str]]"
self.sent_invitations,bool
estimate_recent_invites,"Callable[[Iterable[Realm]],int]"
days,int
check_invite_limit,"Callable[[Realm, int],None]"
realm,Realm
num_invitees,int
do_invite_users,"Callable[[UserProfile, SizedTextIterable, Iterable[Stream], Union[bool, None]],None]"
user_profile,UserProfile
invitee_emails,SizedTextIterable
errors,"List[Tuple[str, str]]"
skipped,"List[Tuple[str, str]]"
do_get_user_invites,"Callable[[UserProfile],List[Dict[str, Any]]]"
user_profile,UserProfile
do_create_multiuse_invite_link,"Callable[[UserProfile, Union[List[Stream], None]],str]"
referred_by,UserProfile
streams,"Union[List[Stream], None]"
do_revoke_user_invite,"Callable[[PreregistrationUser],None]"
prereg_user,PreregistrationUser
do_resend_user_invite_email,"Callable[[PreregistrationUser],int]"
prereg_user,PreregistrationUser
notify_realm_emoji,"Callable[[Realm],None]"
realm,Realm
check_add_realm_emoji,"Callable[[Realm, str, UserProfile, File],Union[RealmEmoji, None]]"
realm,Realm
name,str
author,UserProfile
image_file,File
do_remove_realm_emoji,"Callable[[Realm, str],None]"
realm,Realm
name,str
notify_alert_words,"Callable[[UserProfile, Iterable[str]],None]"
user_profile,UserProfile
do_add_alert_words,"Callable[[UserProfile, Iterable[str]],None]"
user_profile,UserProfile
do_remove_alert_words,"Callable[[UserProfile, Iterable[str]],None]"
user_profile,UserProfile
do_set_alert_words,"Callable[[UserProfile, List[str]],None]"
user_profile,UserProfile
do_mute_topic,"Callable[[UserProfile, Stream, Recipient, str],None]"
user_profile,UserProfile
stream,Stream
recipient,Recipient
topic,str
do_unmute_topic,"Callable[[UserProfile, Stream, str],None]"
user_profile,UserProfile
stream,Stream
topic,str
do_mark_hotspot_as_read,"Callable[[UserProfile, str],None]"
user,UserProfile
hotspot,str
notify_realm_filters,"Callable[[Realm],None]"
realm,Realm
do_add_realm_filter,"Callable[[Realm, str, str],int]"
realm,Realm
pattern,str
url_format_string,str
do_remove_realm_filter,"Callable[[Realm, Union[str, None], Union[int, None]],None]"
realm,Realm
do_add_realm_domain,"Callable[[Realm, str, bool],RealmDomain]"
realm,Realm
domain,str
allow_subdomains,bool
do_change_realm_domain,"Callable[[RealmDomain, bool],None]"
realm_domain,RealmDomain
allow_subdomains,bool
do_remove_realm_domain,"Callable[[RealmDomain],None]"
realm_domain,RealmDomain
get_occupied_streams,"Callable[[Realm],QuerySet]"
realm,Realm
get_web_public_streams,"Callable[[Realm],List[Dict[str, Any]]]"
realm,Realm
do_get_streams,"Callable[[UserProfile, bool, bool, bool, bool],List[Dict[str, Any]]]"
user_profile,UserProfile
include_public,bool
include_subscribed,bool
include_all_active,bool
include_default,bool
notify_attachment_update,"Callable[[UserProfile, str, Dict[str, Any]],None]"
user_profile,UserProfile
op,str
do_claim_attachments,"Callable[[Message],None]"
message,Message
do_delete_old_unclaimed_attachments,"Callable[[int],None]"
weeks_ago,int
check_attachment_reference_change,"Callable[[str, Message],None]"
prev_content,str
message,Message
notify_realm_custom_profile_fields,"Callable[[Realm, str],None]"
realm,Realm
operation,str
try_add_realm_custom_profile_field,"Callable[[Realm, str, int, str, ProfileFieldData],CustomProfileField]"
realm,Realm
name,str
field_type,int
hint,str
field_data,ProfileFieldData
do_remove_realm_custom_profile_field,"Callable[[Realm, CustomProfileField],None]"
realm,Realm
field,CustomProfileField
do_remove_realm_custom_profile_fields,"Callable[[Realm],None]"
realm,Realm
try_update_realm_custom_profile_field,"Callable[[Realm, CustomProfileField, str, str, ProfileFieldData],None]"
realm,Realm
field,CustomProfileField
name,str
hint,str
field_data,ProfileFieldData
try_reorder_realm_custom_profile_fields,"Callable[[Realm, List[int]],None]"
realm,Realm
notify_user_update_custom_profile_data,"Callable[[UserProfile, Dict[str, Union[int, str, List[int], None]]],None]"
user_profile,UserProfile
field,"Dict[str, Union[int, str, List[int], None]]"
do_update_user_custom_profile_data,"Callable[[UserProfile, List[Dict[str, Union[int, str, List[int]]]]],None]"
user_profile,UserProfile
data,"List[Dict[str, Union[int, str, List[int]]]]"
do_send_create_user_group_event,"Callable[[UserGroup, List[UserProfile]],None]"
user_group,UserGroup
check_add_user_group,"Callable[[Realm, str, List[UserProfile], str],None]"
realm,Realm
name,str
description,str
do_send_user_group_update_event,"Callable[[UserGroup, Dict[str, Any]],None]"
user_group,UserGroup
do_update_user_group_name,"Callable[[UserGroup, str],None]"
user_group,UserGroup
name,str
do_update_user_group_description,"Callable[[UserGroup, str],None]"
user_group,UserGroup
description,str
do_update_outgoing_webhook_service,"Callable[[UserProfile, int, str],None]"
bot_profile,UserProfile
service_interface,int
service_payload_url,str
do_update_bot_config_data,"Callable[[UserProfile, Dict[str, str]],None]"
bot_profile,UserProfile
get_service_dicts_for_bot,"Callable[[str],List[Dict[str, Any]]]"
user_profile_id,str
service_dicts,"List[Dict[str, Any]]"
get_service_dicts_for_bots,"Callable[[List[Dict[str, Any]], Realm],Dict[int, List[Dict[str, Any]]]]"
bot_dicts,"List[Dict[str, Any]]"
realm,Realm
bot_services_by_uid,"Dict[int, List[Service]]"
service_dicts_by_uid,"Dict[int, List[Dict[str, Any]]]"
service_dicts,"List[Dict[str, Any]]"
get_owned_bot_dicts,"Callable[[UserProfile, bool],List[Dict[str, Any]]]"
user_profile,UserProfile
include_all_realm_bots_if_admin,bool
do_send_user_group_members_update_event,"Callable[[str, UserGroup, List[int]],None]"
event_name,str
user_group,UserGroup
bulk_add_members_to_user_group,"Callable[[UserGroup, List[UserProfile]],None]"
user_group,UserGroup
remove_members_from_user_group,"Callable[[UserGroup, List[UserProfile]],None]"
user_group,UserGroup
do_send_delete_user_group_event,"Callable[[Realm, int, int],None]"
realm,Realm
user_group_id,int
realm_id,int
check_delete_user_group,"Callable[[int, UserProfile],None]"
user_group_id,int
user_profile,UserProfile
missing_any_realm_internal_bots,"Callable[[],bool]"
do_send_realm_reactivation_email,"Callable[[Realm],None]"
realm,Realm
avatar_url,"Callable[[UserProfile, bool, bool],Union[str, None]]"
user_profile,UserProfile
medium,bool
client_gravatar,bool
avatar_url_from_dict,"Callable[[Dict[str, Any], bool],str]"
medium,bool
get_avatar_field,"Callable[[int, int, str, str, int, bool, bool],Union[str, None]]"
user_id,int
realm_id,int
email,str
avatar_source,str
avatar_version,int
medium,bool
client_gravatar,bool
get_gravatar_url,"Callable[[str, int, bool],str]"
email,str
avatar_version,int
medium,bool
_get_unversioned_gravatar_url,"Callable[[str, bool],str]"
email,str
medium,bool
_get_unversioned_avatar_url,"Callable[[int, str, int, Union[str, None], bool],str]"
user_profile_id,int
avatar_source,str
realm_id,int
medium,bool
absolute_avatar_url,"Callable[[UserProfile],str]"
user_profile,UserProfile
check_supported_events_narrow_filter,"Callable[[Iterable[Sequence[str]]],None]"
narrow,Iterable[Sequence[str]]
is_web_public_compatible,"Callable[[Iterable[Dict[str, str]]],bool]"
narrow,"Iterable[Dict[str, str]]"
build_narrow_filter,"Callable[[Iterable[Sequence[str]]],Callable[[Mapping[str, Any]],bool]]"
narrow,Iterable[Sequence[str]]
narrow_filter,"Callable[[Mapping[str, Any]],bool]"
get_realm_expired_messages,"Callable[[Any],Union[Dict[str, Any], None]]"
realm,Any
move_attachment_message_to_archive_by_message,"Callable[[List[int]],None]"
move_messages_to_archive,"Callable[[List[int]],None]"
tokenized_no_reply_address,"Callable[[],str]"
build_email,"Callable[[str, Union[int, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[Dict[str, Any], None]],EmailMultiAlternatives]"
template_prefix,str
context,"Union[Dict[str, Any], None]"
send_email,"Callable[[str, Union[int, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Dict[str, Any]],None]"
template_prefix,str
send_email_from_dict,"Callable[[Mapping[str, Any]],None]"
send_future_email,"Callable[[str, Realm, Union[int, None], Union[str, None], Union[str, None], Union[str, None], Dict[str, Any], datetime.timedelta],None]"
template_prefix,str
realm,Realm
create_index_if_not_exist,"Callable[[str, str, str, str],str]"
index_name,str
table_name,str
column_string,str
where_clause,str
do_batch_update,"Callable[[CursorObj, str, List[str], List[str], int, float, bool],None]"
cursor,CursorObj
table,str
batch_size,int
sleep,float
escape,bool
realm_icon_url,"Callable[[Realm],str]"
realm,Realm
get_realm_icon_url,"Callable[[Realm],str]"
realm,Realm
inactive_since,"Callable[[UserProfile, datetime.datetime],bool]"
user_profile,UserProfile
should_process_digest,"Callable[[str],bool]"
realm_str,str
queue_digest_recipient,"Callable[[UserProfile, datetime.datetime],None]"
user_profile,UserProfile
enqueue_emails,"Callable[[datetime.datetime],None]"
gather_hot_conversations,"Callable[[UserProfile, QuerySet],List[Dict[str, Any]]]"
user_profile,UserProfile
stream_ums,QuerySet
conversation_length,"Dict[Tuple[int, str], int]"
conversation_messages,"Dict[Tuple[int, str], List[Message]]"
conversation_diversity,"Dict[Tuple[int, str], Set[str]]"
gather_new_users,"Callable[[UserProfile, datetime.datetime],Tuple[int, List[str]]]"
user_profile,UserProfile
gather_new_streams,"Callable[[UserProfile, datetime.datetime],Tuple[int, Dict[str, List[str]]]]"
user_profile,UserProfile
enough_traffic,"Callable[[str, str, int, int],bool]"
unread_pms,str
hot_conversations,str
new_streams,int
new_users,int
handle_digest_email,"Callable[[int, float],None]"
user_profile_id,int
cutoff,float
flock,"Callable[[Union[int, IO[Any]], bool],Iterator[None]]"
lockfile,"Union[int, IO[Any]]"
shared,bool
lockfile,"Callable[[str, bool],Iterator[None]]"
filename,str
shared,bool
ALL_HOTSPOTS,"Dict[str, Dict[str, str]]"
get_next_hotspots,"Callable[[UserProfile],List[Dict[str, object]]]"
user,UserProfile
copy_hotpots,"Callable[[UserProfile, UserProfile],None]"
source_profile,UserProfile
target_profile,UserProfile
__init__,"Callable[[_, str, Union[str, None]],None]"
realm,str
json_unauthorized,"Callable[[str, Union[str, None]],HttpResponse]"
message,str
json_method_not_allowed,"Callable[[List[str]],HttpResponseNotAllowed]"
json_response,"Callable[[str, str, Union[Dict[str, Any], None], int],HttpResponse]"
res_type,str
msg,str
data,"Union[Dict[str, Any], None]"
status,int
json_success,"Callable[[Union[Dict[str, Any], None]],HttpResponse]"
data,"Union[Dict[str, Any], None]"
json_response_from_error,"Callable[[JsonableError],HttpResponse]"
exception,JsonableError
json_error,"Callable[[str, Union[Dict[str, Any], None], int],HttpResponse]"
msg,str
data,"Union[Dict[str, Any], None]"
status,int
rules,"List[Tuple[int, int]]"
key_fragment,"Callable[[_],str]"
rules,"Callable[[_],List[Tuple[int, int]]]"
__init__,"Callable[[_, UserProfile, str],None]"
user,UserProfile
domain,str
key_fragment,"Callable[[_],str]"
rules,"Callable[[_],List[Tuple[int, int]]]"
result,"List[Tuple[int, int]]"
bounce_redis_key_prefix_for_testing,"Callable[[str],None]"
test_name,str
max_api_calls,"Callable[[RateLimitedObject],int]"
entity,RateLimitedObject
max_api_window,"Callable[[RateLimitedObject],int]"
entity,RateLimitedObject
add_ratelimit_rule,"Callable[[int, int],None]"
range_seconds,int
num_requests,int
remove_ratelimit_rule,"Callable[[int, int],None]"
range_seconds,int
num_requests,int
block_access,"Callable[[RateLimitedObject, int],None]"
entity,RateLimitedObject
seconds,int
unblock_access,"Callable[[RateLimitedObject],None]"
entity,RateLimitedObject
clear_history,"Callable[[RateLimitedObject],None]"
entity,RateLimitedObject
_get_api_calls_left,"Callable[[RateLimitedObject, int, int],Tuple[int, float]]"
entity,RateLimitedObject
range_seconds,int
max_calls,int
count,int
api_calls_left,"Callable[[RateLimitedObject],Tuple[int, float]]"
entity,RateLimitedObject
is_ratelimited,"Callable[[RateLimitedObject],Tuple[bool, float]]"
entity,RateLimitedObject
rule_timestamps,"List[Union[bytes, None]]"
incr_ratelimit,"Callable[[RateLimitedObject],None]"
entity,RateLimitedObject
get_active_subscriptions_for_stream_id,"Callable[[int],QuerySet]"
stream_id,int
get_active_subscriptions_for_stream_ids,"Callable[[List[int]],QuerySet]"
get_stream_subscriptions_for_user,"Callable[[UserProfile],QuerySet]"
user_profile,UserProfile
get_stream_subscriptions_for_users,"Callable[[List[UserProfile]],QuerySet]"
get_bulk_stream_subscriber_info,"Callable[[List[UserProfile], Dict[int, Stream]],Dict[int, List[Tuple[Subscription, Stream]]]]"
result,"Dict[int, List[Tuple[Subscription, Stream]]]"
num_subscribers_for_stream_id,"Callable[[int],int]"
stream_id,int
parse_user_agent,"Callable[[str],Dict[str, str]]"
user_agent,str
verify_UTC,"Callable[[datetime.datetime],None]"
timestamp_to_datetime,"Callable[[float],datetime.datetime]"
timestamp,float
datetime_to_timestamp,"Callable[[datetime.datetime],int]"
is_reserved_subdomain,"Callable[[str],bool]"
subdomain,str
is_disposable_domain,"Callable[[str],bool]"
domain,str
terminal_symbols,str
translate_emoticons,"Callable[[str],str]"
text,str
emoji_name_to_emoji_code,"Callable[[Realm, str],Tuple[str, str]]"
realm,Realm
emoji_name,str
check_valid_emoji,"Callable[[Realm, str],None]"
realm,Realm
emoji_name,str
check_emoji_request,"Callable[[Realm, str, str, str],None]"
realm,Realm
emoji_name,str
emoji_code,str
emoji_type,str
check_emoji_admin,"Callable[[UserProfile, Union[str, None]],None]"
user_profile,UserProfile
check_valid_emoji_name,"Callable[[str],None]"
emoji_name,str
get_emoji_url,"Callable[[str, int],str]"
emoji_file_name,str
realm_id,int
get_emoji_file_name,"Callable[[str, int],str]"
emoji_file_name,str
emoji_id,int
bulk_create_users,"Callable[[Realm, Set[Tuple[str, str, str, bool]], Union[int, None], Union[UserProfile, None], Union[str, None], str],None]"
realm,Realm
users_raw,"Set[Tuple[str, str, str, bool]]"
timezone,str
bulk_create_streams,"Callable[[Realm, Dict[str, Dict[str, Any]]],None]"
realm,Realm
stream_dict,"Dict[str, Dict[str, Any]]"
initial_password,"Callable[[str],Union[str, None]]"
email,str
get_subdomain,"Callable[[HttpRequest],str]"
request,HttpRequest
is_subdomain_root_or_alias,"Callable[[HttpRequest],bool]"
request,HttpRequest
user_matches_subdomain,"Callable[[Union[str, None], UserProfile],bool]"
user_profile,UserProfile
is_root_domain_available,"Callable[[],bool]"
redact_stream,"Callable[[str],str]"
error_message,str
report_to_zulip,"Callable[[str],None]"
error_message,str
log_and_report,"Callable[[message.Message, str, Dict[str, Any]],None]"
error_message,str
missed_message_redis_key,"Callable[[str],str]"
token,str
is_missed_message_address,"Callable[[str],bool]"
address,str
is_mm_32_format,"Callable[[Union[str, None]],bool]"
get_missed_message_token_from_address,"Callable[[str],str]"
address,str
create_missed_message_address,"Callable[[UserProfile, Message],str]"
user_profile,UserProfile
message,Message
mark_missed_message_address_as_used,"Callable[[str],None]"
address,str
construct_zulip_body,"Callable[[message.Message, Realm],str]"
realm,Realm
send_to_missed_message_address,"Callable[[str, message.Message],None]"
address,str
user_profile_id,bytes
recipient_id,bytes
subject_b,bytes
send_zulip,"Callable[[str, Stream, str, str],None]"
sender,str
stream,Stream
topic,str
content,str
valid_stream,"Callable[[str, str],bool]"
stream_name,str
token,str
get_message_part_by_type,"Callable[[message.Message, str],Union[str, None]]"
content_type,str
extract_body,"Callable[[message.Message],str]"
filter_footer,"Callable[[str],str]"
text,str
extract_and_upload_attachments,"Callable[[message.Message, Realm],str]"
realm,Realm
extract_and_validate,"Callable[[str],Stream]"
email,str
find_emailgateway_recipient,"Callable[[message.Message],str]"
recipients,"List[Union[str, Header]]"
process_stream_message,"Callable[[str, str, message.Message, Dict[str, Any]],None]"
to,str
subject,str
process_missed_message,"Callable[[str, message.Message, bool],None]"
to,str
pre_checked,bool
process_message,"Callable[[message.Message, Union[str, None], bool],None]"
pre_checked,bool
xor_hex_strings,"Callable[[str, str],str]"
bytes_a,str
bytes_b,str
ascii_to_hex,"Callable[[str],str]"
input_string,str
hex_to_ascii,"Callable[[str],str]"
input_string,str
otp_encrypt_api_key,"Callable[[str, str],str]"
api_key,str
otp,str
otp_decrypt_api_key,"Callable[[str, str],str]"
otp_encrypted_api_key,str
otp,str
is_valid_otp,"Callable[[str],bool]"
otp,str
DATE_FIELDS,"Dict[TableName, List[Field]]"
sanity_check_output,"Callable[[TableData],None]"
data,TableData
write_data_to_file,"Callable[[Path, Any],None]"
output_file,Path
data,Any
make_raw,"Callable[[Any, Union[List[Field], None]],List[Record]]"
query,Any
exclude,"Union[List[Field], None]"
floatify_datetime_fields,"Callable[[TableData, TableName],None]"
data,TableData
table,TableName
__init__,"Callable[[_, Union[str, None], Union[Any, None], Union[Config, None], Union[Config, None], Union[FilterArgs, None], Union[CustomFetch, None], Union[List[TableName], None], Union[PostProcessData, None], Union[List[TableName], None], Union[IdSource, None], Union[SourceFilter, None], Union[Field, None], bool, bool, Union[List[Field], None]],None]"
custom_tables,"Union[List[TableName], None]"
concat_and_destroy,"Union[List[TableName], None]"
use_all,bool
is_seeded,bool
exclude,"Union[List[Field], None]"
export_from_config,"Callable[[TableData, Config, Union[Any, None], Union[Context, None]],None]"
response,TableData
config,Config
get_realm_config,"Callable[[],Config]"
sanity_check_stream_data,"Callable[[TableData, Config, Context],None]"
response,TableData
config,Config
context,Context
fetch_user_profile,"Callable[[TableData, Config, Context],None]"
response,TableData
config,Config
context,Context
fetch_user_profile_cross_realm,"Callable[[TableData, Config, Context],None]"
response,TableData
config,Config
context,Context
fetch_attachment_data,"Callable[[TableData, int, Set[int]],None]"
response,TableData
realm_id,int
fetch_reaction_data,"Callable[[TableData, Set[int]],None]"
response,TableData
fetch_huddle_objects,"Callable[[TableData, Config, Context],None]"
response,TableData
config,Config
context,Context
fetch_usermessages,"Callable[[Realm, Set[int], Set[int], Path],List[Record]]"
realm,Realm
message_filename,Path
export_usermessages_batch,"Callable[[Path, Path],None]"
input_path,Path
output_path,Path
write_message_export,"Callable[[Path, MessageOutput],None]"
message_filename,Path
output,MessageOutput
export_partial_message_files,"Callable[[Realm, TableData, int, Union[Path, None]],Set[int]]"
realm,Realm
response,TableData
chunk_size,int
write_message_partial_for_query,"Callable[[Realm, Any, int, Set[int], Path, Set[int], int],int]"
realm,Realm
message_query,Any
dump_file_id,int
output_dir,Path
chunk_size,int
table_data,TableData
output,MessageOutput
export_uploads_and_avatars,"Callable[[Realm, Path],None]"
realm,Realm
output_dir,Path
export_files_from_s3,"Callable[[Realm, str, Path, bool, bool],None]"
realm,Realm
bucket_name,str
output_dir,Path
processing_avatars,bool
processing_emoji,bool
export_uploads_from_local,"Callable[[Realm, Path, Path],None]"
realm,Realm
local_dir,Path
output_dir,Path
export_avatars_from_local,"Callable[[Realm, Path, Path],None]"
realm,Realm
local_dir,Path
output_dir,Path
export_emoji_from_local,"Callable[[Realm, Path, Path],None]"
realm,Realm
local_dir,Path
output_dir,Path
do_write_stats_file_for_realm_export,"Callable[[Path],None]"
output_dir,Path
do_export_realm,"Callable[[Realm, Path, int, Union[Set[int], None]],None]"
realm,Realm
output_dir,Path
threads,int
exportable_user_ids,"Union[Set[int], None]"
response,TableData
zerver_reaction,TableData
export_attachment_table,"Callable[[Realm, Path, Set[int]],None]"
realm,Realm
output_dir,Path
response,TableData
create_soft_link,"Callable[[Path, bool],None]"
source,Path
in_progress,bool
launch_user_message_subprocesses,"Callable[[int, Path],None]"
threads,int
output_dir,Path
run_job,"Callable[[str],int]"
shard,str
do_export_user,"Callable[[UserProfile, Path],None]"
user_profile,UserProfile
output_dir,Path
response,TableData
export_single_user,"Callable[[UserProfile, TableData],None]"
user_profile,UserProfile
response,TableData
get_single_user_config,"Callable[[],Config]"
export_messages_single_user,"Callable[[UserProfile, Path, int],None]"
user_profile,UserProfile
output_dir,Path
chunk_size,int
message_output,MessageOutput
generate_camo_url,"Callable[[str],str]"
url,str
get_camo_url,"Callable[[str],str]"
url,str
access_stream_for_delete_or_update,"Callable[[UserProfile, int],Stream]"
user_profile,UserProfile
stream_id,int
access_stream_common,"Callable[[UserProfile, Stream, str, bool, bool],Tuple[Recipient, Union[Subscription, None]]]"
user_profile,UserProfile
stream,Stream
error,str
require_active,bool
allow_realm_admin,bool
access_stream_by_id,"Callable[[UserProfile, int, bool, bool],Tuple[Stream, Recipient, Union[Subscription, None]]]"
user_profile,UserProfile
stream_id,int
require_active,bool
allow_realm_admin,bool
get_stream_by_id,"Callable[[int],Stream]"
stream_id,int
check_stream_name_available,"Callable[[Realm, str],None]"
realm,Realm
name,str
access_stream_by_name,"Callable[[UserProfile, str, bool],Tuple[Stream, Recipient, Union[Subscription, None]]]"
user_profile,UserProfile
stream_name,str
allow_realm_admin,bool
access_stream_for_unmute_topic,"Callable[[UserProfile, str, str],Stream]"
user_profile,UserProfile
stream_name,str
error,str
can_access_stream_history_by_name,"Callable[[UserProfile, str],bool]"
user_profile,UserProfile
stream_name,str
filter_stream_authorization,"Callable[[UserProfile, Iterable[Stream]],Tuple[List[Stream], List[Stream]]]"
user_profile,UserProfile
list_to_streams,"Callable[[Iterable[Mapping[str, Any]], UserProfile, bool],Tuple[List[Stream], List[Stream]]]"
streams_raw,"Iterable[Mapping[str, Any]]"
user_profile,UserProfile
autocreate,bool
missing_stream_dicts,"List[Mapping[str, Any]]"
access_default_stream_group_by_id,"Callable[[Realm, int],DefaultStreamGroup]"
realm,Realm
group_id,int
post_process,"Callable[[_, Dict[str, Tuple[ZulipStorage, str]], bool],List[Tuple[str, str, bool]]]"
paths,"Dict[str, Tuple[ZulipStorage, str]]"
dry_run,bool
kwargs,Any
post_process,"Callable[[_, Dict[str, Tuple[ZulipStorage, str]], bool],List[Tuple[str, str, bool]]]"
paths,"Dict[str, Tuple[ZulipStorage, str]]"
dry_run,bool
kwargs,Any
hashed_name,"Callable[[_, str, Union[str, None], Union[str, None]],str]"
name,str
path,"Callable[[ManifestStaticFilesStorage, str],str]"
self,ManifestStaticFilesStorage
name,str
get_mapping_type_str,"Callable[[Mapping[Any, Any]],str]"
get_sequence_type_str,"Callable[[Sequence[Any]],str]"
get_type_str,"Callable[[Any],str]"
x,Any
print_types_to,"Callable[[IO[str]],Callable[[FuncT],FuncT]]"
decorator,"Callable[[FuncT],FuncT]"
func,FuncT
wrapper,"Callable[[],Any]"
args,Any
kwargs,Any
print_types,"Callable[[FuncT],FuncT]"
func,FuncT
is_link,"Callable[[str],Match[str]]"
url,str
get_link_embed_data,"Callable[[str, Union[int, None], Union[int, None]],Union[Dict[str, Any], None]]"
url,str
link_embed_data_from_cache,"Callable[[str, Union[int, None], Union[int, None]],Any]"
url,str
get_oembed_data,"Callable[[str, Union[int, None], Union[int, None]],Union[Dict[str, Any], None]]"
url,str
extract_data,"Callable[[_],Dict[str, Union[str, None]]]"
__init__,"Callable[[_, str],None]"
html_source,str
extract_data,"Callable[[_],Any]"
verbose_compile,"Callable[[str],Any]"
pattern,str
LINK_REGEX,Pattern
get_web_link_regex,"Callable[[],str]"
clear_state_for_testing,"Callable[[],None]"
rewrite_local_links_to_relative,"Callable[[Union[DbData, None], str],str]"
link,str
url_embed_preview_enabled_for_realm,"Callable[[Union[Message, None], Union[Realm, None]],bool]"
image_preview_enabled_for_realm,"Callable[[Union[Message, None], Union[Realm, None]],bool]"
walk_tree,"Callable[[Element, Callable[[Element],Union[_T, None]], bool],List[_T]]"
root,Element
processor,"Callable[[Element],Union[_T, None]]"
stop_after_first,bool
walk_tree_with_family,"Callable[[Element, Callable[[Element],Union[_T, None]]],List[ResultWithFamily]]"
root,Element
processor,"Callable[[Element],Union[_T, None]]"
add_a,"Callable[[Element, str, str, Union[str, None], Union[str, None], str, Union[str, None], Union[int, None], Union[bool, None]],None]"
root,Element
url,str
link,str
class_attr,str
add_embed,"Callable[[Element, str, Dict[str, Any]],None]"
root,Element
link,str
fetch_tweet_data,"Callable[[str],Union[Dict[str, Any], None]]"
tweet_id,str
fetch_open_graph_image,"Callable[[str],Union[Dict[str, Any], None]]"
url,str
get_tweet_id,"Callable[[str],Union[str, None]]"
url,str
run,"Callable[[_, Element],None]"
root,Element
__init__,"Callable[[_, str],None]"
pattern,str
__init__,"Callable[[_, markdown.Markdown, Bugdown],None]"
bugdown,Bugdown
get_actual_image_url,"Callable[[_, str],str]"
url,str
image_preview_enabled,"Callable[[_],bool]"
is_image,"Callable[[_, str],bool]"
url,str
dropbox_image,"Callable[[_, str],Union[Dict[str, Any], None]]"
url,str
youtube_id,"Callable[[_, str],Union[str, None]]"
url,str
youtube_image,"Callable[[_, str],Union[str, None]]"
url,str
vimeo_id,"Callable[[_, str],Union[str, None]]"
url,str
twitter_text,"Callable[[_, str, List[Dict[str, str]], List[Dict[str, Any]], List[Dict[str, Any]]],Element]"
text,str
urls,"List[Dict[str, str]]"
user_mentions,"List[Dict[str, Any]]"
media,"List[Dict[str, Any]]"
to_process,"List[Dict[str, Any]]"
set_text,"Callable[[str],None]"
text,str
twitter_link,"Callable[[_, str],Union[Element, None]]"
url,str
media,"List[Dict[str, Any]]"
get_url_data,"Callable[[_, Element],Union[Tuple[str, str], None]]"
e,Element
handle_image_inlining,"Callable[[_, Element, ResultWithFamily],None]"
root,Element
found_url,ResultWithFamily
find_proper_insertion_index,"Callable[[_, Element, Element, int],int]"
grandparent,Element
parent,Element
parent_index_in_grandparent,int
is_absolute_url,"Callable[[_, str],bool]"
url,str
run,"Callable[[_, Element],None]"
root,Element
possible_avatar_emails,"Callable[[str],Set[str]]"
content,str
make_emoji,"Callable[[str, str],Element]"
codepoint,str
display_string,str
make_realm_emoji,"Callable[[str, str],Element]"
src,str
display_string,str
unicode_emoji_to_codepoint,"Callable[[str],str]"
unicode_emoji,str
active_realm_emoji,"Dict[str, Dict[str, str]]"
content_has_emoji_syntax,"Callable[[str],bool]"
content,str
handleMatch,"Callable[[_, Match[str]],Element]"
handleMatch,"Callable[[_, Match[str]],Element]"
url_filename,"Callable[[str],str]"
url,str
fixup_link,"Callable[[markdown.util.etree.Element, bool],None]"
link,markdown.util.etree.Element
target_blank,bool
sanitize_url,"Callable[[str],Union[str, None]]"
url,str
url_to_a,"Callable[[Union[DbData, None], str, Union[str, None]],Union[Element, str]]"
url,str
__init__,"Callable[[_, Pattern, markdown.Markdown],None]"
compiled_re,Pattern
handleMatch,"Callable[[_, Match[str]],ElementStringNone]"
__init__,"Callable[[_, Any],None]"
parser,Any
__init__,"Callable[[_, Any],None]"
parser,Any
current_list,List[Match[str]]
renumber,"Callable[[_, List[Match[str]]],List[str]]"
mlist,List[Match[str]]
prepare_realm_pattern,"Callable[[str],str]"
source,str
__init__,"Callable[[_, str, str, Union[markdown.Markdown, None]],None]"
source_pattern,str
format_string,str
markdown_instance,"Union[markdown.Markdown, None]"
find_stream_by_name,"Callable[[_, Match[str]],Union[Dict[str, Any], None]]"
possible_linked_stream_names,"Callable[[str],Set[str]]"
content,str
__init__,"Callable[[_],None]"
args,Any
kwargs,"Union[bool, int, List[Any]]"
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
extend_alert_words,"Callable[[_, markdown.Markdown],None]"
extend_text_formatting,"Callable[[_, markdown.Markdown],None]"
extend_block_formatting,"Callable[[_, markdown.Markdown],None]"
extend_avatars,"Callable[[_, markdown.Markdown],None]"
extend_modal_links,"Callable[[_, markdown.Markdown],None]"
extend_mentions,"Callable[[_, markdown.Markdown],None]"
extend_stream_links,"Callable[[_, markdown.Markdown],None]"
extend_emojis,"Callable[[_, markdown.Markdown],None]"
extend_misc,"Callable[[_, markdown.Markdown],None]"
md_engines,"Dict[Tuple[int, bool], markdown.Markdown]"
realm_filter_data,"Dict[int, List[Tuple[str, str, int]]]"
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
make_md_engine,"Callable[[int, bool],None]"
realm_filters_key,int
email_gateway,bool
build_engine,"Callable[[List[Tuple[str, str, int]], int, bool],markdown.Markdown]"
realm_filters,"List[Tuple[str, str, int]]"
realm_filters_key,int
email_gateway,bool
topic_links,"Callable[[int, str],List[str]]"
realm_filters_key,int
topic_name,str
maybe_update_markdown_engines,"Callable[[Union[int, None], bool],None]"
email_gateway,bool
privacy_clean_markdown,"Callable[[str],str]"
content,str
log_bugdown_error,"Callable[[str],None]"
msg,str
get_email_info,"Callable[[int, Set[str]],Dict[str, FullNameInfo]]"
realm_id,int
get_possible_mentions_info,"Callable[[int, Set[str]],List[FullNameInfo]]"
realm_id,int
__init__,"Callable[[_, int, str],None]"
realm_id,int
content,str
init_user_group_data,"Callable[[_, int, str],None]"
realm_id,int
content,str
self.user_group_members,"Dict[int, List[int]]"
get_user_by_name,"Callable[[_, str],Union[FullNameInfo, None]]"
name,str
get_user_by_id,"Callable[[_, str],Union[FullNameInfo, None]]"
id,str
get_user_group,"Callable[[_, str],Union[UserGroup, None]]"
name,str
get_group_members,"Callable[[_, int],List[int]]"
user_group_id,int
get_user_group_name_info,"Callable[[int, Set[str]],Dict[str, UserGroup]]"
realm_id,int
get_stream_name_info,"Callable[[Realm, Set[str]],Dict[str, FullNameInfo]]"
realm,Realm
do_convert,"Callable[[str, Union[Message, None], Union[Realm, None], Union[Set[str], None], Union[bool, None], Union[bool, None], Union[MentionData, None], Union[bool, None]],str]"
content,str
possible_words,"Union[Set[str], None]"
get_bugdown_time,"Callable[[],float]"
get_bugdown_requests,"Callable[[],int]"
bugdown_stats_start,"Callable[[],None]"
bugdown_stats_finish,"Callable[[],None]"
convert,"Callable[[str, Union[Message, None], Union[Realm, None], Union[Set[str], None], Union[bool, None], Union[bool, None], Union[MentionData, None], Union[bool, None]],str]"
content,str
possible_words,"Union[Set[str], None]"
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
__init__,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
run,"Callable[[_, Element],None]"
root,Element
get_code_tags,"Callable[[_, Element],Union[Tuple[str, Union[str, None]], None]]"
e,Element
parent,Any
grandparent,Any
get_codehilite_block,"Callable[[_, str],Element]"
code_block_text,str
replace_element,"Callable[[_, Union[Element, None], markdown.util.etree.Element, Element],None]"
replacement,markdown.util.etree.Element
element_to_replace,Element
makeExtension,"Callable[[],NestedCodeBlocksRenderer]"
args,Any
kwargs,str
render_python_code_example,"Callable[[str, Union[bool, None]],List[str]]"
function,str
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
__init__,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
render_fixture,"Callable[[_, str, Union[str, None]],List[str]]"
function,str
makeExtension,"Callable[[],APICodeExamplesGenerator]"
args,Any
kwargs,str
__init__,"Callable[[_, Union[Dict[str, Any], None]],None]"
configs,"Union[Dict[str, Any], None]"
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
__init__,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
arguments,"List[Dict[str, Any]]"
render_table,"Callable[[_, List[Dict[str, Any]]],List[str]]"
arguments,"List[Dict[str, Any]]"
makeExtension,"Callable[[],MarkdownArgumentsTableGenerator]"
args,Any
kwargs,str
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
handle_line,"Callable[[_, str],None]"
line,str
done,"Callable[[_],None]"
generic_handler,"Callable[[Any, MutableSequence[str], str, str],BaseHandler]"
processor,Any
fence,str
lang,str
check_for_new_fence,"Callable[[Any, MutableSequence[str], str],None]"
processor,Any
line,str
__init__,"Callable[[_, Any, MutableSequence[str]],None]"
processor,Any
handle_line,"Callable[[_, str],None]"
line,str
done,"Callable[[_],None]"
__init__,"Callable[[_, Any, MutableSequence[str], str, str],None]"
processor,Any
fence,str
lang,str
handle_line,"Callable[[_, str],None]"
line,str
done,"Callable[[_],None]"
__init__,"Callable[[_, Any, MutableSequence[str], str],None]"
processor,Any
fence,str
handle_line,"Callable[[_, str],None]"
line,str
done,"Callable[[_],None]"
__init__,"Callable[[_, Any, MutableSequence[str], str],None]"
processor,Any
fence,str
handle_line,"Callable[[_, str],None]"
line,str
done,"Callable[[_],None]"
__init__,"Callable[[_, markdown.Markdown],None]"
self.codehilite_conf,"Dict[str, List[Any]]"
push,"Callable[[_, BaseHandler],None]"
handler,BaseHandler
pop,"Callable[[_],None]"
format_code,"Callable[[_, str, str],str]"
lang,str
text,str
format_quote,"Callable[[_, str],str]"
text,str
format_tex,"Callable[[_, str],str]"
text,str
placeholder,"Callable[[_, str],str]"
code,str
_escape,"Callable[[_, str],str]"
txt,str
makeExtension,"Callable[[],FencedCodeExtension]"
args,Any
kwargs,None
twitter,"Callable[[str],Union[Dict[str, Any], None]]"
tweet_id,str
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
makeExtension,"Callable[[],EmoticonTranslationsHelpExtension]"
args,Any
kwargs,Any
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
set_relative_settings_links,"Callable[[bool],None]"
value,bool
handleMatch,"Callable[[_, Match[str]],str]"
makeExtension,"Callable[[],SettingHelpExtension]"
args,Any
kwargs,Any
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
__init__,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
generate_content_blocks,"Callable[[_, Dict[str, Any], List[str]],str]"
generate_nav_bar,"Callable[[_, Dict[str, Any]],str]"
parse_tabs,"Callable[[_, List[str]],Union[Dict[str, Any], None]]"
makeExtension,"Callable[[],TabbedSectionsGenerator]"
args,Any
kwargs,str
gear_handle_match,"Callable[[str],str]"
key,str
stream_handle_match,"Callable[[str],str]"
key,str
extendMarkdown,"Callable[[_, markdown.Markdown, Dict[str, Any]],None]"
set_relative_help_links,"Callable[[bool],None]"
value,bool
handleMatch,"Callable[[_, Match[str]],str]"
makeExtension,"Callable[[],RelativeLinksHelpExtension]"
args,Any
kwargs,Any
get_push_commits_event_message,"Callable[[str, Union[str, None], str, List[Dict[str, Any]], Union[bool, None], Union[bool, None]],str]"
user_name,str
branch_name,str
commits_data,"List[Dict[str, Any]]"
committers_items,"List[Tuple[str, int]]"
get_force_push_commits_event_message,"Callable[[str, str, str, str],str]"
user_name,str
url,str
branch_name,str
head,str
get_create_branch_event_message,"Callable[[str, str, str],str]"
user_name,str
url,str
branch_name,str
get_remove_branch_event_message,"Callable[[str, str],str]"
user_name,str
branch_name,str
get_pull_request_event_message,"Callable[[str, str, str, Union[int, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None]],str]"
user_name,str
action,str
url,str
get_setup_webhook_message,"Callable[[str, Union[str, None]],str]"
integration,str
get_issue_event_message,"Callable[[str, str, str, Union[int, None], Union[str, None], Union[str, None], Union[str, None]],str]"
user_name,str
action,str
url,str
get_push_tag_event_message,"Callable[[str, str, Union[str, None], Union[str, None]],str]"
user_name,str
tag_name,str
get_commits_comment_action_message,"Callable[[str, str, str, str, Union[str, None]],str]"
user_name,str
action,str
commit_url,str
sha,str
get_commits_content,"Callable[[List[Dict[str, Any]], Union[bool, None]],str]"
commits_data,"List[Dict[str, Any]]"
get_short_sha,"Callable[[str],str]"
sha,str
get_all_committers,"Callable[[List[Dict[str, Any]]],List[Tuple[str, int]]]"
commits_data,"List[Dict[str, Any]]"
committers_items,"List[Tuple[str, int]]"
notify_bot_owner_about_invalid_json,"Callable[[UserProfile, str],None]"
user_profile,UserProfile
webhook_client_name,str
__init__,"Callable[[_, str, Union[str, None]],None]"
webhook_name,str
msg_format,"Callable[[],str]"
__init__,"Callable[[_, str],None]"
header,str
msg_format,"Callable[[],str]"
check_send_webhook_message,"Callable[[HttpRequest, UserProfile, str, str, Union[str, None], Union[str, None], Union[bool, None]],None]"
request,HttpRequest
user_profile,UserProfile
topic,str
body,str
validate_extract_webhook_http_header,"Callable[[HttpRequest, str, str],str]"
request,HttpRequest
header,str
integration_name,str
invite_users_backend,"Callable[[HttpRequest, UserProfile, str, Union[bool, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
invitee_emails_raw,str
get_invitee_emails_set,"Callable[[str],Set[str]]"
invitee_emails_raw,str
get_user_invites,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
revoke_user_invite,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
prereg_id,int
resend_user_invite_email,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
prereg_id,int
generate_multiuse_invite_backend,"Callable[[HttpRequest, UserProfile, List[int]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
validate_token,"Callable[[bytes, int],None]"
token_str,bytes
kind,int
add_apns_device_token,"Callable[[HttpRequest, UserProfile, bytes, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
token,bytes
appid,str
add_android_reg_id,"Callable[[HttpRequest, UserProfile, bytes],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
token,bytes
remove_apns_device_token,"Callable[[HttpRequest, UserProfile, bytes],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
token,bytes
remove_android_reg_id,"Callable[[HttpRequest, UserProfile, bytes],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
token,bytes
serve_s3,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
url_path,str
serve_local,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
path_id,str
serve_file_backend,"Callable[[HttpRequest, UserProfile, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
realm_id_str,str
filename,str
upload_file_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_status_list,"Callable[[UserProfile],Dict[str, Any]]"
requesting_user_profile,UserProfile
get_presence_backend,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
email,str
update_active_status_backend,"Callable[[HttpRequest, UserProfile, str, bool, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
status,str
ping_only,bool
new_user_input,bool
get_statuses_for_realm,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
create_historical_message,"Callable[[UserProfile, Message],None]"
user_profile,UserProfile
message,Message
add_reaction,"Callable[[HttpRequest, UserProfile, int, str, Union[str, None], str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_id,int
emoji_name,str
reaction_type,str
remove_reaction,"Callable[[HttpRequest, UserProfile, int, Union[str, None], Union[str, None], str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_id,int
reaction_type,str
add_reaction_legacy,"Callable[[HttpRequest, UserProfile, int, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_id,int
emoji_name,str
remove_reaction_legacy,"Callable[[HttpRequest, UserProfile, int, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_id,int
emoji_name,str
add_api_uri_context,"Callable[[Dict[str, Any], HttpRequest],None]"
request,HttpRequest
kwargs,Any
get_path,"Callable[[_, str],str]"
article,str
kwargs,Any
get,"Callable[[_, HttpRequest, str],HttpResponse]"
request,HttpRequest
article,str
add_integrations_context,"Callable[[Dict[str, Any]],None]"
kwargs,Any
integration_doc,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
integration_name,str
archive,"Callable[[HttpRequest, int, str],HttpResponse]"
request,HttpRequest
stream_id,int
topic_name,str
get_response,"Callable[[List[str], bool, str],HttpResponse]"
is_web_public,bool
stream_name,str
get_web_public_topics_backend,"Callable[[HttpRequest, int],HttpResponse]"
request,HttpRequest
stream_id,int
process_unsubscribe,"Callable[[HttpRequest, str, str, Callable[[UserProfile],None]],HttpResponse]"
request,HttpRequest
confirmation_key,str
subscription_type,str
unsubscribe_function,"Callable[[UserProfile],None]"
do_missedmessage_unsubscribe,"Callable[[UserProfile],None]"
user_profile,UserProfile
do_welcome_unsubscribe,"Callable[[UserProfile],None]"
user_profile,UserProfile
do_digest_unsubscribe,"Callable[[UserProfile],None]"
user_profile,UserProfile
do_login_unsubscribe,"Callable[[UserProfile],None]"
user_profile,UserProfile
email_unsubscribe,"Callable[[HttpRequest, str, str],HttpResponse]"
request,HttpRequest
email_type,str
confirmation_key,str
_default_all_public_streams,"Callable[[UserProfile, Union[bool, None]],bool]"
user_profile,UserProfile
_default_narrow,"Callable[[UserProfile, Iterable[Sequence[str]]],Iterable[Sequence[str]]]"
user_profile,UserProfile
narrow,Iterable[Sequence[str]]
events_register_backend,"Callable[[HttpRequest, UserProfile, bool, bool, Union[bool, None], bool, Union[Iterable[str], None], Union[Iterable[str], None], NarrowT, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
apply_markdown,bool
client_gravatar,bool
include_subscribers,bool
event_types,"Union[Iterable[str], None]"
fetch_event_types,"Union[Iterable[str], None]"
narrow,NarrowT
queue_lifespan_secs,int
check_compatibility,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
send_notification_backend,"Callable[[HttpRequest, UserProfile, str, List[str]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
operator,str
confirm_email_change,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
confirmation_key,str
json_change_settings,"Callable[[HttpRequest, UserProfile, str, str, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
full_name,str
email,str
old_password,str
new_password,str
update_display_settings_backend,"Callable[[HttpRequest, UserProfile, Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
json_change_notify_settings,"Callable[[HttpRequest, UserProfile, Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
set_avatar_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
delete_avatar_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
regenerate_api_key,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
change_enter_sends,"Callable[[HttpRequest, UserProfile, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
enter_sends,bool
deactivate_user_backend,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
user_id,int
deactivate_user_own_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
check_last_admin,"Callable[[UserProfile],bool]"
user_profile,UserProfile
deactivate_bot_backend,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
bot_id,int
_deactivate_user_profile_backend,"Callable[[HttpRequest, UserProfile, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
target,UserProfile
reactivate_user_backend,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
user_id,int
update_user_backend,"Callable[[HttpRequest, UserProfile, int, Union[str, None], Union[bool, None], Union[bool, None], List[Dict[str, Union[int, str, List[int]]]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
user_id,int
profile_data,"List[Dict[str, Union[int, str, List[int]]]]"
avatar,"Callable[[HttpRequest, UserProfile, str, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
email_or_id,str
medium,bool
patch_bot_backend,"Callable[[HttpRequest, UserProfile, int, Union[str, None], Union[int, None], Union[Dict[str, str], None], Union[str, None], Union[int, None], Union[str, None], Union[str, None], Union[bool, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
bot_id,int
config_data,"Union[Dict[str, str], None]"
regenerate_bot_api_key,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
bot_id,int
add_bot_backend,"Callable[[HttpRequest, UserProfile, str, str, int, Union[str, None], Union[str, None], Dict[str, str], int, Union[str, None], Union[str, None], Union[bool, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
full_name_raw,str
short_name_raw,str
bot_type,int
interface_type,int
get_bots_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
bot_info,"Callable[[UserProfile],Dict[str, Any]]"
bot_profile,UserProfile
get_members_backend,"Callable[[HttpRequest, UserProfile, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
client_gravatar,bool
create_user_backend,"Callable[[HttpRequest, UserProfile, str, str, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
email,str
password,str
full_name_raw,str
short_name,str
generate_client_id,"Callable[[],str]"
get_profile_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
team_view,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
webathena_kerberos_login,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
cred,str
__init__,"Callable[[_, str],None]"
desc,str
self.desc,str
msg_format,"Callable[[],str]"
__init__,"Callable[[_, UserProfile, str],None]"
user_profile,UserProfile
msg_id_column,str
add_term,"Callable[[_, Query, Dict[str, Any]],Query]"
query,Query
by_has,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_in,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_is,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
_pg_re_escape,"Callable[[_, str],str]"
pattern,str
by_stream,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_topic,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_sender,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_near,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_id,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_pm_with,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_group_pm_with,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
by_search,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
_by_search_pgroonga,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
_by_search_tsearch,"Callable[[_, Query, str, ConditionTransform],Query]"
query,Query
operand,str
maybe_negate,ConditionTransform
highlight_string,"Callable[[str, Iterable[Tuple[int, int]]],str]"
text,str
locs,"Iterable[Tuple[int, int]]"
get_search_fields,"Callable[[str, str, Iterable[Tuple[int, int]], Iterable[Tuple[int, int]]],Dict[str, str]]"
rendered_content,str
topic_name,str
content_matches,"Iterable[Tuple[int, int]]"
topic_matches,"Iterable[Tuple[int, int]]"
narrow_parameter,"Callable[[str],Union[List[Dict[str, Any]], None]]"
json,str
convert_term,"Callable[[Union[Dict[str, Any], List[str]]],Dict[str, Any]]"
elem,"Union[Dict[str, Any], List[str]]"
ok_to_include_history,"Callable[[Union[Iterable[Dict[str, Any]], None], UserProfile],bool]"
narrow,"Union[Iterable[Dict[str, Any]], None]"
user_profile,UserProfile
get_stream_name_from_narrow,"Callable[[Union[Iterable[Dict[str, Any]], None]],Union[str, None]]"
narrow,"Union[Iterable[Dict[str, Any]], None]"
exclude_muting_conditions,"Callable[[UserProfile, Union[Iterable[Dict[str, Any]], None]],List[Selectable]]"
user_profile,UserProfile
narrow,"Union[Iterable[Dict[str, Any]], None]"
get_base_query_for_search,"Callable[[UserProfile, bool, bool],Tuple[Query, ColumnElement]]"
user_profile,UserProfile
need_message,bool
need_user_message,bool
add_narrow_conditions,"Callable[[UserProfile, ColumnElement, Query, List[Dict[str, Any]]],Tuple[Query, bool]]"
user_profile,UserProfile
inner_msg_id_col,ColumnElement
query,Query
narrow,"List[Dict[str, Any]]"
find_first_unread_anchor,"Callable[[Any, UserProfile, List[Dict[str, Any]]],int]"
sa_conn,Any
user_profile,UserProfile
narrow,"List[Dict[str, Any]]"
zcommand_backend,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
command,str
get_messages_backend,"Callable[[HttpRequest, UserProfile, int, int, int, Union[List[Dict[str, Any]], None], bool, bool, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
anchor,int
num_before,int
num_after,int
narrow,"Union[List[Dict[str, Any]], None]"
use_first_unread_anchor,bool
client_gravatar,bool
apply_markdown,bool
user_message_flags,"Dict[int, List[str]]"
search_fields,"Dict[int, Dict[str, str]]"
limit_query_to_range,"Callable[[Query, int, int, int, bool, bool, ColumnElement, int],Query]"
query,Query
num_before,int
num_after,int
anchor,int
anchored_to_left,bool
anchored_to_right,bool
id_col,ColumnElement
first_visible_message_id,int
post_process_limited_query,"Callable[[List[Any], int, int, int, bool, bool, int],Dict[str, Any]]"
num_before,int
num_after,int
anchor,int
anchored_to_left,bool
anchored_to_right,bool
first_visible_message_id,int
update_message_flags,"Callable[[HttpRequest, UserProfile, List[int], str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
operation,str
flag,str
mark_all_as_read,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
mark_stream_as_read,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_id,int
mark_topic_as_read,"Callable[[HttpRequest, UserProfile, int, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_id,int
topic_name,str
create_mirrored_message_users,"Callable[[HttpRequest, UserProfile, Iterable[str]],Tuple[bool, Union[UserProfile, None]]]"
request,HttpRequest
user_profile,UserProfile
same_realm_zephyr_user,"Callable[[UserProfile, str],bool]"
user_profile,UserProfile
email,str
same_realm_irc_user,"Callable[[UserProfile, str],bool]"
user_profile,UserProfile
email,str
same_realm_jabber_user,"Callable[[UserProfile, str],bool]"
user_profile,UserProfile
email,str
handle_deferred_message,"Callable[[UserProfile, Client, str, Sequence[str], Union[str, None], str, str, str, str, UserProfile, Union[Realm, None]],HttpResponse]"
sender,UserProfile
client,Client
message_type_name,str
message_content,str
delivery_type,str
defer_until,str
tz_guess,str
forwarder_user_profile,UserProfile
send_message_backend,"Callable[[HttpRequest, UserProfile, str, List[str], bool, Union[str, None], str, Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_type_name,str
forged,bool
message_content,str
fill_edit_history_entries,"Callable[[List[Dict[str, Any]], Message],None]"
message_history,"List[Dict[str, Any]]"
message,Message
get_message_edit_history,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_id,int
update_message_backend,"Callable[[HttpRequest, UserMessage, int, Union[str, None], Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserMessage
message_id,int
validate_can_delete_message,"Callable[[UserProfile, Message],None]"
user_profile,UserProfile
message,Message
delete_message_backend,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_id,int
json_fetch_raw_message,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_id,int
render_message_backend,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
content,str
messages_in_narrow_backend,"Callable[[HttpRequest, UserProfile, List[int], Union[List[Dict[str, Any]], None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
narrow,"Union[List[Dict[str, Any]], None]"
validate_thumbnail_request,"Callable[[UserProfile, str],Union[bool, None]]"
user_profile,UserProfile
path,str
backend_serve_thumbnail,"Callable[[HttpRequest, UserProfile, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
url,str
size_requested,str
list_by_user,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
remove,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
attachment_id,int
list_alert_words,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
add_alert_words,"Callable[[HttpRequest, UserProfile, List[str]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
remove_alert_words,"Callable[[HttpRequest, UserProfile, List[str]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
process_submessage,"Callable[[HttpRequest, UserProfile, int, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message_id,int
msg_type,str
content,str
list_realm_domains,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
create_realm_domain,"Callable[[HttpRequest, UserProfile, str, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
domain,str
allow_subdomains,bool
patch_realm_domain,"Callable[[HttpRequest, UserProfile, str, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
domain,str
allow_subdomains,bool
delete_realm_domain,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
domain,str
list_realm_custom_profile_fields,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
validate_field_name_and_hint,"Callable[[str, str],None]"
name,str
hint,str
create_realm_custom_profile_field,"Callable[[HttpRequest, UserProfile, str, str, ProfileFieldData, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
name,str
hint,str
field_data,ProfileFieldData
field_type,int
delete_realm_custom_profile_field,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
field_id,int
update_realm_custom_profile_field,"Callable[[HttpRequest, UserProfile, int, str, str, ProfileFieldData],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
field_id,int
name,str
hint,str
field_data,ProfileFieldData
reorder_realm_custom_profile_fields,"Callable[[HttpRequest, UserProfile, List[int]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
remove_user_custom_profile_data,"Callable[[HttpRequest, UserProfile, List[int]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
update_user_custom_profile_data,"Callable[[HttpRequest, UserProfile, List[Dict[str, Union[int, str, List[int]]]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
data,"List[Dict[str, Union[int, str, List[int]]]]"
add_user_group,"Callable[[HttpRequest, UserProfile, str, List[int], str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
name,str
description,str
get_user_group,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
edit_user_group,"Callable[[HttpRequest, UserProfile, int, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
user_group_id,int
name,str
description,str
delete_user_group,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
user_group_id,int
update_user_group_backend,"Callable[[HttpRequest, UserProfile, int, List[int], List[int]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
user_group_id,int
add_members_to_group_backend,"Callable[[HttpRequest, UserProfile, int, List[int]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
user_group_id,int
remove_members_from_group_backend,"Callable[[HttpRequest, UserProfile, int, List[int]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
user_group_id,int
email_page,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
clear_emails,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
generate_all_emails,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
list_filters,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
create_filter,"Callable[[HttpRequest, UserProfile, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
pattern,str
url_format_string,str
delete_filter,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
filter_id,int
update_realm,"Callable[[HttpRequest, UserProfile, Union[str, None], Union[str, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[int, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[int, None], Union[bool, None], Union[str, None], Union[int, None], Union[Dict[Any, Any], None], Union[int, None], Union[int, None], Union[int, None], Union[bool, None], Union[int, None], Union[bool, None], Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
authentication_methods,"Union[Dict[Any, Any], None]"
deactivate_realm,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
check_subdomain_available,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
subdomain,str
realm_reactivation,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
confirmation_key,str
check_prereg_key_and_redirect,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
confirmation_key,str
accounts_register,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
login_and_go_to_home,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
prepare_activation_url,"Callable[[str, HttpRequest, bool, Union[List[Stream], None]],str]"
email,str
request,HttpRequest
realm_creation,bool
streams,"Union[List[Stream], None]"
send_confirm_registration_email,"Callable[[str, str],None]"
email,str
activation_url,str
redirect_to_email_login_url,"Callable[[str],HttpResponseRedirect]"
email,str
create_realm,"Callable[[HttpRequest, Union[str, None]],HttpResponse]"
request,HttpRequest
confirmation_key,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
accounts_home,"Callable[[HttpRequest, Union[MultiuseInvite, None]],HttpResponse]"
request,HttpRequest
accounts_home_from_multiuse_invite,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
confirmation_key,str
generate_204,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
find_account,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
list_emoji,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
upload_emoji,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
emoji_name,str
delete_emoji,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
emoji_name,str
get_safe_redirect_to,"Callable[[str, str],str]"
url,str
redirect_host,str
create_preregistration_user,"Callable[[str, HttpRequest, bool, bool],HttpResponse]"
email,str
request,HttpRequest
realm_creation,bool
password_required,bool
maybe_send_to_registration,"Callable[[HttpRequest, str, str, bool, bool],HttpResponse]"
request,HttpRequest
email,str
full_name,str
is_signup,bool
password_required,bool
redirect_to_subdomain_login_url,"Callable[[],HttpResponseRedirect]"
redirect_to_config_error,"Callable[[str],HttpResponseRedirect]"
error_type,str
login_or_register_remote_user,"Callable[[HttpRequest, Union[str, None], Union[UserProfile, None], str, bool, Union[str, None], bool, str],HttpResponse]"
request,HttpRequest
full_name,str
invalid_subdomain,bool
is_signup,bool
redirect_to,str
remote_user_sso,"Callable[[HttpRequest, Union[str, None]],HttpResponse]"
request,HttpRequest
remote_user_jwt,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
google_oauth2_csrf,"Callable[[HttpRequest, str],str]"
request,HttpRequest
value,str
reverse_on_root,"Callable[[str, List[str], Dict[str, str]],str]"
viewname,str
oauth_redirect_to_root,"Callable[[HttpRequest, str, str, bool],HttpResponse]"
request,HttpRequest
url,str
sso_type,str
is_signup,bool
start_google_oauth2,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
start_social_login,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
backend,str
start_social_signup,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
backend,str
send_oauth_request_to_google,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
finish_google_oauth2,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
authenticate_remote_user,"Callable[[Realm, str],Tuple[UserProfile, Dict[str, Any]]]"
realm,Realm
email_address,str
log_into_subdomain,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
token,str
redirect_and_log_into_subdomain,"Callable[[Realm, str, str, bool, str],HttpResponse]"
realm,Realm
full_name,str
email_address,str
is_signup,bool
redirect_to,str
get_dev_users,"Callable[[Union[Realm, None], int],List[UserProfile]]"
extra_users_count,int
redirect_to_misconfigured_ldap_notice,"Callable[[int],HttpResponse]"
error_type,int
show_deactivation_notice,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
redirect_to_deactivation_notice,"Callable[[],HttpResponse]"
add_dev_login_context,"Callable[[Realm, Dict[str, Any]],None]"
realm,Realm
update_login_page_context,"Callable[[HttpRequest, Dict[str, Any]],None]"
request,HttpRequest
extra_context,ExtraContext
__init__,"Callable[[_, ExtraContext],None]"
extra_context,ExtraContext
args,Any
kwargs,Any
kwargs,Any
done,"Callable[[_, List[Form]],HttpResponse]"
kwargs,Any
login_page,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
kwargs,Any
start_two_factor_auth,"Callable[[HttpRequest, ExtraContext],HttpResponse]"
request,HttpRequest
extra_context,ExtraContext
kwargs,Any
dev_direct_login,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
kwargs,Any
api_dev_fetch_api_key,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
username,str
api_dev_list_users,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
api_fetch_api_key,"Callable[[HttpRequest, str, str],HttpResponse]"
request,HttpRequest
username,str
password,str
get_auth_backends_data,"Callable[[HttpRequest],Dict[str, Any]]"
request,HttpRequest
api_get_auth_backends,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
api_get_server_settings,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
json_fetch_api_key,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
password,str
api_fetch_google_client_id,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
logout_then_login,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
kwargs,Any
password_reset,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
kwargs,Any
accounts_accept_terms,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
get_bot_types,"Callable[[UserProfile],List[Dict[str, object]]]"
user_profile,UserProfile
home,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
home_real,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
narrow,List[List[str]]
desktop_home,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
apps_view,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
_,str
plans_view,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
mute_topic,"Callable[[UserProfile, str, str],HttpResponse]"
user_profile,UserProfile
stream_name,str
topic_name,str
unmute_topic,"Callable[[UserProfile, str, str],HttpResponse]"
user_profile,UserProfile
stream_name,str
topic_name,str
update_muted_topic,"Callable[[HttpRequest, UserProfile, str, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream,str
topic,str
op,str
upload_icon,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
delete_icon_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_icon_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
set_tutorial_status,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
status,str
report_send_times,"Callable[[HttpRequest, UserProfile, int, int, int, bool, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
time,int
received,int
displayed,int
locally_echoed,bool
rendered_content_disparity,bool
report_narrow_times,"Callable[[HttpRequest, UserProfile, int, int, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
initial_core,int
initial_free,int
network,int
report_unnarrow_times,"Callable[[HttpRequest, UserProfile, int, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
initial_core,int
initial_free,int
report_error,"Callable[[HttpRequest, UserProfile, str, str, bool, str, str, str, Union[Dict[str, Any], None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
message,str
stacktrace,str
ui_message,bool
user_agent,str
href,str
log,str
more_info,"Union[Dict[str, Any], None]"
report_csp_violations,"Callable[[HttpRequest, Dict[str, Any]],HttpResponse]"
request,HttpRequest
get_attr,"Callable[[str],str]"
csp_report_attr,str
mark_hotspot_as_read,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user,UserProfile
hotspot,str
email_mirror_message,"Callable[[HttpRequest, Dict[str, str]],HttpResponse]"
request,HttpRequest
get_pointer_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
update_pointer_backend,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
pointer,int
__init__,"Callable[[_, str],None]"
principal,str
self.principal,str
msg_format,"Callable[[],str]"
principal_to_user_profile,"Callable[[UserProfile, str],UserProfile]"
agent,UserProfile
principal,str
deactivate_stream_backend,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_id,int
add_default_stream,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_name,str
create_default_stream_group,"Callable[[HttpRequest, UserProfile, str, str, List[str]],None]"
request,HttpRequest
user_profile,UserProfile
group_name,str
description,str
update_default_stream_group_info,"Callable[[HttpRequest, UserProfile, int, str, str],None]"
request,HttpRequest
user_profile,UserProfile
group_id,int
new_group_name,str
new_description,str
update_default_stream_group_streams,"Callable[[HttpRequest, UserProfile, int, str, List[str]],None]"
request,HttpRequest
user_profile,UserProfile
group_id,int
op,str
remove_default_stream_group,"Callable[[HttpRequest, UserProfile, int],None]"
request,HttpRequest
user_profile,UserProfile
group_id,int
remove_default_stream,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_name,str
update_stream_backend,"Callable[[HttpRequest, UserProfile, int, Union[str, None], Union[bool, None], Union[bool, None], Union[bool, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_id,int
list_subscriptions_backend,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
update_subscriptions_backend,"Callable[[HttpRequest, UserProfile, Iterable[str], Iterable[Mapping[str, Any]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
add,"Iterable[Mapping[str, Any]]"
remove_subscriptions_backend,"Callable[[HttpRequest, UserProfile, Iterable[str], Union[Iterable[str], None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
principals,"Union[Iterable[str], None]"
result,"Dict[str, List[str]]"
you_were_just_subscribed_message,"Callable[[UserProfile, Set[str]],str]"
acting_user,UserProfile
add_subscriptions_backend,"Callable[[HttpRequest, UserProfile, Iterable[Mapping[str, str]], bool, bool, Union[bool, None], bool, List[str], bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
streams_raw,"Iterable[Mapping[str, str]]"
invite_only,bool
is_announcement_only,bool
announce,bool
authorization_errors_fatal,bool
get_subscribers_backend,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_id,int
get_streams_backend,"Callable[[HttpRequest, UserProfile, bool, bool, bool, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
include_public,bool
include_subscribed,bool
include_all_active,bool
include_default,bool
get_topics_backend,"Callable[[HttpRequest, UserProfile, int],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_id,int
json_stream_exists,"Callable[[HttpRequest, UserProfile, str, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_name,str
autosubscribe,bool
json_get_stream_id,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_name,str
update_subscriptions_property,"Callable[[HttpRequest, UserProfile, int, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream_id,int
property,str
value,str
update_subscription_properties_backend,"Callable[[HttpRequest, UserProfile, List[Dict[str, Any]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
subscription_data,"List[Dict[str, Any]]"
update_storage,"Callable[[HttpRequest, UserProfile, Dict[str, str]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_storage,"Callable[[HttpRequest, UserProfile, Union[List[str], None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
keys,"Union[List[str], None]"
remove_storage,"Callable[[HttpRequest, UserProfile, Union[List[str], None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
keys,"Union[List[str], None]"
migrate_set_order_value,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
fix_duplicate_attachments,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
set_initial_value_for_history_public_to_subscribers,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
change_emojiset,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
reverse_change_emojiset,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
__init__,"Callable[[_],None]"
copy_files,"Callable[[_, str, str],None]"
src_path,str
dst_path,str
ensure_emoji_images,"Callable[[_, int, str, str],None]"
realm_id,int
old_filename,str
new_filename,str
__init__,"Callable[[_],None]"
mkdirs,"Callable[[str],None]"
path,str
copy_files,"Callable[[_, str, str],None]"
src_path,str
dst_path,str
__init__,"Callable[[_],None]"
copy_files,"Callable[[_, str, str],None]"
src_key,str
dst_key,str
get_uploader,"Callable[[],Uploader]"
get_emoji_file_name,"Callable[[str, str],str]"
emoji_file_name,str
new_name,str
migrate_realm_emoji_image_files,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
reversal,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
fix_unreads,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
populate_new_fields,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
add_domain_to_realm_alias_if_needed,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
get_file_size_local,"Callable[[Text],int]"
path_id,Text
sync_filesizes,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
reverse_sync_filesizes,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
emoji_to_lowercase,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
change_emojiset_choice,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
delete_old_scheduled_jobs,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
attachment_url_to_path_id,"Callable[[str],str]"
attachment_url,str
check_and_create_attachments,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
fix_realm_string_ids,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
remove_prereg_users_without_realm,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
delete_old_scheduled_jobs,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
reset_is_private_flag,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
populate_is_zephyr,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
copy_email_field,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
backfill_subscription_log_events,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
reverse_code,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
backfill_last_message_id,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
force_str,"Callable[[Union[Text, bytes], Text],str]"
encoding,Text
__init__,"Callable[[_],None]"
upload_files,"Callable[[_, Response, bytes, Text],None]"
response,Response
resized_image,bytes
dst_path_id,Text
get_dst_path_id,"Callable[[_, int, Text, Text],Tuple[Text, Text]]"
realm_id,int
url,Text
emoji_name,Text
resize_emoji,"Callable[[_, bytes],Union[bytes, None]]"
image_data,bytes
upload_emoji,"Callable[[_, int, Text, Text],Union[Text, None]]"
realm_id,int
image_url,Text
emoji_name,Text
__init__,"Callable[[_],None]"
mkdirs,"Callable[[Text],None]"
path,Text
write_local_file,"Callable[[_, Text, bytes],None]"
path,Text
file_data,bytes
upload_files,"Callable[[_, Response, bytes, Text],None]"
response,Response
resized_image,bytes
dst_path_id,Text
__init__,"Callable[[_],None]"
upload_to_s3,"Callable[[_, Text, bytes, Union[Dict[Text, Text], None]],None]"
path,Text
file_data,bytes
headers,"Union[Dict[Text, Text], None]"
upload_files,"Callable[[_, Response, bytes, Text],None]"
response,Response
resized_image,bytes
dst_path_id,Text
headers,"Union[Dict[Text, Text], None]"
get_uploader,"Callable[[],Uploader]"
upload_emoji_to_storage,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
uploader,Uploader
change_emojiset_choice,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
set_subdomain_of_default_realm,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
fix_bot_type,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
change_realm_audit_log_event_type_tense,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
set_tutorial_status_to_finished,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
migrate_existing_attachment_data,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
set_initial_value_for_bot_creation_policy,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
reverse_code,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
convert_muted_topics,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
mkdirs,"Callable[[Text],None]"
path,Text
move_local_file,"Callable[[Text, Text, Text],None]"
type,Text
path_src,Text
path_dst,Text
move_avatars_to_be_uid_based,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
set_initial_value_for_signup_notifications_stream,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
backfill_user_activations_and_deactivations,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
reverse_code,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
patched_user_avatar_path,"Callable[[UserProfile],Text]"
user_profile,UserProfile
verify_medium_avatar_image,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
set_realm_for_existing_scheduledemails,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
set_initial_value_of_is_private_flag,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
migrate_fix_invalid_bot_owner_values,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
set_string_id_using_domain,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
realm_emoji_name_to_id,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
realm_emoji_by_realm_id,"Dict[int, Dict[str, Any]]"
reversal,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
api_github_webhook_dispatch,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
test_bitbucket_on_push_event,"Callable[[_],None]"
test_bitbucket_on_push_event_filtered_by_branches,"Callable[[_],None]"
test_bitbucket_on_push_commits_above_limit_event,"Callable[[_],None]"
test_bitbucket_on_push_commits_above_limit_event_filtered_by_branches,"Callable[[_],None]"
test_bitbucket_on_force_push_event,"Callable[[_],None]"
test_bitbucket_on_push_event_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_bitbucket_push_commits_above_limit_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
get_body,"Callable[[_, str],Union[str, Dict[str, str]]]"
fixture_name,str
api_bitbucket_webhook,"Callable[[HttpRequest, UserProfile, Mapping[str, Any], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_conversation_assigned_outbound,"Callable[[_],None]"
test_outbound_message,"Callable[[_],None]"
test_conversation_archived,"Callable[[_],None]"
test_conversation_reopened,"Callable[[_],None]"
test_conversation_deleted,"Callable[[_],None]"
test_conversation_restored,"Callable[[_],None]"
test_conversation_unassigned,"Callable[[_],None]"
test_mention_all,"Callable[[_],None]"
test_inbound_message,"Callable[[_],None]"
test_conversation_tagged,"Callable[[_],None]"
test_conversation_assigned_reply,"Callable[[_],None]"
test_outbound_reply,"Callable[[_],None]"
test_conversation_untagged,"Callable[[_],None]"
test_mention,"Callable[[_],None]"
test_comment,"Callable[[_],None]"
test_conversation_assigned,"Callable[[_],None]"
test_unknown_webhook_request,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
get_source_name,"Callable[[Dict[str, Any]],str]"
get_target_name,"Callable[[Dict[str, Any]],str]"
get_inbound_message_body,"Callable[[Dict[str, Any]],str]"
get_outbound_message_body,"Callable[[Dict[str, Any]],str]"
get_outbound_reply_body,"Callable[[Dict[str, Any]],str]"
get_comment_body,"Callable[[Dict[str, Any]],str]"
get_conversation_assigned_body,"Callable[[Dict[str, Any]],str]"
get_conversation_unassigned_body,"Callable[[Dict[str, Any]],str]"
get_conversation_archived_body,"Callable[[Dict[str, Any]],str]"
get_conversation_reopened_body,"Callable[[Dict[str, Any]],str]"
get_conversation_deleted_body,"Callable[[Dict[str, Any]],str]"
get_conversation_restored_body,"Callable[[Dict[str, Any]],str]"
get_conversation_tagged_body,"Callable[[Dict[str, Any]],str]"
get_conversation_untagged_body,"Callable[[Dict[str, Any]],str]"
get_body_based_on_event,"Callable[[str],Any]"
event,str
api_front_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_publish_post,"Callable[[_],None]"
test_publish_post_type_not_provided,"Callable[[_],None]"
test_publish_post_no_data_provided,"Callable[[_],None]"
test_publish_page,"Callable[[_],None]"
test_user_register,"Callable[[_],None]"
test_wp_login,"Callable[[_],None]"
test_unknown_action_no_data,"Callable[[_],None]"
test_unknown_action_no_hook_provided,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_wordpress_webhook,"Callable[[HttpRequest, UserProfile, str, str, str, str, str, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
hook,str
post_title,str
post_type,str
post_url,str
display_name,str
user_email,str
user_login,str
test_story_create,"Callable[[_],None]"
test_epic_story_create,"Callable[[_],None]"
test_story_archive,"Callable[[_],None]"
test_story_unarchive,"Callable[[_],None]"
test_epic_create,"Callable[[_],None]"
test_epic_update_add_comment,"Callable[[_],None]"
test_story_update_add_comment,"Callable[[_],None]"
test_epic_update_add_description,"Callable[[_],None]"
test_epic_update_remove_description,"Callable[[_],None]"
test_epic_update_change_description,"Callable[[_],None]"
test_story_update_add_description,"Callable[[_],None]"
test_story_update_remove_description,"Callable[[_],None]"
test_story_update_change_description,"Callable[[_],None]"
test_epic_update_change_state,"Callable[[_],None]"
test_story_update_change_state,"Callable[[_],None]"
test_epic_update_change_name,"Callable[[_],None]"
test_story_update_change_name,"Callable[[_],None]"
test_story_task_created,"Callable[[_],None]"
test_story_task_deleted,"Callable[[_],None]"
test_story_task_completed,"Callable[[_],None]"
test_story_task_incomplete_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_story_epic_changed,"Callable[[_],None]"
test_story_epic_added,"Callable[[_],None]"
test_story_epic_removed,"Callable[[_],None]"
test_story_estimate_changed,"Callable[[_],None]"
test_story_estimate_added,"Callable[[_],None]"
test_story_estimate_removed,"Callable[[_],None]"
test_story_file_attachment_added,"Callable[[_],None]"
test_story_file_attachment_removed_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_story_label_added,"Callable[[_],None]"
test_story_label_removed_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_story_update_project,"Callable[[_],None]"
test_story_update_type,"Callable[[_],None]"
get_body_function_based_on_type,"Callable[[Dict[str, Any]],Any]"
get_topic_function_based_on_type,"Callable[[Dict[str, Any]],Any]"
get_story_create_body,"Callable[[Dict[str, Any]],str]"
get_epic_create_body,"Callable[[Dict[str, Any]],str]"
get_comment_added_body,"Callable[[Dict[str, Any], str],str]"
entity,str
get_update_description_body,"Callable[[Dict[str, Any], str],str]"
entity,str
get_epic_update_state_body,"Callable[[Dict[str, Any]],str]"
get_story_update_state_body,"Callable[[Dict[str, Any]],str]"
get_update_name_body,"Callable[[Dict[str, Any], str],str]"
entity,str
get_story_update_archived_body,"Callable[[Dict[str, Any]],str]"
get_story_task_body,"Callable[[Dict[str, Any], str],str]"
action,str
get_story_update_epic_body,"Callable[[Dict[str, Any]],str]"
get_story_update_estimate_body,"Callable[[Dict[str, Any]],str]"
get_story_update_project_body,"Callable[[Dict[str, Any]],str]"
get_story_update_type_body,"Callable[[Dict[str, Any]],str]"
get_name_template,"Callable[[str],str]"
entity,str
api_clubhouse_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_deployment,"Callable[[_],None]"
test_deployment_multiple_commits,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_heroku_webhook,"Callable[[HttpRequest, UserProfile, str, str, str, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
head,str
app,str
user,str
url,str
git_log,str
test_mention_webfeed,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_mention_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Iterable[Dict[str, Any]]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Iterable[Dict[str, Any]]]"
test_flock_message,"Callable[[_],None]"
test_flock_reply,"Callable[[_],None]"
test_flock_note,"Callable[[_],None]"
test_flock_reply_note,"Callable[[_],None]"
test_flock_reply_pinned,"Callable[[_],None]"
test_flock_reply_reminder,"Callable[[_],None]"
test_flock_reply_todo,"Callable[[_],None]"
test_flock_pinned,"Callable[[_],None]"
test_flock_reminder,"Callable[[_],None]"
test_flock_todo,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_flock_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_feedback_message_promoter,"Callable[[_],None]"
test_feedback_message_non_promoter,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
body_template,"Callable[[int],str]"
score,int
api_delighted_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Dict[str, Any]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Dict[str, Any]]"
test_acknowledge_alert,"Callable[[_],None]"
test_addnote_alert,"Callable[[_],None]"
test_addrecipient_alert,"Callable[[_],None]"
test_addtags_alert,"Callable[[_],None]"
test_addteam_alert,"Callable[[_],None]"
test_assignownership_alert,"Callable[[_],None]"
test_close_alert,"Callable[[_],None]"
test_create_alert,"Callable[[_],None]"
test_customaction_alert,"Callable[[_],None]"
test_delete_alert,"Callable[[_],None]"
test_escalate_alert,"Callable[[_],None]"
test_removetags_alert,"Callable[[_],None]"
test_takeownership_alert,"Callable[[_],None]"
test_unacknowledge_alert,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_opsgenie_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_updown_check_down_event,"Callable[[_],None]"
test_updown_check_up_again_event,"Callable[[_],None]"
test_updown_check_up_event,"Callable[[_],None]"
test_updown_check_up_multiple_events,"Callable[[_],None]"
send_message_for_event,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],None]"
request,HttpRequest
user_profile,UserProfile
get_body_for_up_event,"Callable[[Dict[str, Any]],str]"
get_time_string_based_on_duration,"Callable[[int],str]"
duration,int
add_time_part_to_string_date_if_needed,"Callable[[int, str],str]"
value,int
text_name,str
get_body_for_down_event,"Callable[[Dict[str, Any]],str]"
api_updown_webhook,"Callable[[HttpRequest, UserProfile, List[Dict[str, Any]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"List[Dict[str, Any]]"
get_event_type,"Callable[[Dict[str, Any]],str]"
test_review_request_published,"Callable[[_],None]"
test_review_request_published_with_multiple_target_people,"Callable[[_],None]"
test_review_request_reopened,"Callable[[_],None]"
test_review_request_closed,"Callable[[_],None]"
test_review_published,"Callable[[_],None]"
test_reply_published,"Callable[[_],None]"
get_target_people_string,"Callable[[Dict[str, Any]],str]"
get_review_published_body,"Callable[[Dict[str, Any]],str]"
get_reply_published_body,"Callable[[Dict[str, Any]],str]"
get_review_request_published_body,"Callable[[Dict[str, Any]],str]"
get_review_request_reopened_body,"Callable[[Dict[str, Any]],str]"
get_review_request_closed_body,"Callable[[Dict[str, Any]],str]"
get_review_request_repo_title,"Callable[[Dict[str, Any]],str]"
api_reviewboard_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Iterable[Dict[str, Any]]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Iterable[Dict[str, Any]]]"
get_body,"Callable[[_, str],str]"
fixture_name,str
test_alert_message_with_default_topic,"Callable[[_],None]"
test_alert_message_with_custom_topic,"Callable[[_],None]"
test_three_conditions_alert_message,"Callable[[_],None]"
test_alert_clear,"Callable[[_],None]"
test_snapshot,"Callable[[_],None]"
__init__,"Callable[[_, Dict[str, Any], List[Dict[str, Any]]],None]"
attachments,"List[Dict[str, Any]]"
generate_alert_url,"Callable[[_, int],str]"
alert_id,int
parse_conditions,"Callable[[_],List[Dict[str, Any]]]"
parse_violations,"Callable[[_],List[Dict[str, Any]]]"
__init__,"Callable[[_, Dict[str, Any], List[Dict[str, Any]]],None]"
attachments,"List[Dict[str, Any]]"
find_handle_method,"Callable[[_],Callable[[],str]]"
handle,"Callable[[_],str]"
generate_topic,"Callable[[_],str]"
handle_alert_clear_message,"Callable[[_],str]"
handle_snapshots,"Callable[[_],str]"
handle_snapshot,"Callable[[_, Dict[str, Any]],str]"
handle_alert_violation_message,"Callable[[_],str]"
generate_conditions_and_violations,"Callable[[_],str]"
generate_violated_metric_condition,"Callable[[_, Dict[str, Any], Dict[str, Any]],str]"
api_librato_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_abandon_event_message,"Callable[[_],None]"
test_comment_event_message,"Callable[[_],None]"
test_submit_event_message,"Callable[[_],None]"
test_claim_event_message,"Callable[[_],None]"
test_approve_event_message,"Callable[[_],None]"
test_approve_pending_pc_event_message,"Callable[[_],None]"
test_needswork_event_message,"Callable[[_],None]"
test_extend_event_message,"Callable[[_],None]"
test_unassign_event_message,"Callable[[_],None]"
test_outoftime_event_message,"Callable[[_],None]"
build_instance_url,"Callable[[str],str]"
instance_id,str
get_abandon_event_body,"Callable[[Dict[str, Any]],str]"
get_submit_event_body,"Callable[[Dict[str, Any]],str]"
get_comment_event_body,"Callable[[Dict[str, Any]],str]"
get_claim_event_body,"Callable[[Dict[str, Any]],str]"
get_approve_event_body,"Callable[[Dict[str, Any]],str]"
get_approve_pending_pc_event_body,"Callable[[Dict[str, Any]],str]"
get_needswork_event_body,"Callable[[Dict[str, Any]],str]"
get_extend_event_body,"Callable[[Dict[str, Any]],str]"
get_unassign_event_body,"Callable[[Dict[str, Any]],str]"
get_outoftime_event_body,"Callable[[Dict[str, Any]],str]"
api_gci_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_body_based_on_event,"Callable[[str],Any]"
event,str
test_error_issue_message,"Callable[[_],None]"
api_sentry_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_trello_confirmation_request,"Callable[[_],None]"
test_trello_webhook_when_card_was_moved_to_another_list,"Callable[[_],None]"
test_trello_webhook_when_card_was_renamed,"Callable[[_],None]"
test_trello_webhook_when_label_was_added_to_card,"Callable[[_],None]"
test_trello_webhook_when_label_was_removing_from_card,"Callable[[_],None]"
test_trello_webhook_when_member_was_added_to_card,"Callable[[_],None]"
test_trello_webhook_when_member_was_removed_from_card,"Callable[[_],None]"
test_trello_webhook_when_due_date_was_set,"Callable[[_],None]"
test_trello_webhook_when_due_date_was_changed,"Callable[[_],None]"
test_trello_webhook_when_due_date_was_removed,"Callable[[_],None]"
test_trello_webhook_when_card_was_archived,"Callable[[_],None]"
test_trello_webhook_when_card_was_reopened,"Callable[[_],None]"
test_trello_webhook_when_card_was_created,"Callable[[_],None]"
test_trello_webhook_when_attachment_was_added_to_card,"Callable[[_],None]"
test_trello_webhook_when_checklist_was_added_to_card,"Callable[[_],None]"
test_trello_webhook_when_member_was_removed_from_board,"Callable[[_],None]"
test_trello_webhook_when_member_was_added_to_board,"Callable[[_],None]"
test_trello_webhook_when_list_was_added_to_board,"Callable[[_],None]"
test_trello_webhook_when_comment_was_added_to_card,"Callable[[_],None]"
test_trello_webhook_when_board_was_renamed,"Callable[[_],None]"
test_trello_webhook_when_card_is_moved_within_single_list_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_trello_webhook_when_board_background_is_changed_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_trello_webhook_when_description_was_added_to_card,"Callable[[_],None]"
test_trello_webhook_when_description_was_removed_from_card,"Callable[[_],None]"
test_trello_webhook_when_description_was_changed_on_card,"Callable[[_],None]"
api_trello_webhook,"Callable[[HttpRequest, UserProfile, Mapping[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_subject_and_body,"Callable[[Mapping[str, Any], str],Union[Tuple[str, str], None]]"
action_type,str
prettify_date,"Callable[[str],str]"
date_string,str
process_card_action,"Callable[[Mapping[str, Any], str],Union[Tuple[str, str], None]]"
action_type,str
get_proper_action,"Callable[[Mapping[str, Any], str],Union[str, None]]"
action_type,str
get_subject,"Callable[[Mapping[str, Any]],str]"
get_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_added_checklist_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_added_attachment_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_updated_card_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_renamed_card_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_added_label_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_managed_member_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_comment_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_managed_due_date_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_changed_due_date_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_managed_desc_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_changed_desc_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_body_by_action_type_without_data,"Callable[[Mapping[str, Any], str],str]"
action_type,str
fill_appropriate_message_content,"Callable[[Mapping[str, Any], str, Union[Dict[str, Any], None]],str]"
action_type,str
data,"Union[Dict[str, Any], None]"
get_filled_card_url_template,"Callable[[Mapping[str, Any]],str]"
get_card_url,"Callable[[Mapping[str, Any]],str]"
get_message_body,"Callable[[str],str]"
action_type,str
get_card_name,"Callable[[Mapping[str, Any]],str]"
process_board_action,"Callable[[Mapping[str, Any], Union[str, None]],Union[Tuple[str, str], None]]"
get_subject,"Callable[[Mapping[str, Any]],str]"
get_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_managed_member_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_create_list_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
get_change_name_body,"Callable[[Mapping[str, Any], str],str]"
action_type,str
fill_appropriate_message_content,"Callable[[Mapping[str, Any], str, Union[Dict[str, Any], None]],str]"
action_type,str
data,"Union[Dict[str, Any], None]"
get_filled_board_url_template,"Callable[[Mapping[str, Any]],str]"
get_board_name,"Callable[[Mapping[str, Any]],str]"
get_board_url,"Callable[[Mapping[str, Any]],str]"
get_message_body,"Callable[[str],str]"
action_type,str
test_slack_channel_to_topic,"Callable[[_],None]"
test_slack_channel_to_stream,"Callable[[_],None]"
test_missing_data_user_name,"Callable[[_],None]"
test_missing_data_channel_name,"Callable[[_],None]"
test_missing_data_text,"Callable[[_],None]"
test_invalid_channels_map_to_topics,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_slack_webhook,"Callable[[HttpRequest, UserProfile, str, str, str, str, str],HttpRequest]"
request,HttpRequest
user_profile,UserProfile
user_name,str
text,str
channel_name,str
stream,str
channels_map_to_topics,str
test_yo_message,"Callable[[_],None]"
get_body,"Callable[[_, str],Dict[str, Any]]"
fixture_name,str
api_yo_app_webhook,"Callable[[HttpRequest, UserProfile, str, str, Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
email,str
username,str
test_website_state_available_message,"Callable[[_],None]"
test_website_state_not_responding_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_insping_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Dict[str, Any]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Dict[str, Any]]"
test_custom_stream,"Callable[[_],None]"
test_created,"Callable[[_],None]"
test_created_with_stream_with_spaces_escaped,"Callable[[_],None]"
test_created_with_stream_with_spaces_double_escaped,"Callable[[_],None]"
test_created_with_unicode,"Callable[[_],None]"
test_created_assignee,"Callable[[_],None]"
test_commented,"Callable[[_],None]"
test_comment_edited,"Callable[[_],None]"
test_comment_deleted,"Callable[[_],None]"
test_commented_markup,"Callable[[_],None]"
test_deleted,"Callable[[_],None]"
test_reassigned,"Callable[[_],None]"
test_priority_updated,"Callable[[_],None]"
test_status_changed,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
guess_zulip_user_from_jira,"Callable[[str, Realm],Union[UserProfile, None]]"
jira_username,str
realm,Realm
convert_jira_markup,"Callable[[str, Realm],str]"
content,str
realm,Realm
get_in,"Callable[[Dict[str, Any], List[str], str],Any]"
default,str
get_issue_string,"Callable[[Dict[str, Any], Union[str, None]],str]"
get_assignee_mention,"Callable[[str, Realm],str]"
assignee_email,str
realm,Realm
get_issue_author,"Callable[[Dict[str, Any]],str]"
get_issue_id,"Callable[[Dict[str, Any]],str]"
get_issue_title,"Callable[[Dict[str, Any]],str]"
get_issue_subject,"Callable[[Dict[str, Any]],str]"
get_sub_event_for_update_issue,"Callable[[Dict[str, Any]],str]"
add_change_info,"Callable[[str, str, str, str],str]"
content,str
field,str
from_field,str
to_field,str
handle_updated_issue_event,"Callable[[Dict[str, Any], UserProfile],str]"
user_profile,UserProfile
handle_created_issue_event,"Callable[[Dict[str, Any]],str]"
handle_deleted_issue_event,"Callable[[Dict[str, Any]],str]"
api_jira_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_git_single,"Callable[[_],None]"
test_git_single_filtered_by_branches,"Callable[[_],None]"
test_git_multiple_committers,"Callable[[_],None]"
test_git_multiple_committers_filtered_by_branches,"Callable[[_],None]"
test_git_multiple,"Callable[[_],None]"
test_git_multiple_filtered_by_branches,"Callable[[_],None]"
test_git_more_than_limit,"Callable[[_],None]"
test_git_more_than_limit_filtered_by_branches,"Callable[[_],None]"
test_git_single_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_git_multiple_committers_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_git_multiple_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_git_more_than_limit_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_svn_addremove,"Callable[[_],None]"
test_svn_changefile,"Callable[[_],None]"
get_body,"Callable[[_, str],Dict[str, str]]"
fixture_name,str
beanstalk_decoder,"Callable[[ViewFuncT],ViewFuncT]"
view_func,ViewFuncT
_wrapped_view_func,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
args,Any
kwargs,Any
auth_type,str
encoded_value,str
encoded_credentials,str
api_beanstalk_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
setUp,"Callable[[_],None]"
test_taiga_userstory_deleted,"Callable[[_],None]"
test_taiga_userstory_created,"Callable[[_],None]"
test_taiga_userstory_changed_unblocked,"Callable[[_],None]"
test_taiga_userstory_changed_subject,"Callable[[_],None]"
test_taiga_userstory_changed_status,"Callable[[_],None]"
test_taiga_userstory_changed_reassigned,"Callable[[_],None]"
test_taiga_userstory_changed_unassigned,"Callable[[_],None]"
test_taiga_userstory_changed_points,"Callable[[_],None]"
test_taiga_userstory_changed_new_sprint,"Callable[[_],None]"
test_taiga_userstory_changed_sprint,"Callable[[_],None]"
test_taiga_userstory_changed_remove_sprint,"Callable[[_],None]"
test_taiga_userstory_changed_description,"Callable[[_],None]"
test_taiga_userstory_changed_closed,"Callable[[_],None]"
test_taiga_userstory_changed_reopened,"Callable[[_],None]"
test_taiga_userstory_changed_blocked,"Callable[[_],None]"
test_taiga_userstory_changed_assigned,"Callable[[_],None]"
test_taiga_userstory_comment_added,"Callable[[_],None]"
test_taiga_task_created,"Callable[[_],None]"
test_taiga_task_changed_user_stories,"Callable[[_],None]"
test_taiga_task_changed_status,"Callable[[_],None]"
test_taiga_task_changed_blocked,"Callable[[_],None]"
test_taiga_task_changed_unblocked,"Callable[[_],None]"
test_taiga_task_changed_assigned,"Callable[[_],None]"
test_taiga_task_changed_reassigned,"Callable[[_],None]"
test_taiga_task_changed_subject,"Callable[[_],None]"
test_taiga_task_changed_description,"Callable[[_],None]"
test_taiga_task_deleted,"Callable[[_],None]"
test_taiga_task_changed_comment_added,"Callable[[_],None]"
test_taiga_sprint_created,"Callable[[_],None]"
test_taiga_sprint_deleted,"Callable[[_],None]"
test_taiga_sprint_changed_time,"Callable[[_],None]"
test_taiga_sprint_changed_name,"Callable[[_],None]"
test_taiga_issue_created,"Callable[[_],None]"
test_taiga_issue_deleted,"Callable[[_],None]"
test_taiga_issue_changed_assigned,"Callable[[_],None]"
test_taiga_issue_changed_reassigned,"Callable[[_],None]"
test_taiga_issue_changed_subject,"Callable[[_],None]"
test_taiga_issue_changed_description,"Callable[[_],None]"
test_taiga_issue_changed_type,"Callable[[_],None]"
test_taiga_issue_changed_status,"Callable[[_],None]"
test_taiga_issue_changed_severity,"Callable[[_],None]"
test_taiga_issue_changed_priority,"Callable[[_],None]"
test_taiga_issue_changed_comment_added,"Callable[[_],None]"
test_taiga_epic_created,"Callable[[_],None]"
test_taiga_epic_changed_assigned,"Callable[[_],None]"
test_taiga_epic_changed_unassigned,"Callable[[_],None]"
test_taiga_epic_changed_reassigned,"Callable[[_],None]"
test_taiga_epic_changed_blocked,"Callable[[_],None]"
test_taiga_epic_changed_unblocked,"Callable[[_],None]"
test_taiga_epic_changed_status,"Callable[[_],None]"
test_taiga_epic_changed_renamed,"Callable[[_],None]"
test_taiga_epic_changed_description,"Callable[[_],None]"
test_taiga_epic_changed_commented,"Callable[[_],None]"
test_taiga_epic_deleted,"Callable[[_],None]"
test_taiga_relateduserstory_created,"Callable[[_],None]"
test_taiga_relateduserstory_deleted,"Callable[[_],None]"
api_taiga_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_old_and_new_values,"Callable[[str, Mapping[str, Any]],return_type]"
change_type,str
parse_change_event,"Callable[[str, Mapping[str, Any]],Union[Dict[str, Any], None]]"
change_type,str
parse_message,"Callable[[Mapping[str, Any]],List[Dict[str, Any]]]"
generate_content,"Callable[[Mapping[str, Any]],str]"
get_owner_name,"Callable[[Mapping[str, Any]],str]"
get_subject,"Callable[[Mapping[str, Any]],str]"
test_circleci_build_in_success_status,"Callable[[_],None]"
test_circleci_build_in_failed_status,"Callable[[_],None]"
test_circleci_build_in_failed_status_when_previous_build_failed_too,"Callable[[_],None]"
test_circleci_build_in_success_status_when_previous_build_failed_too,"Callable[[_],None]"
api_circleci_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_subject,"Callable[[Dict[str, Any]],str]"
get_body,"Callable[[Dict[str, Any]],str]"
get_status,"Callable[[Dict[str, Any]],str]"
test_semaphore_build,"Callable[[_],None]"
test_semaphore_deploy,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_semaphore_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_gocd_message,"Callable[[_],None]"
test_failed_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_gocd_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_push_event_specified_topic,"Callable[[_],None]"
test_push_event_message,"Callable[[_],None]"
test_push_local_branch_without_commits,"Callable[[_],None]"
test_push_event_message_filtered_by_branches,"Callable[[_],None]"
test_push_multiple_committers,"Callable[[_],None]"
test_push_multiple_committers_with_others,"Callable[[_],None]"
test_push_commits_more_than_limit_event_message,"Callable[[_],None]"
test_push_commits_more_than_limit_message_filtered_by_branches,"Callable[[_],None]"
test_remove_branch_event_message,"Callable[[_],None]"
test_add_tag_event_message,"Callable[[_],None]"
test_remove_tag_event_message,"Callable[[_],None]"
test_create_issue_without_assignee_event_message,"Callable[[_],None]"
test_create_issue_with_custom_topic_in_url,"Callable[[_],None]"
test_create_issue_with_assignee_event_message,"Callable[[_],None]"
test_create_issue_with_hidden_comment_in_description,"Callable[[_],None]"
test_create_issue_with_null_description,"Callable[[_],None]"
test_update_issue_event_message,"Callable[[_],None]"
test_update_issue_with_custom_topic_in_url,"Callable[[_],None]"
test_close_issue_event_message,"Callable[[_],None]"
test_reopen_issue_event_message,"Callable[[_],None]"
test_note_commit_event_message,"Callable[[_],None]"
test_note_merge_request_event_message,"Callable[[_],None]"
test_note_merge_request_with_custom_topic_in_url,"Callable[[_],None]"
test_note_issue_event_message,"Callable[[_],None]"
test_note_issue_with_custom_topic_in_url,"Callable[[_],None]"
test_note_snippet_event_message,"Callable[[_],None]"
test_note_snippet_with_custom_topic_in_url,"Callable[[_],None]"
test_merge_request_created_without_assignee_event_message,"Callable[[_],None]"
test_merge_request_created_with_custom_topic_in_url,"Callable[[_],None]"
test_merge_request_created_with_assignee_event_message,"Callable[[_],None]"
test_merge_request_closed_event_message,"Callable[[_],None]"
test_merge_request_closed_with_custom_topic_in_url,"Callable[[_],None]"
test_merge_request_reopened_event_message,"Callable[[_],None]"
test_merge_request_approved_event_message,"Callable[[_],None]"
test_merge_request_updated_event_message,"Callable[[_],None]"
test_merge_request_added_commit_event_message,"Callable[[_],None]"
test_merge_request_merged_event_message,"Callable[[_],None]"
test_wiki_page_opened_event_message,"Callable[[_],None]"
test_wiki_page_edited_event_message,"Callable[[_],None]"
test_build_created_event_message,"Callable[[_],None]"
test_build_started_event_message,"Callable[[_],None]"
test_build_succeeded_event_message,"Callable[[_],None]"
test_build_created_event_message_legacy_event_name,"Callable[[_],None]"
test_build_started_event_message_legacy_event_name,"Callable[[_],None]"
test_build_succeeded_event_message_legacy_event_name,"Callable[[_],None]"
test_pipeline_succeeded_event_message,"Callable[[_],None]"
test_pipeline_started_event_message,"Callable[[_],None]"
test_pipeline_pending_event_message,"Callable[[_],None]"
test_issue_type_test_payload,"Callable[[_],None]"
test_push_event_message_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_push_commits_more_than_limit_message_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
get_push_event_body,"Callable[[Dict[str, Any]],str]"
get_normal_push_event_body,"Callable[[Dict[str, Any]],str]"
get_remove_branch_event_body,"Callable[[Dict[str, Any]],str]"
get_tag_push_event_body,"Callable[[Dict[str, Any]],str]"
get_issue_created_event_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_issue_event_body,"Callable[[Dict[str, Any], str, Union[bool, None]],str]"
action,str
get_merge_request_updated_event_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_merge_request_event_body,"Callable[[Dict[str, Any], str, Union[bool, None]],str]"
action,str
get_merge_request_open_or_updated_body,"Callable[[Dict[str, Any], str, Union[bool, None]],str]"
action,str
get_commented_commit_event_body,"Callable[[Dict[str, Any]],str]"
get_commented_merge_request_event_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_commented_issue_event_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_commented_snippet_event_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_wiki_page_event_body,"Callable[[Dict[str, Any], str],str]"
action,str
get_build_hook_event_body,"Callable[[Dict[str, Any]],str]"
get_test_event_body,"Callable[[Dict[str, Any]],str]"
get_pipeline_event_body,"Callable[[Dict[str, Any]],str]"
get_repo_name,"Callable[[Dict[str, Any]],str]"
get_user_name,"Callable[[Dict[str, Any]],str]"
get_issue_user_name,"Callable[[Dict[str, Any]],str]"
get_repository_homepage,"Callable[[Dict[str, Any]],str]"
get_branch_name,"Callable[[Dict[str, Any]],str]"
get_tag_name,"Callable[[Dict[str, Any]],str]"
get_object_url,"Callable[[Dict[str, Any]],str]"
api_gitlab_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any], Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_body_based_on_event,"Callable[[str],Any]"
event,str
get_subject_based_on_event,"Callable[[str, Dict[str, Any]],str]"
event,str
get_event,"Callable[[HttpRequest, Dict[str, Any], Union[str, None]],Union[str, None]]"
request,HttpRequest
test_charge_dispute_closed,"Callable[[_],None]"
test_charge_dispute_created,"Callable[[_],None]"
test_charge_failed,"Callable[[_],None]"
test_charge_succeeded,"Callable[[_],None]"
test_customer_created,"Callable[[_],None]"
test_customer_created_email,"Callable[[_],None]"
test_customer_deleted,"Callable[[_],None]"
test_customer_subscription_created,"Callable[[_],None]"
test_customer_subscription_deleted,"Callable[[_],None]"
test_customer_subscription_trial_will_end,"Callable[[_],None]"
test_customer_discount_created,"Callable[[_],None]"
test_invoice_payment_failed,"Callable[[_],None]"
api_stripe_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any], str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
stream,str
default_body,"Callable[[],str]"
amount_string,"Callable[[int, str],str]"
amount,int
currency,str
update_string,"Callable[[Dict[str, Any]],str]"
linkified_id,"Callable[[str, bool],str]"
object_id,str
lower,bool
names_and_urls,"Dict[str, Tuple[str, Union[str, None]]]"
test_signatures_message,"Callable[[_],None]"
test_signatures_message_signed_by_one,"Callable[[_],None]"
test_signatures_message_with_four_signatories,"Callable[[_],None]"
test_signatures_message_with_own_subject,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
get_message_body,"Callable[[Dict[str, Dict[str, Any]]],str]"
payload,"Dict[str, Dict[str, Any]]"
recipients,"Dict[str, List[str]]"
get_recipients_text,"Callable[[List[str]],str]"
api_hellosign_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Dict[str, Any]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Dict[str, Any]]"
test_user_created_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_intercom_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_hello_message,"Callable[[_],None]"
test_goodbye_message,"Callable[[_],None]"
test_pm_to_bot_owner,"Callable[[_],None]"
test_stream_error_pm_to_bot_owner,"Callable[[_],None]"
test_custom_topic,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_helloworld_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Iterable[Dict[str, Any]]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Iterable[Dict[str, Any]]]"
test_spam_branch_is_ignored,"Callable[[_],None]"
get_body,"Callable[[_, str],Dict[str, str]]"
fixture_name,str
basic_test,"Callable[[_, str, str, str, str, bool, Union[str, None]],None]"
fixture_name,str
stream_name,str
expected_topic,str
expected_content,str
send_stream,bool
test_user_specified_branches,"Callable[[_],None]"
test_user_specified_stream,"Callable[[_],None]"
test_legacy_hook,"Callable[[_],None]"
test_push_multiple_commits,"Callable[[_],None]"
test_issues_opened,"Callable[[_],None]"
test_issue_comment,"Callable[[_],None]"
test_issues_closed,"Callable[[_],None]"
test_pull_request_opened,"Callable[[_],None]"
test_pull_request_closed,"Callable[[_],None]"
test_pull_request_synchronize,"Callable[[_],None]"
test_pull_request_comment,"Callable[[_],None]"
test_pull_request_comment_user_specified_stream,"Callable[[_],None]"
test_commit_comment,"Callable[[_],None]"
test_commit_comment_line,"Callable[[_],None]"
test_spam_branch_is_ignored,"Callable[[_],None]"
get_body,"Callable[[_, str],Dict[str, str]]"
fixture_name,str
basic_test,"Callable[[_, str, str, str, str, bool, Union[str, None]],None]"
fixture_name,str
stream_name,str
expected_topic,str
expected_content,str
send_stream,bool
test_user_specified_branches,"Callable[[_],None]"
test_user_specified_stream,"Callable[[_],None]"
test_push_multiple_commits,"Callable[[_],None]"
test_push_multiple_committers,"Callable[[_],None]"
test_push_multiple_committers_with_others,"Callable[[_],None]"
test_legacy_hook,"Callable[[_],None]"
test_issues_opened,"Callable[[_],None]"
test_issue_comment,"Callable[[_],None]"
test_issues_closed,"Callable[[_],None]"
test_pull_request_opened,"Callable[[_],None]"
test_pull_request_closed,"Callable[[_],None]"
test_pull_request_synchronize,"Callable[[_],None]"
test_pull_request_comment,"Callable[[_],None]"
test_pull_request_comment_user_specified_stream,"Callable[[_],None]"
test_commit_comment,"Callable[[_],None]"
test_commit_comment_line,"Callable[[_],None]"
flexible_boolean,"Callable[[str],bool]"
boolean,str
is_test_repository,"Callable[[Mapping[str, Any]],bool]"
github_pull_request_content,"Callable[[Mapping[str, Any]],str]"
github_issues_content,"Callable[[Mapping[str, Any]],str]"
github_object_commented_content,"Callable[[Mapping[str, Any], str],str]"
type,str
get_pull_request_or_issue_action,"Callable[[Mapping[str, Any]],str]"
get_pull_request_or_issue_subject,"Callable[[Mapping[str, Any], Mapping[str, Any], str],str]"
type,str
github_generic_subject,"Callable[[str, str, Mapping[str, Any]],str]"
noun,str
topic_focus,str
api_github_v1,"Callable[[UserProfile, str, Mapping[str, Any], str, str],Tuple[str, str, str]]"
user_profile,UserProfile
event,str
branches,str
stream,str
kwargs,Any
api_github_v2,"Callable[[UserProfile, str, Mapping[str, Any], str, str, str, str, Union[str, None]],Tuple[str, str, str]]"
user_profile,UserProfile
event,str
branches,str
default_stream,str
commit_stream,str
issue_stream,str
api_github_landing,"Callable[[HttpRequest, UserProfile, str, Mapping[str, Any], str, str, int, str, str, bool, bool, bool, bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
event,str
branches,str
stream,str
version,int
commit_stream,str
issue_stream,str
exclude_pull_requests,bool
exclude_issues,bool
exclude_commits,bool
emphasize_branch_in_topic,bool
build_message_from_gitlog,"Callable[[UserProfile, str, str, List[Dict[str, str]], str, str, str, str, Union[str, None], Union[str, None], Union[bool, None]],Tuple[str, str]]"
user_profile,UserProfile
name,str
ref,str
commits,"List[Dict[str, str]]"
before,str
after,str
url,str
pusher,str
_transform_commits_list_to_common_format,"Callable[[List[Dict[str, Any]]],List[Dict[str, str]]]"
commits,"List[Dict[str, Any]]"
test_splunk_search_one_result,"Callable[[_],None]"
test_splunk_short_search_name,"Callable[[_],None]"
test_splunk_long_search_name,"Callable[[_],None]"
test_splunk_missing_results_link,"Callable[[_],None]"
test_splunk_missing_search_name,"Callable[[_],None]"
test_splunk_missing_host,"Callable[[_],None]"
test_splunk_missing_source,"Callable[[_],None]"
test_splunk_missing_raw,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_splunk_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_traffic_message,"Callable[[_],None]"
test_chat_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_gosquared_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Dict[str, Any]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Dict[str, Any]]"
test_ping_event,"Callable[[_],None]"
test_ping_organization_event,"Callable[[_],None]"
test_push_delete_branch,"Callable[[_],None]"
test_push_local_branch_without_commits,"Callable[[_],None]"
test_push_1_commit,"Callable[[_],None]"
test_push_1_commit_without_username,"Callable[[_],None]"
test_push_1_commit_filtered_by_branches,"Callable[[_],None]"
test_push_multiple_comitters,"Callable[[_],None]"
test_push_multiple_comitters_with_others,"Callable[[_],None]"
test_push_multiple_comitters_filtered_by_branches,"Callable[[_],None]"
test_push_multiple_comitters_with_others_filtered_by_branches,"Callable[[_],None]"
test_push_50_commits,"Callable[[_],None]"
test_push_50_commits_filtered_by_branches,"Callable[[_],None]"
test_commit_comment_msg,"Callable[[_],None]"
test_create_msg,"Callable[[_],None]"
test_delete_msg,"Callable[[_],None]"
test_deployment_msg,"Callable[[_],None]"
test_deployment_status_msg,"Callable[[_],None]"
test_fork_msg,"Callable[[_],None]"
test_issue_comment_msg,"Callable[[_],None]"
test_issue_comment_deleted_msg,"Callable[[_],None]"
test_issue_comment_msg_with_custom_topic_in_url,"Callable[[_],None]"
test_issue_msg,"Callable[[_],None]"
test_issue_msg_with_custom_topic_in_url,"Callable[[_],None]"
test_membership_msg,"Callable[[_],None]"
test_member_msg,"Callable[[_],None]"
test_pull_request_opened_msg,"Callable[[_],None]"
test_pull_request_opened_with_preassigned_assignee_msg,"Callable[[_],None]"
test_pull_request_opened_msg_with_custom_topic_in_url,"Callable[[_],None]"
test_pull_request_synchronized_msg,"Callable[[_],None]"
test_pull_request_closed_msg,"Callable[[_],None]"
test_pull_request_closed_msg_with_custom_topic_in_url,"Callable[[_],None]"
test_pull_request_merged_msg,"Callable[[_],None]"
test_public_msg,"Callable[[_],None]"
test_wiki_pages_msg,"Callable[[_],None]"
test_watch_msg,"Callable[[_],None]"
test_repository_msg,"Callable[[_],None]"
test_team_add_msg,"Callable[[_],None]"
test_release_msg,"Callable[[_],None]"
test_page_build_msg,"Callable[[_],None]"
test_status_msg,"Callable[[_],None]"
test_status_with_target_url_msg,"Callable[[_],None]"
test_pull_request_review_msg,"Callable[[_],None]"
test_pull_request_review_msg_with_custom_topic_in_url,"Callable[[_],None]"
test_pull_request_review_comment_msg,"Callable[[_],None]"
test_pull_request_review_comment_with_custom_topic_in_url,"Callable[[_],None]"
test_push_tag_msg,"Callable[[_],None]"
test_pull_request_edited_msg,"Callable[[_],None]"
test_pull_request_assigned_msg,"Callable[[_],None]"
test_pull_request_assigned_msg_with_custom_topic_in_url,"Callable[[_],None]"
test_pull_request_unassigned_msg,"Callable[[_],None]"
test_pull_request_review_requested_msg,"Callable[[_],None]"
test_pull_request_review_requested_singular_key_msg,"Callable[[_],None]"
test_pull_request_review_requested_multiple_reviwers_msg,"Callable[[_],None]"
test_pull_request_review_requested_with_custom_topic_in_url,"Callable[[_],None]"
test_pull_request_labeled_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_pull_request_unlabeled_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_pull_request_request_review_remove_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_push_1_commit_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_push_50_commits_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_push_multiple_comitters_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_push_multiple_comitters_with_others_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
get_opened_or_update_pull_request_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_assigned_or_unassigned_pull_request_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_closed_pull_request_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_membership_body,"Callable[[Dict[str, Any]],str]"
get_member_body,"Callable[[Dict[str, Any]],str]"
get_issue_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_issue_comment_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_fork_body,"Callable[[Dict[str, Any]],str]"
get_deployment_body,"Callable[[Dict[str, Any]],str]"
get_change_deployment_status_body,"Callable[[Dict[str, Any]],str]"
get_create_or_delete_body,"Callable[[Dict[str, Any], str],str]"
action,str
get_commit_comment_body,"Callable[[Dict[str, Any]],str]"
get_push_tags_body,"Callable[[Dict[str, Any]],str]"
get_push_commits_body,"Callable[[Dict[str, Any]],str]"
get_public_body,"Callable[[Dict[str, Any]],str]"
get_wiki_pages_body,"Callable[[Dict[str, Any]],str]"
get_watch_body,"Callable[[Dict[str, Any]],str]"
get_repository_body,"Callable[[Dict[str, Any]],str]"
get_add_team_body,"Callable[[Dict[str, Any]],str]"
get_release_body,"Callable[[Dict[str, Any]],str]"
get_page_build_body,"Callable[[Dict[str, Any]],str]"
get_status_body,"Callable[[Dict[str, Any]],str]"
get_pull_request_review_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_pull_request_review_comment_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_pull_request_review_requested_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_ping_body,"Callable[[Dict[str, Any]],str]"
get_repository_name,"Callable[[Dict[str, Any]],str]"
get_organization_name,"Callable[[Dict[str, Any]],str]"
get_sender_name,"Callable[[Dict[str, Any]],str]"
get_branch_name_from_ref,"Callable[[str],str]"
ref_string,str
get_tag_name_from_ref,"Callable[[str],str]"
ref_string,str
is_commit_push_event,"Callable[[Dict[str, Any]],bool]"
get_subject_based_on_type,"Callable[[Dict[str, Any], str],str]"
event,str
api_github_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any], str, Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
branches,str
get_event,"Callable[[HttpRequest, Dict[str, Any], str],Union[str, None]]"
request,HttpRequest
branches,str
get_body_function_based_on_type,"Callable[[str],Any]"
type,str
test_short_message,"Callable[[_],None]"
test_long_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_papertrail_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_sample,"Callable[[_],None]"
test_reviews,"Callable[[_],None]"
test_reviews_with_topic,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
test_convert_bold,"Callable[[_],None]"
test_convert_italics,"Callable[[_],None]"
test_convert_strikethrough,"Callable[[_],None]"
api_appfollow_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
convert_markdown,"Callable[[str],str]"
text,str
get_body,"Callable[[_, str],Dict[str, Any]]"
fixture_name,str
do_test,"Callable[[_, Union[str, None], Union[str, None]],None]"
test_subject,"Callable[[_],None]"
test_long_subject,"Callable[[_],None]"
test_content,"Callable[[_],None]"
truncate,"Callable[[str, int],str]"
string,str
length,int
api_zendesk_webhook,"Callable[[HttpRequest, UserProfile, str, str, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
ticket_title,str
ticket_id,str
message,str
test_zabbix_alert_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_zabbix_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_subject_for_http_request,"Callable[[Dict[str, Any]],str]"
get_body_for_http_request,"Callable[[Dict[str, Any]],str]"
test_ticket_creation,"Callable[[_],None]"
test_status_change,"Callable[[_],None]"
test_status_change_fixture_without_required_key,"Callable[[_],None]"
test_priority_change,"Callable[[_],None]"
test_unknown_event_payload_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
note_change,"Callable[[_, str, str],None]"
fixture,str
note_type,str
test_private_note_change,"Callable[[_],None]"
test_public_note_change,"Callable[[_],None]"
test_inline_image,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
__getattr__,"Callable[[_, str],Any]"
field,str
property_name,"Callable[[str, int],str]"
property,str
index,int
parse_freshdesk_event,"Callable[[str],List[str]]"
event_string,str
format_freshdesk_note_message,"Callable[[TicketDict, List[str]],str]"
ticket,TicketDict
format_freshdesk_property_change_message,"Callable[[TicketDict, List[str]],str]"
ticket,TicketDict
format_freshdesk_ticket_creation_message,"Callable[[TicketDict],str]"
ticket,TicketDict
api_freshdesk_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_teamcity_success,"Callable[[_],None]"
test_teamcity_success_branch,"Callable[[_],None]"
test_teamcity_broken,"Callable[[_],None]"
test_teamcity_failure,"Callable[[_],None]"
test_teamcity_fixed,"Callable[[_],None]"
test_teamcity_personal,"Callable[[_],None]"
test_non_generic_payload_ignore_pm_notification,"Callable[[_],None]"
guess_zulip_user_from_teamcity,"Callable[[str, Realm],Union[UserProfile, None]]"
teamcity_username,str
realm,Realm
get_teamcity_property_value,"Callable[[List[Dict[str, str]], str],Union[str, None]]"
property_list,"List[Dict[str, str]]"
name,str
api_teamcity_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_alert,"Callable[[_],None]"
test_deployment,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_newrelic_webhook,"Callable[[HttpRequest, UserProfile, Union[Dict[str, Any], None], Union[Dict[str, Any], None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
alert,"Union[Dict[str, Any], None]"
deployment,"Union[Dict[str, Any], None]"
test_solano_message_001,"Callable[[_],None]"
test_solano_message_002,"Callable[[_],None]"
test_solano_message_received,"Callable[[_],None]"
test_solano_test_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_solano_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
handle_test_event,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
topic,str
test_codeship_build_in_testing_status_message,"Callable[[_],None]"
test_codeship_build_in_error_status_message,"Callable[[_],None]"
test_codeship_build_in_success_status_message,"Callable[[_],None]"
test_codeship_build_in_other_status_status_message,"Callable[[_],None]"
api_codeship_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_subject_for_http_request,"Callable[[Dict[str, Any]],str]"
get_body_for_http_request,"Callable[[Dict[str, Any]],str]"
get_status_message,"Callable[[Dict[str, Any]],str]"
test_basecamp_makes_doc_active,"Callable[[_],None]"
test_basecamp_makes_doc_archived,"Callable[[_],None]"
test_basecamp_makes_doc_changed_content,"Callable[[_],None]"
test_basecamp_makes_doc_changed_title,"Callable[[_],None]"
test_basecamp_makes_doc_publicized,"Callable[[_],None]"
test_basecamp_makes_doc_created,"Callable[[_],None]"
test_basecamp_makes_doc_trashed,"Callable[[_],None]"
test_basecamp_makes_doc_unarchived,"Callable[[_],None]"
test_basecamp_makes_questions_answer_archived,"Callable[[_],None]"
test_basecamp_makes_questions_answer_content_changed,"Callable[[_],None]"
test_basecamp_makes_questions_answer_created,"Callable[[_],None]"
test_basecamp_makes_questions_answer_trashed,"Callable[[_],None]"
test_basecamp_makes_questions_answer_unarchived,"Callable[[_],None]"
test_basecamp_makes_question_archived,"Callable[[_],None]"
test_basecamp_makes_question_created,"Callable[[_],None]"
test_basecamp_makes_question_trashed,"Callable[[_],None]"
test_basecamp_makes_question_unarchived,"Callable[[_],None]"
test_basecamp_makes_message_archived,"Callable[[_],None]"
test_basecamp_makes_message_content_change,"Callable[[_],None]"
test_basecamp_makes_message_created,"Callable[[_],None]"
test_basecamp_makes_message_title_change,"Callable[[_],None]"
test_basecamp_makes_message_trashed,"Callable[[_],None]"
test_basecamp_makes_message_unarchived,"Callable[[_],None]"
test_basecamp_makes_todo_list_created,"Callable[[_],None]"
test_basecamp_makes_todo_list_description_changed,"Callable[[_],None]"
test_basecamp_makes_todo_list_modified,"Callable[[_],None]"
test_basecamp_makes_todo_assignment_changed,"Callable[[_],None]"
test_basecamp_makes_todo_completed,"Callable[[_],None]"
test_basecamp_makes_todo_created,"Callable[[_],None]"
test_basecamp_makes_comment_created,"Callable[[_],None]"
_send_and_test_message,"Callable[[_, str, str],None]"
fixture_name,str
expected_message,str
api_basecamp_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_project_name,"Callable[[Dict[str, Any]],str]"
get_event_type,"Callable[[Dict[str, Any]],str]"
get_event_creator,"Callable[[Dict[str, Any]],str]"
get_subject_url,"Callable[[Dict[str, Any]],str]"
get_subject_title,"Callable[[Dict[str, Any]],str]"
get_verb,"Callable[[str, str],str]"
event,str
prefix,str
get_document_body,"Callable[[str, Dict[str, Any]],str]"
event,str
get_questions_answer_body,"Callable[[str, Dict[str, Any]],str]"
event,str
get_comment_body,"Callable[[str, Dict[str, Any]],str]"
event,str
get_questions_body,"Callable[[str, Dict[str, Any]],str]"
event,str
get_message_body,"Callable[[str, Dict[str, Any]],str]"
event,str
get_todo_list_body,"Callable[[str, Dict[str, Any]],str]"
event,str
get_todo_body,"Callable[[str, Dict[str, Any]],str]"
event,str
get_generic_body,"Callable[[str, Dict[str, Any], str, str],str]"
event,str
prefix,str
template,str
test_transifex_reviewed_message,"Callable[[_],None]"
test_transifex_translated_message,"Callable[[_],None]"
get_body,"Callable[[_, str],Dict[str, Any]]"
fixture_name,str
api_transifex_webhook,"Callable[[HttpRequest, UserProfile, str, str, str, Union[int, None], Union[int, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
project,str
resource,str
language,str
test_appveyor_build_success_message,"Callable[[_],None]"
test_appveyor_build_failure_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_appveyor_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_subject_for_http_request,"Callable[[Dict[str, Any]],str]"
get_body_for_http_request,"Callable[[Dict[str, Any]],str]"
test_bitbucket2_on_push_event,"Callable[[_],None]"
test_bitbucket2_on_push_commits_multiple_committers,"Callable[[_],None]"
test_bitbucket2_on_push_commits_multiple_committers_with_others,"Callable[[_],None]"
test_bitbucket2_on_push_commits_multiple_committers_filtered_by_branches,"Callable[[_],None]"
test_bitbucket2_on_push_commits_multiple_committers_with_others_filtered_by_branches,"Callable[[_],None]"
test_bitbucket2_on_push_event_filtered_by_branches,"Callable[[_],None]"
test_bitbucket2_on_push_commits_above_limit_event,"Callable[[_],None]"
test_bitbucket2_on_push_commits_above_limit_filtered_by_branches,"Callable[[_],None]"
test_bitbucket2_on_force_push_event,"Callable[[_],None]"
test_bitbucket2_on_force_push_event_filtered_by_branches,"Callable[[_],None]"
test_bitbucket2_on_remove_branch_event,"Callable[[_],None]"
test_bitbucket2_on_fork_event,"Callable[[_],None]"
test_bitbucket2_on_commit_comment_created_event,"Callable[[_],None]"
test_bitbucket2_on_commit_status_changed_event,"Callable[[_],None]"
test_bitbucket2_on_issue_created_event,"Callable[[_],None]"
test_bitbucket2_on_issue_created_with_custom_topic_in_url,"Callable[[_],None]"
test_bitbucket2_on_issue_updated_event,"Callable[[_],None]"
test_bitbucket2_on_issue_commented_event,"Callable[[_],None]"
test_bitbucket2_on_issue_commented_with_custom_topic_in_url,"Callable[[_],None]"
test_bitbucket2_on_pull_request_created_event,"Callable[[_],None]"
test_bitbucket2_on_pull_request_created_with_custom_topic_in_url,"Callable[[_],None]"
test_bitbucket2_on_pull_request_updated_event,"Callable[[_],None]"
test_bitbucket2_on_pull_request_approved_event,"Callable[[_],None]"
test_bitbucket2_on_pull_request_approved_with_custom_topic_in_url,"Callable[[_],None]"
test_bitbucket2_on_pull_request_unapproved_event,"Callable[[_],None]"
test_bitbucket2_on_pull_request_declined_event,"Callable[[_],None]"
test_bitbucket2_on_pull_request_fulfilled_event,"Callable[[_],None]"
test_bitbucket2_on_pull_request_comment_created_event,"Callable[[_],None]"
test_bitbucket2_on_pull_request_comment_created_with_custom_topic_in_url,"Callable[[_],None]"
test_bitbucket2_on_pull_request_comment_updated_event,"Callable[[_],None]"
test_bitbucket2_on_pull_request_comment_updated_with_custom_topic_in_url,"Callable[[_],None]"
test_bitbucket2_on_pull_request_comment_deleted_event,"Callable[[_],None]"
test_bitbucket2_on_repo_updated_event,"Callable[[_],None]"
test_bitbucket2_on_push_one_tag_event,"Callable[[_],None]"
test_bitbucket2_on_push_remove_tag_event,"Callable[[_],None]"
test_bitbucket2_on_push_more_than_one_tag_event,"Callable[[_],None]"
test_bitbucket2_on_more_than_one_push_event,"Callable[[_],None]"
test_bitbucket2_on_more_than_one_push_event_filtered_by_branches,"Callable[[_],None]"
test_bitbucket2_on_more_than_one_push_event_filtered_by_branches_ignore,"Callable[[_],None]"
test_bitbucket2_on_push_event_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_bitbucket2_on_push_commits_above_limit_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_bitbucket2_on_force_push_event_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_bitbucket2_on_push_multiple_committers_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_bitbucket2_on_push_multiple_committers_with_others_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_bitbucket2_on_push_without_changes_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
api_bitbucket2_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any], Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_subject_for_branch_specified_events,"Callable[[Dict[str, Any], Union[str, None]],str]"
get_subject,"Callable[[Dict[str, Any]],str]"
get_subject_based_on_type,"Callable[[Dict[str, Any], str],Any]"
type,str
get_type,"Callable[[HttpRequest, Dict[str, Any]],str]"
request,HttpRequest
get_body_based_on_type,"Callable[[str],Any]"
type,str
get_remove_branch_push_body,"Callable[[Dict[str, Any], Dict[str, Any]],str]"
get_force_push_body,"Callable[[Dict[str, Any], Dict[str, Any]],str]"
get_commit_author_name,"Callable[[Dict[str, Any]],str]"
get_normal_push_body,"Callable[[Dict[str, Any], Dict[str, Any]],str]"
get_fork_body,"Callable[[Dict[str, Any]],str]"
get_commit_comment_body,"Callable[[Dict[str, Any]],str]"
get_commit_status_changed_body,"Callable[[Dict[str, Any]],str]"
get_issue_commented_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_issue_action_body,"Callable[[Dict[str, Any], str, Union[bool, None]],str]"
action,str
get_pull_request_action_body,"Callable[[Dict[str, Any], str, Union[bool, None]],str]"
action,str
get_pull_request_created_or_updated_body,"Callable[[Dict[str, Any], str, Union[bool, None]],str]"
action,str
get_pull_request_comment_created_action_body,"Callable[[Dict[str, Any], Union[bool, None]],str]"
get_pull_request_deleted_or_updated_comment_action_body,"Callable[[Dict[str, Any], str, Union[bool, None]],str]"
action,str
get_pull_request_comment_action_body,"Callable[[Dict[str, Any], str, Union[bool, None]],str]"
action,str
get_push_tag_body,"Callable[[Dict[str, Any], Dict[str, Any]],str]"
get_repo_updated_body,"Callable[[Dict[str, Any]],str]"
get_pull_request_url,"Callable[[Dict[str, Any]],str]"
get_repository_url,"Callable[[Dict[str, Any]],str]"
get_repository_name,"Callable[[Dict[str, Any]],str]"
get_repository_full_name,"Callable[[Dict[str, Any]],str]"
get_user_display_name,"Callable[[Dict[str, Any]],str]"
get_user_username,"Callable[[Dict[str, Any]],str]"
test_static_text_message,"Callable[[_],None]"
test_case_updated_message,"Callable[[_],None]"
test_unicode_text_italian,"Callable[[_],None]"
test_unicode_text_japanese,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_deskdotcom_webhook,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
data,str
test_push,"Callable[[_],None]"
test_push_multiple_committers,"Callable[[_],None]"
test_push_multiple_committers_filtered_by_branches,"Callable[[_],None]"
test_push_filtered_by_branches,"Callable[[_],None]"
test_push_commits_more_than_limits,"Callable[[_],None]"
test_push_commits_more_than_limits_filtered_by_branches,"Callable[[_],None]"
test_new_branch,"Callable[[_],None]"
test_pull_request_opened,"Callable[[_],None]"
test_pull_request_opened_with_custom_topic_in_url,"Callable[[_],None]"
test_pull_request_closed,"Callable[[_],None]"
test_pull_request_merged,"Callable[[_],None]"
test_push_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_push_commits_more_than_limits_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
test_push_multiple_committers_filtered_by_branches_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
format_push_event,"Callable[[Dict[str, Any]],str]"
format_new_branch_event,"Callable[[Dict[str, Any]],str]"
format_pull_request_event,"Callable[[Dict[str, Any], Union[bool, None]],str]"
api_gogs_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any], Union[str, None], Union[str, None]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_groove_ticket_started,"Callable[[_],None]"
test_groove_ticket_assigned_agent_only,"Callable[[_],None]"
test_groove_ticket_assigned_agent_and_group,"Callable[[_],None]"
test_groove_ticket_assigned_group_only,"Callable[[_],None]"
test_groove_ticket_assigned_no_one,"Callable[[_],None]"
test_groove_agent_replied,"Callable[[_],None]"
test_groove_customer_replied,"Callable[[_],None]"
test_groove_note_added,"Callable[[_],None]"
test_groove_ticket_state_changed,"Callable[[_],None]"
test_groove_malformed_payload,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
ticket_started_body,"Callable[[Dict[str, Any]],str]"
agent_replied_body,"Callable[[Dict[str, Any]],str]"
customer_replied_body,"Callable[[Dict[str, Any]],str]"
note_added_body,"Callable[[Dict[str, Any]],str]"
api_groove_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_pingdom_from_up_to_down_http_check_message,"Callable[[_],None]"
test_pingdom_from_up_to_down_smtp_check_message,"Callable[[_],None]"
test_pingdom_from_up_to_down_imap_check_message,"Callable[[_],None]"
test_pingdom_from_down_to_up_imap_check_message,"Callable[[_],None]"
api_pingdom_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_subject_for_http_request,"Callable[[Dict[str, Any]],str]"
get_body_for_http_request,"Callable[[Dict[str, Any]],str]"
get_check_type,"Callable[[Dict[str, Any]],str]"
test_message_candidate_hired,"Callable[[_],None]"
test_message_candidate_rejected,"Callable[[_],None]"
test_message_candidate_stage_change,"Callable[[_],None]"
test_message_prospect_created,"Callable[[_],None]"
test_ping_message_ignore,"Callable[[_, MagicMock],None]"
check_send_webhook_message_mock,MagicMock
get_body,"Callable[[_, str],str]"
fixture_name,str
dict_list_to_string,"Callable[[List[Any]],str]"
message_creator,"Callable[[str, Dict[str, Any]],str]"
action,str
api_greenhouse_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_zapier_when_subject_and_body_are_correct,"Callable[[_],None]"
test_zapier_when_topic_and_body_are_correct,"Callable[[_],None]"
test_zapier_weather_update,"Callable[[_],None]"
api_zapier_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_airbrake_error_message,"Callable[[_],None]"
api_airbrake_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_subject,"Callable[[Dict[str, Any]],str]"
get_body,"Callable[[Dict[str, Any]],str]"
test_comment,"Callable[[_],None]"
test_new_app,"Callable[[_],None]"
test_get_empty_value,"Callable[[_],None]"
test_no_subject_type,"Callable[[_],None]"
test_error_fixed,"Callable[[_],None]"
test_error_reopened,"Callable[[_],None]"
test_error_regressed,"Callable[[_],None]"
subject_types,"Dict[str, List[List[str]]]"
get_value,"Callable[[Dict[str, Any], str],str]"
key,str
format_object,"Callable[[Dict[str, Any], str, str],str]"
subject_type,str
message,str
keys,List[List[str]]
url,str
api_opbeat_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_beeminder_derail,"Callable[[_, Any],None]"
time,Any
test_beeminder_derail_worried,"Callable[[_, Any],None]"
time,Any
get_body,"Callable[[_, str],str]"
fixture_name,str
get_time,"Callable[[Dict[str, Any]],Any]"
api_beeminder_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_status_changed_message,"Callable[[_],None]"
test_comment_added_to_error_message,"Callable[[_],None]"
test_error_assigned_to_user_message,"Callable[[_],None]"
test_one_minute_followup_error_message,"Callable[[_],None]"
test_hourly_followup_error_message,"Callable[[_],None]"
test_new_error_message,"Callable[[_],None]"
test_reoccurred_error_message,"Callable[[_],None]"
test_no_event_type_message,"Callable[[_],None]"
test_unimplemented_notification_feature,"Callable[[_],None]"
test_unimplemented_activity_feature,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_raygun_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
make_user_stats_chunk,"Callable[[Dict[str, Any]],str]"
make_time_chunk,"Callable[[Dict[str, Any]],str]"
make_message_chunk,"Callable[[str],str]"
message,str
make_app_info_chunk,"Callable[[Dict[str, str]],str]"
notification_message_follow_up,"Callable[[Dict[str, Any]],str]"
notification_message_error_occurred,"Callable[[Dict[str, Any]],str]"
compose_notification_message,"Callable[[Dict[str, Any]],str]"
activity_message,"Callable[[Dict[str, Any]],str]"
compose_activity_message,"Callable[[Dict[str, Any]],str]"
parse_time,"Callable[[str],str]"
timestamp,str
test_trigger,"Callable[[_],None]"
test_unacknowledge,"Callable[[_],None]"
test_resolved,"Callable[[_],None]"
test_auto_resolved,"Callable[[_],None]"
test_acknowledge,"Callable[[_],None]"
test_no_subject,"Callable[[_],None]"
test_bad_message,"Callable[[_],None]"
test_unknown_message_type,"Callable[[_],None]"
send_raw_pagerduty_json,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],None]"
request,HttpRequest
user_profile,UserProfile
send_formated_pagerduty,"Callable[[HttpRequest, UserProfile, str, Dict[str, Any]],None]"
request,HttpRequest
user_profile,UserProfile
message_type,str
api_pagerduty_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Iterable[Dict[str, Any]]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Iterable[Dict[str, Any]]]"
test_accepted,"Callable[[_],None]"
test_commented,"Callable[[_],None]"
test_created,"Callable[[_],None]"
test_delivered,"Callable[[_],None]"
test_finished,"Callable[[_],None]"
test_moved,"Callable[[_],None]"
test_rejected,"Callable[[_],None]"
test_started,"Callable[[_],None]"
test_created_estimate,"Callable[[_],None]"
test_type_changed,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
test_accepted,"Callable[[_],None]"
test_commented,"Callable[[_],None]"
test_created,"Callable[[_],None]"
test_delivered,"Callable[[_],None]"
test_finished,"Callable[[_],None]"
test_moved,"Callable[[_],None]"
test_rejected,"Callable[[_],None]"
test_started,"Callable[[_],None]"
test_created_estimate,"Callable[[_],None]"
test_type_changed,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_pivotal_webhook_v3,"Callable[[HttpRequest, UserProfile],Tuple[str, str]]"
request,HttpRequest
user_profile,UserProfile
get_text,"Callable[[List[str]],str]"
api_pivotal_webhook_v5,"Callable[[HttpRequest, UserProfile],Tuple[str, str]]"
request,HttpRequest
user_profile,UserProfile
api_pivotal_webhook,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_ifttt_when_subject_and_body_are_correct,"Callable[[_],None]"
test_ifttt_when_topic_and_body_are_correct,"Callable[[_],None]"
test_ifttt_when_topic_is_missing,"Callable[[_],None]"
test_ifttt_when_content_is_missing,"Callable[[_],None]"
api_iftt_app_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_ansibletower_project_update_successful_message,"Callable[[_],None]"
test_ansibletower_project_update_failed_message,"Callable[[_],None]"
test_ansibletower_job_successful_multiple_hosts_message,"Callable[[_],None]"
test_ansibletower_job_successful_message,"Callable[[_],None]"
test_ansibletower_job_failed_message,"Callable[[_],None]"
test_ansibletower_job_failed_multiple_hosts_message,"Callable[[_],None]"
test_ansibletower_inventory_update_successful_message,"Callable[[_],None]"
test_ansibletower_inventory_update_failed_message,"Callable[[_],None]"
test_ansibletower_adhoc_command_successful_message,"Callable[[_],None]"
test_ansibletower_adhoc_command_failed_message,"Callable[[_],None]"
test_ansibletower_system_job_successful_message,"Callable[[_],None]"
test_ansibletower_system_job_failed_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_ansibletower_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
get_body,"Callable[[Dict[str, Any]],str]"
get_hosts_content,"Callable[[List[Dict[str, Any]]],str]"
hosts_data,"List[Dict[str, Any]]"
test_simplereq,"Callable[[_],None]"
test_req_with_title,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_homeassistant_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, str]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_travis_message,"Callable[[_],None]"
test_ignore_travis_pull_request_by_default,"Callable[[_],None]"
test_travis_pull_requests_are_not_ignored_when_applicable,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_travis_webhook,"Callable[[HttpRequest, UserProfile, bool, Dict[str, str]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
ignore_pull_requests,bool
test_file_updated,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
test_verification_request,"Callable[[_],None]"
api_dropbox_webhook,"Callable[[HttpRequest, UserProfile],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_crashlytics_verification_message,"Callable[[_],None]"
test_crashlytics_build_in_success_status,"Callable[[_],None]"
api_crashlytics_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_building_message,"Callable[[_],None]"
test_created_message,"Callable[[_],None]"
test_failed_message,"Callable[[_],None]"
test_locked_message,"Callable[[_],None]"
test_unlocked_message,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_netlify_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Iterable[Dict[str, Any]]]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
payload,"Dict[str, Iterable[Dict[str, Any]]]"
get_template,"Callable[[HttpRequest, Dict[str, Any]],str]"
request,HttpRequest
test_statuspage_incident,"Callable[[_],None]"
test_statuspage_incident_update,"Callable[[_],None]"
test_statuspage_component,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
get_incident_events_body,"Callable[[Dict[str, Any]],str]"
get_components_update_body,"Callable[[Dict[str, Any]],str]"
get_incident_topic,"Callable[[Dict[str, Any]],str]"
get_component_topic,"Callable[[Dict[str, Any]],str]"
api_statuspage_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any]],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
test_dialogflow_default,"Callable[[_],None]"
test_dialogflow_weather_app,"Callable[[_],None]"
test_dialogflow_alternate_result,"Callable[[_],None]"
test_dialogflow_error_status,"Callable[[_],None]"
test_dialogflow_exception,"Callable[[_],None]"
get_body,"Callable[[_, str],str]"
fixture_name,str
api_dialogflow_webhook,"Callable[[HttpRequest, UserProfile, Dict[str, Any], str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
email,str
notify,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
cleanup_event_queue,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
queue_id,str
get_events_internal,"Callable[[HttpRequest, BaseHandler, int],Union[HttpResponse, _RespondAsynchronously]]"
request,HttpRequest
handler,BaseHandler
user_profile_id,int
get_events,"Callable[[HttpRequest, UserProfile, BaseHandler],Union[HttpResponse, _RespondAsynchronously]]"
request,HttpRequest
user_profile,UserProfile
handler,BaseHandler
get_events_backend,"Callable[[HttpRequest, UserProfile, BaseHandler, Union[Client, None], Union[int, None], Union[List[str], None], bool, bool, bool, Union[str, None], bool, Iterable[Sequence[str]], int],Union[HttpResponse, _RespondAsynchronously]]"
request,HttpRequest
user_profile,UserProfile
handler,BaseHandler
queue_id,"Union[List[str], None]"
apply_markdown,bool
client_gravatar,bool
all_public_streams,bool
dont_block,bool
narrow,Iterable[Sequence[str]]
lifespan_secs,int
setup_tornado_rabbitmq,"Callable[[],None]"
create_tornado_application,"Callable[[int],tornado.web.Application]"
port,int
__init__,"Callable[[_, int, str, int, EventQueue, Union[Sequence[str], None], str, bool, bool, bool, int, Iterable[Sequence[str]]],None]"
user_profile_id,int
user_profile_email,str
realm_id,int
event_queue,EventQueue
event_types,"Union[Sequence[str], None]"
client_type_name,str
apply_markdown,bool
client_gravatar,bool
all_public_streams,bool
lifespan_secs,int
narrow,Iterable[Sequence[str]]
self._timeout_handle,Any
__repr__,"Callable[[_],str]"
from_dict,"Callable[[_, MutableMapping[str, Any]],ClientDescriptor]"
prepare_for_pickling,"Callable[[_],None]"
add_event,"Callable[[_, Dict[str, Any]],None]"
finish_current_handler,"Callable[[_],bool]"
accepts_event,"Callable[[_, Mapping[str, Any]],bool]"
accepts_messages,"Callable[[_],bool]"
idle,"Callable[[_, float],bool]"
now,float
connect_handler,"Callable[[_, int, str],None]"
handler_id,int
client_name,str
timeout_callback,"Callable[[],None]"
disconnect_handler,"Callable[[_, bool],None]"
client_closed,bool
cleanup,"Callable[[_],None]"
compute_full_event_type,"Callable[[Mapping[str, Any]],str]"
__init__,"Callable[[_, str],None]"
id,str
self.next_event_id,int
self.id,str
self.virtual_events,"Dict[str, Dict[str, Any]]"
from_dict,"Callable[[_, Dict[str, Any]],EventQueue]"
push,"Callable[[_, Dict[str, Any]],None]"
empty,"Callable[[_],bool]"
prune,"Callable[[_, int],None]"
through_id,int
contents,"Callable[[_],List[Dict[str, Any]]]"
contents,"List[Dict[str, Any]]"
virtual_id_map,"Dict[str, Dict[str, Any]]"
user_clients,"Dict[int, List[ClientDescriptor]]"
realm_clients_all_streams,"Dict[int, List[ClientDescriptor]]"
gc_hooks,"List[Callable[[int, ClientDescriptor, bool],None]]"
clear_client_event_queues_for_testing,"Callable[[],None]"
add_client_gc_hook,"Callable[[Callable[[int, ClientDescriptor, bool],None]],None]"
hook,"Callable[[int, ClientDescriptor, bool],None]"
get_client_descriptor,"Callable[[str],ClientDescriptor]"
queue_id,str
get_client_descriptors_for_user,"Callable[[int],List[ClientDescriptor]]"
user_profile_id,int
get_client_descriptors_for_realm_all_streams,"Callable[[int],List[ClientDescriptor]]"
realm_id,int
add_to_client_dicts,"Callable[[ClientDescriptor],None]"
client,ClientDescriptor
allocate_client_descriptor,"Callable[[MutableMapping[str, Any]],ClientDescriptor]"
do_gc_event_queues,"Callable[[AbstractSet[str], AbstractSet[int], AbstractSet[int]],None]"
filter_client_dict,"Callable[[MutableMapping[int, List[ClientDescriptor]], int],None]"
client_dict,"MutableMapping[int, List[ClientDescriptor]]"
key,int
gc_event_queues,"Callable[[int],None]"
port,int
persistent_queue_filename,"Callable[[int, bool],str]"
port,int
last,bool
dump_event_queues,"Callable[[int],None]"
port,int
load_event_queues,"Callable[[int],None]"
port,int
send_restart_events,"Callable[[bool],None]"
immediate,bool
setup_event_queue,"Callable[[int],None]"
port,int
queue_id,str
dont_block,bool
last_event_id,int
user_profile_id,int
new_queue_data,"Union[MutableMapping[str, Any], None]"
user_profile_email,str
client_type_name,str
handler_id,int
request_event_queue,"Callable[[UserProfile, Client, bool, bool, int, Union[Iterable[str], None], bool, Iterable[Sequence[str]]],Union[str, None]]"
user_profile,UserProfile
user_client,Client
apply_markdown,bool
client_gravatar,bool
queue_lifespan_secs,int
event_types,"Union[Iterable[str], None]"
all_public_streams,bool
narrow,Iterable[Sequence[str]]
get_user_events,"Callable[[UserProfile, str, int],List[Dict[Any, Any]]]"
user_profile,UserProfile
queue_id,str
last_event_id,int
build_offline_notification,"Callable[[int, int],Dict[str, Any]]"
user_profile_id,int
message_id,int
missedmessage_hook,"Callable[[int, ClientDescriptor, bool],None]"
user_profile_id,int
client,ClientDescriptor
last_for_client,bool
receiver_is_off_zulip,"Callable[[int],bool]"
user_profile_id,int
maybe_enqueue_notifications,"Callable[[int, int, bool, bool, bool, bool, Union[str, None], bool, bool, Dict[str, bool]],Dict[str, bool]]"
user_profile_id,int
message_id,int
private_message,bool
mentioned,bool
stream_push_notify,bool
stream_email_notify,bool
always_push_notify,bool
idle,bool
get_client_info_for_message_event,"Callable[[Mapping[str, Any], Iterable[Mapping[str, Any]]],Dict[str, ClientInfo]]"
users,"Iterable[Mapping[str, Any]]"
is_sender_client,"Callable[[ClientDescriptor],bool]"
client,ClientDescriptor
user_profile_id,int
process_message_event,"Callable[[Mapping[str, Any], Iterable[Mapping[str, Any]]],None]"
users,"Iterable[Mapping[str, Any]]"
sender_id,int
message_id,int
message_type,str
sending_client,str
get_client_payload,"Callable[[bool, bool],Dict[str, Any]]"
apply_markdown,bool
client_gravatar,bool
user_profile_id,int
is_sender,bool
extra_data,"Union[Mapping[str, bool], None]"
process_event,"Callable[[Mapping[str, Any], Iterable[int]],None]"
process_userdata_event,"Callable[[Mapping[str, Any], Iterable[Mapping[str, Any]]],None]"
users,"Iterable[Mapping[str, Any]]"
process_message_update_event,"Callable[[Mapping[str, Any], Iterable[Mapping[str, Any]]],None]"
users,"Iterable[Mapping[str, Any]]"
maybe_enqueue_notifications_for_message_update,"Callable[[UserProfile, int, str, Set[int], Set[int], Set[int], Set[int], Set[int], Set[int]],None]"
user_profile_id,UserProfile
message_id,int
stream_name,str
process_notification,"Callable[[Mapping[str, Any]],None]"
users,"Union[List[int], List[Mapping[str, Any]]]"
send_notification_http,"Callable[[Realm, Mapping[str, Any]],None]"
realm,Realm
send_event,"Callable[[Realm, Mapping[str, Any], Union[Iterable[int], Iterable[Mapping[str, Any]]]],None]"
realm,Realm
users,"Union[Iterable[int], Iterable[Mapping[str, Any]]]"
get_handler_by_id,"Callable[[int],AsyncDjangoHandler]"
handler_id,int
allocate_handler_id,"Callable[[AsyncDjangoHandler],int]"
handler,AsyncDjangoHandler
clear_handler_by_id,"Callable[[int],None]"
handler_id,int
handler_stats_string,"Callable[[],str]"
finish_handler,"Callable[[int, str, List[Dict[str, Any]], bool],None]"
handler_id,int
event_queue_id,str
contents,"List[Dict[str, Any]]"
apply_markdown,bool
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
self._request_middleware,"Union[List[Callable[[HttpRequest],HttpResponse]], None]"
__repr__,"Callable[[_],str]"
load_middleware,"Callable[[_],None]"
self._request_middleware,"Union[List[Callable[[HttpRequest],HttpResponse]], None]"
self._view_middleware,"List[Callable[[HttpRequest, ViewFuncT, List[str], Dict[str, Any]],Union[HttpResponse, None]]]"
self._template_response_middleware,"List[Callable[[HttpRequest, HttpResponse],HttpResponse]]"
self._response_middleware,"List[Callable[[HttpRequest, HttpResponse],HttpResponse]]"
self._exception_middleware,"List[Callable[[HttpRequest, Exception],Union[HttpResponse, None]]]"
get,"Callable[[_],None]"
args,Any
kwargs,Any
self._new_cookies,List[http.cookie.SimpleCookie]
head,"Callable[[_],None]"
args,Any
kwargs,Any
post,"Callable[[_],None]"
args,Any
kwargs,Any
delete,"Callable[[_],None]"
args,Any
kwargs,Any
on_connection_close,"Callable[[_],None]"
get_response,"Callable[[_, HttpRequest],HttpResponse]"
request,HttpRequest
apply_response_middleware,"Callable[[_, HttpRequest, HttpResponse, resolvers.RegexURLResolver],HttpResponse]"
request,HttpRequest
response,HttpResponse
zulip_finish,"Callable[[_, Dict[str, Any], HttpRequest, bool],None]"
request,HttpRequest
apply_markdown,bool
get_tornado_port,"Callable[[Realm],int]"
realm,Realm
get_tornado_uri,"Callable[[Realm],str]"
realm,Realm
notify_tornado_queue_name,"Callable[[int],str]"
port,int
tornado_return_queue_name,"Callable[[int],str]"
port,int
_compare_salted_tokens,"Callable[[str, str],bool]"
token1,str
token2,str
connections,"Dict[Union[int, str], SocketConnection]"
register_connection,"Callable[[Union[int, str], SocketConnection],None]"
conn,SocketConnection
deregister_connection,"Callable[[SocketConnection],None]"
conn,SocketConnection
req_redis_key,"Callable[[str],str]"
req_id,str
__init__,"Callable[[_, int, str],None]"
status_code,int
err_msg,str
on_open,"Callable[[_, ConnectionInfo],None]"
info,ConnectionInfo
auth_timeout,"Callable[[],None]"
authenticate_client,"Callable[[_, Dict[str, Any]],None]"
results,"Dict[str, Dict[str, str]]"
on_message,"Callable[[_, str],None]"
msg_raw,str
on_close,"Callable[[_],None]"
respond_send_message,"Callable[[Mapping[str, Any]],None]"
get_sockjs_router,"Callable[[int],sockjs.tornado.SockJSRouter]"
port,int
__init__,"Callable[[_, str, str, str, _, bool],None]"
host_url,str
sockjs_url,str
sender_email,str
validate_ssl,bool
run_kwargs,Any
_get_cookie_header,"Callable[[_, Dict[Any, Any]],str]"
_websocket_auth,"Callable[[_, Dict[str, Dict[str, str]], SimpleCookie],Generator[str, str, None]]"
queue_events_data,"Dict[str, Dict[str, str]]"
cookies,SimpleCookie
_get_queue_events,"Callable[[_, str],Dict[str, str]]"
cookies_header,str
send_message,"Callable[[_, str, str, str, str, str, str],Generator[str, WebSocketClientConnection, None]]"
client,str
type,str
subject,str
stream,str
private_message_recepient,str
content,str
run,"Callable[[_],None]"
_get_websocket_url,"Callable[[_],str]"
get_descriptor_by_handler_id,"Callable[[int],Union[ClientDescriptor, None]]"
handler_id,int
set_descriptor_by_handler_id,"Callable[[int, ClientDescriptor],None]"
handler_id,int
client_descriptor,ClientDescriptor
clear_descriptor_by_handler_id,"Callable[[int, ClientDescriptor],None]"
handler_id,int
client_descriptor,ClientDescriptor
__init__,"Callable[[_, str],None]"
queue_id,str
self.queue_id,str
msg_format,"Callable[[],str]"
instrument_tornado_ioloop,"Callable[[],None]"
__init__,"Callable[[_],None]"
self._times,"List[Tuple[float, float]]"
__getattr__,"Callable[[_, str],Any]"
name,str
poll,"Callable[[_, float],Any]"
timeout,float
set_loglevel,"Callable[[_, _],None]"
handler400,"Callable[[HttpRequest, Exception],HttpResponse]"
request,HttpRequest
exception,Exception
get_forward_address,"Callable[[],str]"
set_forward_address,"Callable[[str],None]"
forward_address,str
send_email_smtp,"Callable[[_, EmailMultiAlternatives],None]"
email,EmailMultiAlternatives
log_email,"Callable[[_, EmailMultiAlternatives],None]"
email,EmailMultiAlternatives
send_messages,"Callable[[_, List[EmailMultiAlternatives]],int]"
POST_MIGRATION_CACHE_FLUSHING,bool
ALWAYS_SEND_ALL_HOTSPOTS,bool
get_secret,"Callable[[str, Union[Any, None], bool],Union[Any, None]]"
key,str
development_only,bool
get_config,"Callable[[str, str, Union[Any, None]],Union[Any, None]]"
section,str
key,str
auth_enabled_helper,"Callable[[List[str], Union[Realm, None]],bool]"
ldap_auth_enabled,"Callable[[Union[Realm, None]],bool]"
email_auth_enabled,"Callable[[Union[Realm, None]],bool]"
password_auth_enabled,"Callable[[Union[Realm, None]],bool]"
dev_auth_enabled,"Callable[[Union[Realm, None]],bool]"
google_auth_enabled,"Callable[[Union[Realm, None]],bool]"
github_auth_enabled,"Callable[[Union[Realm, None]],bool]"
remote_auth_enabled,"Callable[[Union[Realm, None]],bool]"
any_oauth_backend_enabled,"Callable[[Union[Realm, None]],bool]"
require_email_format_usernames,"Callable[[Union[Realm, None]],bool]"
common_get_active_user,"Callable[[str, Realm, Union[Dict[str, Any], None]],Union[UserProfile, None]]"
email,str
realm,Realm
return_data,"Union[Dict[str, Any], None]"
generate_dev_ldap_dir,"Callable[[str, int],Dict[str, Dict[str, Sequence[str]]]]"
mode,str
num_users,int
get_user,"Callable[[_, int],Union[UserProfile, None]]"
user_profile_id,int
authenticate,"Callable[[_, Union[str, None], Union[Realm, None], bool, Union[Dict[str, Any], None]],Union[UserProfile, None]]"
use_dummy_backend,bool
return_data,"Union[Dict[str, Any], None]"
authenticate,"Callable[[_, Union[str, None], Union[str, None], Union[Realm, None], Union[Dict[str, Any], None]],Union[UserProfile, None]]"
return_data,"Union[Dict[str, Any], None]"
authenticate,"Callable[[_, Union[str, None], Union[Realm, None], Union[Dict[str, Any], None]],Union[UserProfile, None]]"
return_data,"Union[Dict[str, Any], None]"
authenticate,"Callable[[_, Union[str, None], Union[Realm, None], Union[Dict[str, Any], None]],Union[UserProfile, None]]"
return_data,"Union[Dict[str, Any], None]"
email_belongs_to_ldap,"Callable[[Realm, str],bool]"
realm,Realm
email,str
has_perm,"Callable[[_, Union[UserProfile, None], Any, Any],bool]"
perm,Any
obj,Any
has_module_perms,"Callable[[_, Union[UserProfile, None], Union[str, None]],bool]"
get_all_permissions,"Callable[[_, Union[UserProfile, None], Any],Set[Any]]"
obj,Any
get_group_permissions,"Callable[[_, Union[UserProfile, None], Any],Set[Any]]"
obj,Any
django_to_ldap_username,"Callable[[_, str],str]"
username,str
ldap_to_django_username,"Callable[[_, str],str]"
username,str
__init__,"Callable[[_],None]"
authenticate,"Callable[[_, str, str, Union[Realm, None], Union[Dict[str, Any], None]],Union[UserProfile, None]]"
username,str
password,str
return_data,"Union[Dict[str, Any], None]"
get_or_build_user,"Callable[[_, str, _LDAPUser],Tuple[UserProfile, bool]]"
username,str
ldap_user,_LDAPUser
authenticate,"Callable[[_, str, str, Union[Realm, None], Union[Dict[str, Any], None]],None]"
username,str
password,str
return_data,"Union[Dict[str, Any], None]"
authenticate,"Callable[[_, Union[str, None], Union[Realm, None], Union[Dict[str, Any], None]],Union[UserProfile, None]]"
return_data,"Union[Dict[str, Any], None]"
social_associate_user_helper,"Callable[[BaseAuth, Dict[str, Any]],Union[UserProfile, None]]"
backend,BaseAuth
args,Any
kwargs,Any
social_auth_associate_user,"Callable[[BaseAuth],Dict[str, Any]]"
backend,BaseAuth
args,Any
kwargs,Any
social_auth_finish,"Callable[[Any, Dict[str, Any], HttpResponse],Union[UserProfile, None]]"
backend,Any
response,HttpResponse
args,Any
kwargs,Any
args,Any
kwargs,Any
args,Any
kwargs,Any
user_data,"Callable[[_, str],Dict[str, str]]"
access_token,str
args,Any
kwargs,Any
environment,"Callable[[],Environment]"
options,Any
minified_js,"Callable[[str, str],str]"
sourcefile,str
csp_nonce,str
overlaps,"List[Tuple[int, str, Set[str]]]"
main,"Callable[[argparse.Namespace],None]"
main,"Callable[[argparse.Namespace],None]"
is_root,"Callable[[],bool]"
assert_not_running_as_root,"Callable[[],None]"
assert_running_as_root,"Callable[[bool],None]"
strip_lib_from_paths,bool
add_current_venv_cache,"Callable[[str],None]"
venv_name,str
main,"Callable[[argparse.Namespace],None]"
render_stats,"Callable[[HttpRequest, str, str, bool],HttpRequest]"
request,HttpRequest
data_url_suffix,str
target_name,str
for_installation,bool
stats,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
stats_for_realm,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
realm_str,str
get_chart_data_for_realm,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
realm_str,str
kwargs,Any
stats_for_installation,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
get_chart_data_for_installation,"Callable[[HttpRequest, UserProfile, str],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
chart_name,str
kwargs,Any
get_chart_data,"Callable[[HttpRequest, UserProfile, str, Union[int, None], Union[datetime, None], Union[datetime, None], Union[Realm, None], bool],HttpResponse]"
request,HttpRequest
user_profile,UserProfile
chart_name,str
for_installation,bool
subgroup_to_label,"Dict[CountStat, Dict[Union[str, None], str]]"
sort_by_totals,"Callable[[Dict[str, List[int]]],List[str]]"
value_arrays,"Dict[str, List[int]]"
sort_client_labels,"Callable[[Dict[str, Dict[str, List[int]]]],List[str]]"
data,"Dict[str, Dict[str, List[int]]]"
table_filtered_to_id,"Callable[[Type[BaseCount], int],QuerySet]"
key_id,int
client_label_map,"Callable[[str],str]"
name,str
rewrite_client_arrays,"Callable[[Dict[str, List[int]]],Dict[str, List[int]]]"
value_arrays,"Dict[str, List[int]]"
mapped_arrays,"Dict[str, List[int]]"
get_time_series_by_subgroup,"Callable[[CountStat, Type[BaseCount], int, List[datetime], Dict[Union[str, None], str], bool],Dict[str, List[int]]]"
stat,CountStat
key_id,int
subgroup_to_label,"Dict[Union[str, None], str]"
include_empty_subgroups,bool
value_dicts,"Dict[Union[str, None], Dict[datetime, int]]"
make_table,"Callable[[str, List[str], List[Any], bool],str]"
title,str
has_row_class,bool
fix_row,"Callable[[Any],Dict[str, Any]]"
row,Any
dictfetchall,"Callable[[connection.cursor],List[Dict[str, Any]]]"
get_realm_day_counts,"Callable[[],Dict[str, Dict[str, str]]]"
counts,"Dict[str, Dict[int, int]]"
format_count,"Callable[[int, Union[str, None]],str]"
cnt,int
realm_summary_table,"Callable[[Dict[str, float]],str]"
realm_admins,"Dict[str, List[str]]"
meets_goal,"Callable[[Dict[str, int]],bool]"
user_activity_intervals,"Callable[[],Tuple[mark_safe, Dict[str, float]]]"
sent_messages_report,"Callable[[str],str]"
realm,str
ad_hoc_queries,"Callable[[],List[Dict[str, str]]]"
get_page,"Callable[[str, List[str], str],Dict[str, str]]"
query,str
title,str
fix_rows,"Callable[[int, Union[Callable[[Realm],mark_safe], Callable[[datetime],str]]],None]"
i,int
fixup_func,"Union[Callable[[Realm],mark_safe], Callable[[datetime],str]]"
get_activity,"Callable[[HttpRequest],HttpResponse]"
request,HttpRequest
duration_content,mark_safe
counts_content,str
get_user_activity_records_for_realm,"Callable[[str, bool],QuerySet]"
realm,str
is_bot,bool
get_user_activity_records_for_email,"Callable[[str],List[QuerySet]]"
email,str
raw_user_activity_table,"Callable[[List[QuerySet]],str]"
row,"Callable[[QuerySet],List[Any]]"
record,QuerySet
get_user_activity_summary,"Callable[[List[QuerySet]],Dict[str, Dict[str, Any]]]"
summary,"Dict[str, Dict[str, Any]]"
update,"Callable[[str, QuerySet],None]"
action,str
record,QuerySet
format_date_for_activity_reports,"Callable[[Union[datetime, None]],str]"
user_activity_link,"Callable[[str],mark_safe]"
email,str
realm_activity_link,"Callable[[str],mark_safe]"
realm_str,str
realm_stats_link,"Callable[[str],mark_safe]"
realm_str,str
realm_client_table,"Callable[[Dict[str, Dict[str, Dict[str, Any]]]],str]"
user_summaries,"Dict[str, Dict[str, Dict[str, Any]]]"
user_activity_summary_table,"Callable[[Dict[str, Dict[str, Any]]],str]"
user_summary,"Dict[str, Dict[str, Any]]"
realm_user_summary_table,"Callable[[List[QuerySet], Set[str]],Tuple[Dict[str, Dict[str, Any]], str]]"
by_email,"Callable[[QuerySet],str]"
record,QuerySet
get_last_visit,"Callable[[Dict[str, Dict[str, datetime]], str],Union[datetime, None]]"
user_summary,"Dict[str, Dict[str, datetime]]"
k,str
get_count,"Callable[[Dict[str, Dict[str, str]], str],str]"
user_summary,"Dict[str, Dict[str, str]]"
k,str
is_recent,"Callable[[Union[datetime, None]],bool]"
by_used_time,"Callable[[Dict[str, Any]],str]"
get_realm_activity,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
realm_str,str
data,"List[Tuple[str, str]]"
get_user_activity,"Callable[[HttpRequest, str],HttpResponse]"
request,HttpRequest
email,str
data,"List[Tuple[str, str]]"
property,str
state,int
__str__,"Callable[[_],str]"
last_successful_fill,"Callable[[str],Union[datetime.datetime, None]]"
property,str
info,str
__str__,"Callable[[_],str]"
property,str
value,int
__str__,"Callable[[_],str]"
__str__,"Callable[[_],str]"
__str__,"Callable[[_],str]"
__str__,"Callable[[_],str]"
test_deterministic_settings,"Callable[[_],None]"
setUp,"Callable[[_],None]"
create_user,"Callable[[_],UserProfile]"
kwargs,Any
kwargs,Any
kwargs,Any
create_message,"Callable[[_, UserProfile, Recipient],Message]"
sender,UserProfile
recipient,Recipient
kwargs,Any
assertCountEquals,"Callable[[_, Type[BaseCount], int, Union[str, None], Union[str, None], datetime, Union[Realm, None]],None]"
value,int
end_time,datetime
assertTableState,"Callable[[_, Type[BaseCount], List[str], List[List[object]]],None]"
arg_values,List[List[object]]
make_dummy_count_stat,"Callable[[_, str],CountStat]"
property,str
assertFillStateEquals,"Callable[[_, CountStat, datetime, int],None]"
stat,CountStat
end_time,datetime
state,int
test_process_stat,"Callable[[_],None]"
test_bad_fill_to_time,"Callable[[_],None]"
test_process_logging_stat,"Callable[[_],None]"
test_process_dependent_stat,"Callable[[_],None]"
setUp,"Callable[[_],None]"
test_active_users_by_is_bot,"Callable[[_],None]"
test_messages_sent_by_is_bot,"Callable[[_],None]"
test_messages_sent_by_message_type,"Callable[[_],None]"
test_messages_sent_to_recipients_with_same_id,"Callable[[_],None]"
test_messages_sent_by_client,"Callable[[_],None]"
test_messages_sent_to_stream_by_is_bot,"Callable[[_],None]"
create_interval,"Callable[[_, UserProfile, timedelta, timedelta],None]"
user,UserProfile
start_offset,timedelta
end_offset,timedelta
test_1day_actives,"Callable[[_],None]"
test_15day_actives,"Callable[[_],None]"
test_minutes_active,"Callable[[_],None]"
test_no_aggregated_zeros,"Callable[[_],None]"
test_table_and_id_args,"Callable[[_],None]"
test_frequency,"Callable[[_],None]"
test_get_or_create,"Callable[[_],None]"
test_increment,"Callable[[_],None]"
test_aggregation,"Callable[[_],None]"
test_active_users_log_by_is_bot,"Callable[[_],None]"
test_invites_sent,"Callable[[_],None]"
assertInviteCountEquals,"Callable[[int],None]"
count,int
test_do_drop_all_analytics_tables,"Callable[[_],None]"
test_do_drop_single_stat,"Callable[[_],None]"
setUp,"Callable[[_],None]"
add_event,"Callable[[_, str, float, Union[UserProfile, None]],None]"
event_type,str
days_offset,float
test_user_deactivated_in_future,"Callable[[_],None]"
test_user_reactivated_in_future,"Callable[[_],None]"
test_user_active_then_deactivated_same_day,"Callable[[_],None]"
test_user_unactive_then_activated_same_day,"Callable[[_],None]"
test_user_active_then_deactivated_with_day_gap,"Callable[[_],None]"
test_user_deactivated_then_reactivated_with_day_gap,"Callable[[_],None]"
test_event_types,"Callable[[_],None]"
test_multiple_users_realms_and_bots,"Callable[[_],None]"
test_update_from_two_days_ago,"Callable[[_],None]"
test_empty_realm_or_user_with_no_relevant_activity,"Callable[[_],None]"
test_max_audit_entry_is_unrelated,"Callable[[_],None]"
test_simultaneous_unrelated_audit_entry,"Callable[[_],None]"
test_simultaneous_max_audit_entries_of_different_users,"Callable[[_],None]"
test_end_to_end_with_actions_dot_py,"Callable[[_],None]"
setUp,"Callable[[_],None]"
mark_audit_active,"Callable[[_, UserProfile, Union[datetime, None]],None]"
user,UserProfile
mark_15day_active,"Callable[[_, UserProfile, Union[datetime, None]],None]"
user,UserProfile
test_basic_boolean_logic,"Callable[[_],None]"
test_bots_not_counted,"Callable[[_],None]"
test_multiple_users_realms_and_times,"Callable[[_],None]"
test_end_to_end,"Callable[[_],None]"
test_stats,"Callable[[_],None]"
test_guest_user_cant_access_stats,"Callable[[_],None]"
test_stats_for_realm,"Callable[[_],None]"
test_stats_for_installation,"Callable[[_],None]"
setUp,"Callable[[_],None]"
data,"Callable[[_, int],List[int]]"
i,int
insert_data,"Callable[[_, CountStat, List[Union[str, None]], List[str]],None]"
stat,CountStat
realm_subgroups,"List[Union[str, None]]"
test_number_of_humans,"Callable[[_],None]"
test_messages_sent_over_time,"Callable[[_],None]"
test_messages_sent_by_message_type,"Callable[[_],None]"
test_messages_sent_by_client,"Callable[[_],None]"
test_include_empty_subgroups,"Callable[[_],None]"
test_start_and_end,"Callable[[_],None]"
test_min_length,"Callable[[_],None]"
test_non_existent_chart,"Callable[[_],None]"
test_analytics_not_running,"Callable[[_],None]"
test_get_chart_data_for_realm,"Callable[[_],None]"
test_get_chart_data_for_installation,"Callable[[_],None]"
test_last_successful_fill,"Callable[[_],None]"
test_sort_by_totals,"Callable[[_],None]"
test_sort_client_labels,"Callable[[_],None]"
test_time_range,"Callable[[_],None]"
test_map_arrays,"Callable[[_],None]"
compute_stats,"Callable[[int],None]"
log_level,int
user_counts,"Dict[str, Dict[str, int]]"
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
analyze_activity,"Callable[[Dict[str, Any]],None]"
add_arguments,"Callable[[_, CommandParser],None]"
parser,CommandParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
compute_activity,"Callable[[_, QuerySet],None]"
user_activity_objects,QuerySet
handle,"Callable[[_],None]"
args,Any
options,str
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
active_users,"Callable[[_, Realm],List[UserProfile]]"
realm,Realm
messages_sent_by,"Callable[[_, UserProfile, int],int]"
user,UserProfile
days_ago,int
total_messages,"Callable[[_, Realm, int],int]"
realm,Realm
days_ago,int
human_messages,"Callable[[_, Realm, int],int]"
realm,Realm
days_ago,int
api_messages,"Callable[[_, Realm, int],int]"
realm,Realm
days_ago,int
stream_messages,"Callable[[_, Realm, int],int]"
realm,Realm
days_ago,int
private_messages,"Callable[[_, Realm, int],int]"
realm,Realm
days_ago,int
group_private_messages,"Callable[[_, Realm, int],int]"
realm,Realm
days_ago,int
report_percentage,"Callable[[_, float, float, str],None]"
numerator,float
denominator,float
text,str
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
messages_sent_by,"Callable[[_, UserProfile, int],int]"
user,UserProfile
week,int
handle,"Callable[[_],None]"
args,Any
options,Any
create_user,"Callable[[_, str, str, bool, datetime, Realm],UserProfile]"
email,str
full_name,str
is_staff,bool
date_joined,datetime
realm,Realm
generate_fixture_data,"Callable[[_, CountStat, float, float, float, float, float, float, bool],List[int]]"
stat,CountStat
business_hours_base,float
non_business_hours_base,float
growth,float
autocorrelation,float
spikiness,float
holiday_rate,float
partial_sum,bool
handle,"Callable[[_],None]"
args,Any
options,Any
insert_fixture_data,"Callable[[CountStat, Mapping[Union[str, None], List[int]], Type[BaseCount]],None]"
stat,CountStat
fixture_data,"Mapping[Union[str, None], List[int]]"
realm_data,"Mapping[Union[str, None], List[int]]"
installation_data,"Mapping[Union[str, None], List[int]]"
user_data,"Mapping[Union[str, None], List[int]]"
stream_data,"Mapping[Union[str, None], List[int]]"
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,str
add_arguments,"Callable[[_, ArgumentParser],None]"
parser,ArgumentParser
handle,"Callable[[_],None]"
args,Any
options,Any
run_update_analytics_counts,"Callable[[_, Dict[str, Any]],None]"
time_range,"Callable[[datetime, datetime, str, Union[int, None]],List[datetime]]"
start,datetime
end,datetime
frequency,str
generate_time_series_data,"Callable[[int, float, float, float, float, float, float, str, bool, int],List[int]]"
days,int
business_hours_base,float
non_business_hours_base,float
growth,float
autocorrelation,float
spikiness,float
holiday_rate,float
frequency,str
partial_sum,bool
random_seed,int
__init__,"Callable[[_, str, DataCollector, str, Union[timedelta, None]],None]"
property,str
data_collector,DataCollector
frequency,str
__str__,"Callable[[_],str]"
__init__,"Callable[[_, str, Type[BaseCount], str],None]"
property,str
frequency,str
__init__,"Callable[[_, str, DataCollector, str, Union[timedelta, None], List[str]],None]"
property,str
data_collector,DataCollector
frequency,str
__init__,"Callable[[_, Type[BaseCount], Union[Callable[[str, datetime, datetime],int], None]],None]"
pull_function,"Union[Callable[[str, datetime, datetime],int], None]"
process_count_stat,"Callable[[CountStat, datetime],None]"
stat,CountStat
fill_to_time,datetime
do_update_fill_state,"Callable[[FillState, datetime, int],None]"
fill_state,FillState
end_time,datetime
state,int
do_fill_count_stat_at_hour,"Callable[[CountStat, datetime],None]"
stat,CountStat
end_time,datetime
do_delete_counts_at_hour,"Callable[[CountStat, datetime],None]"
stat,CountStat
end_time,datetime
do_aggregate_to_summary_table,"Callable[[CountStat, datetime],None]"
stat,CountStat
end_time,datetime
do_increment_logging_stat,"Callable[[Union[Realm, UserProfile, Stream], CountStat, Union[str, int, bool, None], datetime, int],None]"
stat,CountStat
event_time,datetime
increment,int
do_drop_all_analytics_tables,"Callable[[],None]"
do_drop_single_stat,"Callable[[str],None]"
property,str
do_pull_by_sql_query,"Callable[[str, datetime, datetime, str, Union[Tuple[models.Model, str], None]],int]"
property,str
start_time,datetime
end_time,datetime
query,str
group_by,"Union[Tuple[models.Model, str], None]"
sql_data_collector,"Callable[[Type[BaseCount], str, Union[Tuple[models.Model, str], None]],DataCollector]"
query,str
group_by,"Union[Tuple[models.Model, str], None]"
pull_function,"Callable[[str, datetime, datetime],int]"
property,str
start_time,datetime
end_time,datetime
do_pull_minutes_active,"Callable[[str, datetime, datetime],int]"
property,str
start_time,datetime
end_time,datetime
seconds_active,"Dict[Tuple[int, int], float]"
delete_messages_sent_to_stream_stat,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
clear_analytics_tables,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
clear_message_sent_by_message_type_values,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
setup,"Callable[[Any],None]"
app,Any
rebuild_pgroonga_index,"Callable[[StateApps, DatabaseSchemaEditor],None]"
apps,StateApps
schema_editor,DatabaseSchemaEditor
target_host,str
target_port,int
self.client,Any
modules,"List[Dict[str, Any]]"
methods,"DefaultDict[Edge, List[Method]]"
module_methods,"DefaultDict[str, Set[str]]"
callers,"DefaultDict[Tuple[str, str], Set[str]]"
_assert_validate_error,"Callable[[_, str, Union[str, None], Union[str, None], bool],None]"
error,str
check_indent,bool
test_is_django_block_tag,"Callable[[_],None]"
test_validate_vanilla_html,"Callable[[_],None]"
test_validate_handlebars,"Callable[[_],None]"
test_validate_comment,"Callable[[_],None]"
test_validate_django,"Callable[[_],None]"
test_validate_no_start_tag,"Callable[[_],None]"
test_validate_mismatched_tag,"Callable[[_],None]"
test_validate_bad_indentation,"Callable[[_],None]"
test_validate_state_depth,"Callable[[_],None]"
test_validate_incomplete_handlebars_tag_1,"Callable[[_],None]"
test_validate_incomplete_handlebars_tag_2,"Callable[[_],None]"
test_validate_incomplete_django_tag_1,"Callable[[_],None]"
test_validate_incomplete_django_tag_2,"Callable[[_],None]"
test_validate_incomplete_html_tag_1,"Callable[[_],None]"
test_validate_incomplete_html_tag_2,"Callable[[_],None]"
test_validate_empty_html_tag,"Callable[[_],None]"
test_code_blocks,"Callable[[_],None]"
test_anchor_blocks,"Callable[[_],None]"
test_tokenize,"Callable[[_],None]"
setUp,"Callable[[_],None]"
self.all_rules,"List[Dict[str, Any]]"
test_paths_in_rules,"Callable[[_],None]"
test_rule_patterns,"Callable[[_],None]"
test_basic_parse,"Callable[[_],None]"
test_same_line_comment,"Callable[[_],None]"
test_no_semicolon,"Callable[[_],None]"
test_empty_block,"Callable[[_],None]"
test_multi_line_selector,"Callable[[_],None]"
test_media_block,"Callable[[_],None]"
_assert_error,"Callable[[_, str, str],None]"
my_css,str
error,str
test_unexpected_end_brace,"Callable[[_],None]"
test_empty_section,"Callable[[_],None]"
test_missing_colon,"Callable[[_],None]"
test_unclosed_comment,"Callable[[_],None]"
test_missing_selectors,"Callable[[_],None]"
test_missing_value,"Callable[[_],None]"
test_disallow_comments_in_selectors,"Callable[[_],None]"
compare,"Callable[[_, str, str],None]"
a,str
b,str
test_pretty_print,"Callable[[_],None]"
test_get_safe_text,"Callable[[_],None]"
test_process_text,"Callable[[_],None]"
test_check_capitalization,"Callable[[_],None]"
test_get_tag_info,"Callable[[_],None]"
test_html_tag_tree,"Callable[[_],None]"
test_html_branches,"Callable[[_],None]"
test_build_id_dict,"Callable[[_],None]"
test_split_for_id_and_class,"Callable[[_],None]"
main,"Callable[[],None]"
emoji_names_for_picker,"Callable[[Dict[str, Dict[str, Any]]],List[str]]"
emoji_name_maps,"Dict[str, Dict[str, Any]]"
get_emoji_code,"Callable[[Dict[str, Any]],str]"
generate_emoji_catalog,"Callable[[List[Dict[str, Any]], Dict[str, Dict[str, Any]]],Dict[str, List[str]]]"
emoji_data,"List[Dict[str, Any]]"
emoji_name_maps,"Dict[str, Dict[str, Any]]"
emoji_catalog,"Dict[str, List[str]]"
emoji_is_universal,"Callable[[Dict[str, Any]],bool]"
generate_codepoint_to_name_map,"Callable[[Dict[str, Dict[str, Any]]],Dict[str, str]]"
emoji_name_maps,"Dict[str, Dict[str, Any]]"
generate_name_to_codepoint_map,"Callable[[Dict[str, Dict[str, Any]]],Dict[str, str]]"
emoji_name_maps,"Dict[str, Dict[str, Any]]"
EMOJI_NAME_MAPS,"Dict[str, Dict[str, Any]]"
test_server_running,"Callable[[bool, str, Union[str, None], bool, bool],Iterator[None]]"
force,bool
external_host,str
dots,bool
use_db,bool
self.word_dict,"Dict[str, Set[HtmlTreeBranch]]"
tups,"List[Tuple[str, str]]"
outside_braces,bool
template_id_dict,"Dict[str, List[str]]"
check_banned_words,"Callable[[str],List[str]]"
text,str
self.children,"DefaultDict[str, List[str]]"
self.parents,"DefaultDict[str, List[str]]"
stack,"List[Dict[str, Any]]"
looking_at_handlebarpartial,"Callable[[],bool]"
add_pseudo_end_token,"Callable[[str],None]"
kind,str
is_self_closing_html_tag,"Callable[[Text, Text],bool]"
s,Text
tag,Text
exit_if_droplet_exists,"Callable[[str, str, bool],None]"
my_token,str
username,str
recreate,bool
delete_existing_records,"Callable[[List[digitalocean.Record], str],None]"
records,List[digitalocean.Record]
record_name,str
get_mentor_keys,"Callable[[str],List[str]]"
username,str
suppress_line,"Callable[[str],bool]"
line,str
get_line_info_from_file,"Callable[[str],List[LineTup]]"
fn,str
get_rules_applying_to_fn,"Callable[[str, RuleList],RuleList]"
fn,str
rules,RuleList
check_file_for_pattern,"Callable[[str, List[LineTup], str, Union[Iterable[str], None], Rule],bool]"
fn,str
identifier,str
color,"Union[Iterable[str], None]"
rule,Rule
custom_check_file,"Callable[[str, str, RuleList, Union[Iterable[str], None], Union[int, None]],bool]"
fn,str
identifier,str
rules,RuleList
color,"Union[Iterable[str], None]"
check_file_for_long_lines,"Callable[[str, int, List[LineTup]],bool]"
fn,str
max_length,int
whitespace_rules,RuleList
comma_whitespace_rule,RuleList
markdown_whitespace_rules,RuleList
html_rules,RuleList
json_rules,RuleList
get_images_dir,"Callable[[str],str]"
images_path,str
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
self.images_static_dir,str
_is_external_url,"Callable[[_, str],bool]"
url,str
closed,"Callable[[_],None]"
args,Any
kwargs,Any
__init__,"Callable[[_],None]"
args,Any
kwargs,Any
_set_error_state,"Callable[[_],None]"
_has_extension,"Callable[[_, str],bool]"
url,str
_is_external_url,"Callable[[_, str],bool]"
url,str
check_existing,"Callable[[_, Any],None]"
response,Any
check_permalink,"Callable[[_, Any],None]"
response,Any
parse,"Callable[[_, Any],Generator[Request, None, None]]"
response,Any
callback,Any
retry_request_with_get,"Callable[[_, Request],Generator[Request, None, None]]"
request,Request
exclude_error,"Callable[[_, str],bool]"
url,str
error_callback,"Callable[[_, Any],Union[Generator[Any, None, None], None]]"
failure,Any
run,"Callable[[_, List[str], Any],None]"
opts,Any
list_files,"Callable[[List[str], List[str], bool, bool, List[str], bool, bool],Union[Dict[str, List[str]], List[str]]]"
use_shebang,bool
modified_only,bool
group_by_ftype,bool
extless_only,bool
result_dict,"Dict[str, List[str]]"
lint_functions,"Dict[str, Callable[[],int]]"
__init__,"Callable[[_, int],None]"
error_type,int
render_confirmation_key_error,"Callable[[HttpRequest, ConfirmationKeyException],HttpResponse]"
request,HttpRequest
exception,ConfirmationKeyException
generate_key,"Callable[[],str]"
get_object_from_key,"Callable[[str, int],ConfirmationObjT]"
confirmation_key,str
confirmation_type,int
create_confirmation_link,"Callable[[ContentType, str, int, Union[Dict[str, str], None]],str]"
obj,ContentType
host,str
confirmation_type,int
url_args,"Union[Dict[str, str], None]"
confirmation_url,"Callable[[str, str, int, Union[Dict[str, str], None]],str]"
confirmation_key,str
host,str
confirmation_type,int
url_args,"Union[Dict[str, str], None]"
object_id,int
confirmation_key,str
type,int
__str__,"Callable[[_],str]"
__init__,"Callable[[_, str, int],None]"
url_name,str
validity_in_days,int
one_click_unsubscribe_link,"Callable[[UserProfile, str],str]"
user_profile,UserProfile
email_type,str
generate_realm_creation_url,"Callable[[bool],str]"
by_admin,bool
presume_email_valid,bool
function_with_pep484_type_annotations,"Callable[[int, str],bool]"
param1,int
param2,str
function_with_pep484_type_annotations,"Callable[[int, str],bool]"
param1,int
param2,str
nodeclass,Type[nodes.Element]
innernodeclass,Type[nodes.TextElement]
domain,unicode
role,unicode
anchor,unicode
self.listeners,"Dict[unicode, Dict[int, Callable]]"
self.autodoc_attrgettrs,"Dict[Type, Callable[[Any, unicode, Any],Any]]"
self.builders,"Dict[unicode, Type[Builder]]"
self.documenters,"Dict[unicode, Type[Documenter]]"
self.css_files,"List[Tuple[unicode, Dict[unicode, unicode]]]"
self.domains,"Dict[unicode, Type[Domain]]"
self.domain_directives,"Dict[unicode, Dict[unicode, Any]]"
self.domain_indices,"Dict[unicode, List[Type[Index]]]"
self.domain_object_types,"Dict[unicode, Dict[unicode, ObjType]]"
self.domain_roles,"Dict[unicode, Dict[unicode, Union[RoleFunction, XRefRole]]]"
self.enumerable_nodes,"Dict[Type[nodes.Element], Tuple[unicode, TitleGetter]]"
self.html_inline_math_renderers,"Dict[unicode, Tuple[Callable, Callable]]"
self.html_block_math_renderers,"Dict[unicode, Tuple[Callable, Callable]]"
self.js_files,"List[Tuple[unicode, Dict[unicode, unicode]]]"
self.latex_packages,"List[Tuple[unicode, unicode]]"
self.post_transforms,List[Type[Transform]]
self.source_parsers,"Dict[unicode, Type[Parser]]"
self.source_inputs,"Dict[unicode, Type[Input]]"
self.translators,"Dict[unicode, Type[nodes.NodeVisitor]]"
self.translation_handlers,"Dict[unicode, Dict[unicode, Tuple[Callable, Callable]]]"
self.transforms,List[Type[Transform]]
suffix,unicode
self.builder,Builder
self.env,BuildEnvironment
self.project,Project
self.srcdir,unicode
self.outdir,unicode
self.doctreedir,unicode
self._status,IO
self._warning,IO
self.messagelog,deque
string_classes,List
self.setup,Callable
transforms,List[Type[Transform]]
self.config_dir,unicode
self.builder_target_dirs,"List[Tuple[str, unicode]]"
res,unicode
self._args,"Dict[int, List[Any]]"
self._procs,"Dict[int, multiprocessing.Process]"
invdata,Inventory
invdata,Inventory
ws_re,Pattern
url_re,Pattern
qdirs,"Iterable[Tuple[int, unicode]]"
qfiles,"Iterable[Tuple[int, unicode]]"
self.remaining,deque
split,Any
additional_nodes,Set[nodes.Node]
self.directive_func,Callable
self.roles_func,Callable
results,"List[Tuple[unicode, Any]]"
fs_encoding,unicode
indexentries,"List[Tuple[unicode, unicode, unicode, unicode, unicode]]"
stack,"List[Union[List, Dict]]"
obj,Any
y,Any
location,Any
self.buffer,List[logging.LogRecord]
self.logs,List[logging.LogRecord]
LogRecordClass,Type[logging.LogRecord]
self.b,unicode
name,unicode
format,unicode
epilog,unicode
default_translator_class,Type[nodes.NodeVisitor]
versioning_method,unicode
self.app,Sphinx
self.env,BuildEnvironment
self.config,Config
self.tags,Tags
self.imgpath,unicode
self.finish_tasks,Any
suffixes,unicode
self.metadata,"Dict[unicode, List[Tuple[unicode, int, unicode]]]"
versioning_compare,bool
libchanges,"Dict[unicode, List[Tuple[unicode, unicode, int]]]"
apichanges,"List[Tuple[unicode, unicode, int]]"
otherchanges,"Dict[Tuple[unicode, unicode], List[Tuple[unicode, unicode, int]]]"
metadata,Dict
epub_css_files,"List[Tuple[unicode, Dict]]"
self.redirected,"Dict[unicode, Tuple[unicode, int]]"
self.workers,List[threading.Thread]
self.document_data,"List[Tuple[unicode, unicode, unicode, unicode, unicode, unicode, unicode, bool]]"
self.titles,"List[Tuple[unicode, unicode]]"
settings,Any
newnodes,List[nodes.Node]
docsettings,Any
current_docname,unicode
filename,unicode
filename,unicode
indexer_format,Any
imgpath,unicode
domain_indices,"List[Tuple[unicode, Type[Index], List[Tuple[unicode, List[IndexEntry]]], bool]]"
self.css_files,"List[Dict[unicode, unicode]]"
self.current_docname,unicode
self.docsettings,Any
domain,Domain
indexname,unicode
rellinks,"List[Tuple[unicode, unicode, unicode, unicode]]"
self.dlpath,unicode
implementation,Any
additional_dump_args,Tuple
globalcontext_filename,unicode
html_css_files,"List[Tuple[unicode, Dict]]"
html_js_files,"List[Tuple[unicode, Dict]]"
body,unicode
self.document_data,"List[Tuple[unicode, unicode, unicode, unicode, unicode, bool]]"
self.titles,"List[Tuple[unicode, unicode]]"
docsettings,Any
newnodes,List[nodes.Node]
self.auto_footnotes,List[nodes.footnote]
self.footnote_refs,List[nodes.footnote_reference]
self.appeared,"Set[Tuple[unicode, unicode]]"
self.footnotes,List[nodes.footnote]
self.pendings,List[nodes.footnote]
self.table_footnotes,List[nodes.footnote]
lang,unicode
language_name,unicode
js_stemmer_rawcode,unicode
js_stemmer_code,unicode
self._mapping,"Dict[unicode, Set[unicode]]"
self._title_mapping,"Dict[unicode, Set[unicode]]"
self._objtypes,"Dict[Tuple[unicode, unicode], int]"
self._objnames,"Dict[int, Tuple[unicode, unicode, unicode]]"
self.lang,SearchLanguage
rv,"Dict[unicode, Dict[unicode, Tuple[int, int, int, unicode]]]"
shortanchor,unicode
self.ctypes_libmecab,Any
self.ctypes_mecab,Any
text,unicode
domain,unicode
objtype,unicode
option_spec,Dict
result,List[nodes.Node]
result,List[nodes.Node]
ret,List[nodes.Element]
option_spec,Dict
option_spec,Dict
option_spec,Dict
option_spec,Dict
option_spec,Dict
option_spec,Dict
app_,"Union[util.SphinxTestApp, util.SphinxTestAppWrapperForSkipBuilding]"
cache,"Dict[str, Dict[str, str]]"
prompt,unicode
translators,"Dict[Tuple[unicode, unicode], NullTranslations]"
option_spec,Dict
content,List[nodes.Element]
prev_module,unicode
prev_module,unicode
self.id,unicode
nodetype,Type[nodes.TextElement]
option_spec,Dict
option_spec,Dict
self.tests,List[List[TestCode]]
self.outfile,IO
ns,Dict
option_spec,Dict
name,unicode
uri,unicode
intersphinx_timeout,int
self.c_regexes,"List[Tuple[unicode, Pattern]]"
self.c_ignorexps,"Dict[unicode, List[Pattern]]"
self.py_undoc,"Dict[unicode, Dict[unicode, Any]]"
self.c_undoc,"Dict[unicode, Set[Tuple[unicode, unicode]]]"
undoc,"Set[Tuple[unicode, unicode]]"
classes,"Dict[unicode, List[unicode]]"
_app,Sphinx
self.warnings,List[nodes.Node]
items,"List[Tuple[unicode, unicode, unicode, unicode]]"
col1,unicode
prefixes,List
suffix,unicode
documenters,List[Type[Documenter]]
template_loader,BaseLoader
documented,"List[Tuple[unicode, unicode, unicode]]"
documented,"List[Tuple[unicode, unicode, unicode]]"
toctree,unicode
base_indent,unicode
self.env,BuildEnvironment
self.modname,str
self.module,ModuleType
self.fullname,unicode
self.args,unicode
self.retann,unicode
self.object,Any
self.object_name,unicode
self.parent,Any
self.analyzer,Any
args,unicode
memberdocumenters,"List[Tuple[Documenter, bool]]"
self.real_modname,str
docstring,GoogleDocstring
self._iterable,Iterable
_name,unicode
_type,unicode
_desc,unicode
_name,unicode
_type,unicode
field,unicode
field,unicode
header,unicode
colon,unicode
func_role,unicode
cache,"Dict[Tuple[unicode, unicode], Any]"
self.attr_docs,"Dict[Tuple[unicode, unicode], List[unicode]]"
self.tags,"Dict[unicode, Tuple[unicode, int, int]]"
self.current,Token
self.previous,Token
self.comment,unicode
self.comments,"Dict[Tuple[unicode, unicode], unicode]"
self.decorator,Token
self.indents,List
self.definitions,"Dict[unicode, Tuple[unicode, int, int]]"
self.comments,"Dict[Tuple[unicode, unicode], unicode]"
self.definitions,"Dict[unicode, Tuple[unicode, int, int]]"
env,BuildEnvironment
domain,StandardDomain
children,List[nodes.Node]
old_foot_namerefs,"Dict[unicode, List[nodes.footnote_reference]]"
refname_ids_map,"Dict[unicode, List[unicode]]"
new_entries,"List[Tuple[unicode, unicode, unicode, unicode, unicode]]"
results,"List[Tuple[unicode, nodes.Node]]"
timestamp,float
conversion_rules,"List[Tuple[unicode, unicode]]"
self.available,bool
versioning_conditions,"Dict[unicode, Union[bool, Callable]]"
self.app,Sphinx
self.doctreedir,unicode
self.srcdir,unicode
self.config,Config
self.config_status,int
self.project,Project
self.versioning_compare,bool
self.dependencies,"Dict[unicode, Set[unicode]]"
self.included,"Dict[unicode, Set[unicode]]"
self.metadata,"Dict[unicode, Dict[unicode, Any]]"
self.titles,"Dict[unicode, nodes.title]"
self.longtitles,"Dict[unicode, nodes.title]"
self.tocs,"Dict[unicode, nodes.Node]"
self.toctree_includes,"Dict[unicode, List[unicode]]"
self.files_to_rebuild,"Dict[unicode, Set[unicode]]"
self.indexentries,"Dict[unicode, List[Tuple[unicode, unicode, unicode, unicode, unicode]]]"
self.images,FilenameUniqDict
self.dlfiles,DownloadFiles
globbed,"Dict[unicode, List[unicode]]"
oldkey,unicode
self.lname,unicode
self.roles,Tuple
self.attrs,Dict
name,unicode
localname,unicode
shortname,unicode
roles,"Dict[unicode, Union[RoleFunction, XRefRole]]"
indices,List[Type[Index]]
enumerable_nodes,"Dict[Type[nodes.Element], Tuple[unicode, Callable]]"
initial_data,Dict
data,Dict
self.env,BuildEnvironment
self._role2type,"Dict[unicode, List[unicode]]"
self.objtypes_for_role,"Callable[[unicode],List[unicode]]"
self.role_for_objtype,"Callable[[unicode],unicode]"
initial_data,"Dict[unicode, Dict[unicode, Tuple[unicode, ObjType]]]"
__hash__,"Callable[[],int]"
prefix,unicode
modifiers,List[nodes.Node]
nextReturnTypeId,unicode
self.symbol,Symbol
self.enumeratorScopedSymbol,Any
self.last_match,Match
prefix,Any
templateArgs,List
visibility,unicode
scoped,unicode
templateParams,List
param,Any
templates,List
params,Any
msg,unicode
declaration,Any
option_spec,Dict
option_spec,Dict
option_spec,Dict
ns,ASTNamespace
decl,ASTDeclaration
indextemplate,unicode
parse_node,"Callable[[GenericObject, BuildEnvironment, unicode, addnodes.desc_signature],unicode]"
option_spec,Dict
firstname,unicode
option_spec,Dict
entries,"List[Tuple[List[Tuple[unicode, unicode, int]], StringList]]"
termnodes,List[nodes.Node]
system_messages,List[nodes.Node]
retnodes,List[nodes.Node]
option_spec,Dict
messages,List[nodes.Element]
directives,"Dict[unicode, Type[Directive]]"
roles,"Dict[unicode, Union[RoleFunction, XRefRole]]"
enumerable_nodes,"Dict[Type[nodes.Element], Tuple[unicode, Callable]]"
results,"List[Tuple[unicode, nodes.Element]]"
display_prefix,unicode
initial_data,"Dict[unicode, Dict[unicode, Tuple[unicode, unicode]]]"
option_spec,Dict
initial_data,Dict
initial_data,"Dict[unicode, Dict[unicode, Tuple[unicode, Any]]]"
initial_data,"Dict[unicode, Dict[unicode, Tuple[unicode, int]]]"
stack,List[nodes.Element]
option_spec,Dict
content,"Dict[unicode, List[IndexEntry]]"
initial_data,"Dict[unicode, Dict[unicode, Tuple[Any]]]"
matches,"List[Tuple[unicode, Any]]"
results,"List[Tuple[unicode, nodes.Element]]"
settings_defaults,Dict
output,unicode
self.indices,"List[Tuple[unicode, unicode]]"
self.node_menus,"Dict[unicode, List[unicode]]"
self.rellinks,"Dict[unicode, List[unicode]]"
self.footnotestack,"List[Dict[unicode, List[Union[collected_footnote, bool]]]]"
title,unicode
fnotes,"Dict[unicode, List[Union[collected_footnote, bool]]]"
self.lines,List[List[Cell]]
settings_defaults,Dict
self.states,"List[List[Tuple[int, Union[unicode, List[unicode]]]]]"
self.table,Table
result,"List[Tuple[int, List[unicode]]]"
text,unicode
ADDITIONAL_SETTINGS,"Dict[unicode, Dict[unicode, unicode]]"
settings_defaults,Dict
self.colspec,unicode
self.cells,"Dict[Tuple[int, int], int]"
self.table,Table
self.next_table_colspec,unicode
self.bodystack,List[List[unicode]]
self.pending_footnotes,List[nodes.footnote_reference]
fnotes,"Dict[unicode, List[Union[collected_footnote, bool]]]"
ctx,unicode
config_section_dependencies,unicode
f0,"Callable[[int, Integral],None]"
x,int
y,Integral
f2,"Callable[[List[T], List[T_co], T],List[T_contra]]"
z,T
f3,"Callable[[Union[str, Integral]],None]"
f4,"Callable[[MyStr, MyStr],None]"
x,MyStr
y,MyStr
f5,"Callable[[int],None]"
x,int
y,str
z,str
f6,"Callable[[int],None]"
x,int
y,str
z,str
f7,"Callable[[int, dict],None]"
x,int
y,dict
f8,"Callable[[Callable[[int, str],int]],None]"
x,"Callable[[int, str],int]"
f9,"Callable[[Callable],None]"
x,Callable
f10,"Callable[[Tuple[int, str], _],None]"
f11,"Callable[[_, _],None]"
f14,"Callable[[],Any]"
f15,"Callable[[Unknown, int],Any]"
x,Unknown
y,int
__init__,"Callable[[_, Union[Node, None]],None]"
